// --------------- Info ---------------

version = getTagVersion('library/')
description = 'The Dyvil Standard Library'
publishInfo.labels = [ 'dyvil', 'library' ]

// --------------- Source Sets ---------------

sourceSets.main {
	java {
		srcDir '../src/library'
		srcDir '../src/asm'
		srcDir '../src/tools'
	}

	resources {
		srcDir '../src/library'
		srcDir '../src/tools'

		exclude dyvilFilters
		exclude genSrcFilters
	}
}

// --------------- Dependencies ---------------

def compilerOutput = files("$buildDir/classes/dyvil/main/") {
	builtBy 'compileDyvil'
}

dependencies {
	runtime compilerOutput
	compileOnly rootProject.libraryDependency
}

jar.from compilerOutput

// =============== Tasks ===============

// --------------- GenSrc ---------------

def gensrcTarget = file "$buildDir/gensrc/main/dyvil/"

tasks.register('gensrcDyvil', JavaExec) {
	group 'sources'

	it.workingDir = rootDir
	setupGenSrc(it,
			source_dirs: [ 'src/library/', 'src/gensrc-base/' ],
			output_dir: "$it.temporaryDir/classes/",
			gensrc_dir: gensrcTarget.path,
	)
}

// --------------- Dyvil Compile ---------------

tasks.register('compileDyvil', JavaExec) {
	group 'build'
	dependsOn 'gensrcDyvil'

	setupCompiler(it,
			source_dirs: [ file('../src/library/').path, file('../src/tools/').path, gensrcTarget.path ],
			libraries: [ ],
			output_dir: "$buildDir/classes/dyvil/main/",
	)
}
