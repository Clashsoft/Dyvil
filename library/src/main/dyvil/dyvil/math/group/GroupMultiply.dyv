package dyvil.math.group

interface GroupMultiply<T> {
	abstract var _1: T { get }

	abstract func multiply(lhs: T, rhs: T) -> T

	func power(lhs: T, rhs: int) -> T {
		if rhs < 0 { throw new UnsupportedOperationException('negative exponent') }
		if rhs == 0 { return this._1 }
		if rhs == 1 { return lhs }

		// exp by squaring
		if 0 == (rhs & 1) {
			return this.power(this.multiply(lhs, lhs), rhs >> 1)
		}
		else {
			// use (rhs >> 1) instead of (rhs - 1) \ 2
			return this.multiply(lhs, this.power(this.multiply(lhs, lhs), rhs >> 1))
		}
	}

	implicit static func of<@Reified(.ANY_CLASS) type R: RingCompatible<R>>() -> GroupMultiply<R>
		= new GroupMultiply<R>() {
			override var _1: R { get: R._1 }

			override func multiply(lhs: R, rhs: R) -> R = R.`*`(lhs, rhs)

			override func power(lhs: R, rhs: int) -> R = R.`**`(lhs, rhs)
		}
}
