package dyvil.collection.mutable

import dyvil.collection.impl.AbstractBitSet
import dyvil.lang.LiteralConvertible

@Immutable
@LiteralConvertible.FromArray
class BitSet extends AbstractBitSet implements MutableSet<int>
{
	// Factory Methods

	static func apply() -> BitSet = new BitSet

	static func apply(elements: int...) -> BitSet = new BitSet(elements)

	static func from(array: [int]) -> BitSet = new BitSet(array)

	static func from(iterable: Iterable<+int>) -> BitSet = new BitSet(iterable)

	static func from(iterable: SizedIterable<+int>) -> BitSet = new BitSet(iterable)

	static func from(bitSet: AbstractBitSet) -> BitSet = new BitSet(bitSet)

	// Constructors

	public init() : super()

	public init(capacity: int) : super(capacity)

	public init(elements: [int]) : super(elements)

	public init(iterable: Iterable<+int>) : super(iterable)

	public init(iterable: SizedIterable<+int>) : super(iterable)

	public init(bitSet: AbstractBitSet) : super(bitSet)

	// Implementation Methods

	override func clear() -> void
	{
		this.size = 0
		for (i <- 0 ..< this.words.size)
		{
			this.words[i] = 0L
		}
	}

	override func add(element: int) -> boolean
	{
		if (this.bitSet(element)) return false

		this.setBit(element)
		return true
	}

	override func remove(element: any!) -> boolean
	{
		if (!(element is Int)) return false

		let bit = element as int
		if (!this.bitSet(bit)) return false

		this.clearBit(bit)
		return true
	}

	override func removeAt(bit: int) -> void = this.clearBit(bit)

	override func map(mapper: java.util.function.Function<-int, +int>) -> void
	{
		let ints = this.toIntArray
		this.clear()
		for (i <- ints) this.add(mapper(i))
	}

	override func flatMap(mapper: java.util.function.Function<-int, +Iterable<+int>>)
	{
		let ints = this.toIntArray

		this.clear()
		for (i <- ints) for (newValue <- mapper(i)) this.add(newValue)
	}

	override func copy() -> MutableSet<int> = this.mutableCopy

	override func immutable() -> ImmutableSet<int> = this.immutableCopy
}
