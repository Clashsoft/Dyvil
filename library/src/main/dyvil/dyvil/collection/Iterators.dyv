package dyvil.collection

import dyvil.collection.iterator._
import java.util.Iterator
import java.util.function.{ Function, Predicate }

@JavaName("Iterators")
extension<type E> Iterator<E> {
	// =============== Static Methods ===============

	@JavaName("empty")
	static func apply<type E>() -> Iterator<E> = EmptyIterator<E>()

	@JavaName("of")
	static func apply<type E>(element: E) -> Iterator<E> = SingletonIterator<E>(element)

	@JavaName("of")
	static func apply<type E>(elements: E...) -> Iterator<E> = ArrayIterator<E>(elements)

	// =============== Operators ===============

	@JavaName("concat")
	infix func ++ <type E>(lhs: Iterator<+E>, rhs: Iterator<+E>) -> Iterator<E> = ConcatIterator(lhs, rhs)

	@JavaName("prepend")
	infix func + <type E>(lhs: E, rhs: Iterator<+E>) -> Iterator<E> = PrependIterator(lhs, rhs)

	@JavaName("append")
	infix func + <type E>(lhs: Iterator<+E>, rhs: E) -> Iterator<E> = AppendIterator(lhs, rhs)

	// =============== Methods ===============

	// --------------- Filter ---------------

	func filtered(predicate: Predicate<-E>) -> Iterator<E> = FilterIterator<E>(this, predicate)

	// --------------- Map ---------------

	func mapped<type R>(mapper: Function<-E, +R>) -> Iterator<R> = MapIterator<E, R>(this, mapper)

	// --------------- Flat Map ---------------

	func flatMapped<type R>(mapper: Function<-E, +Iterator<+R>>) -> Iterator<R> = FlatMapIterator<E, R>(this, mapper)
}
