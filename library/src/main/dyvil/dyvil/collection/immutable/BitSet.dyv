package dyvil.collection.immutable

import dyvil.collection.impl.AbstractBitSet
import dyvil.lang.LiteralConvertible

@Immutable
@LiteralConvertible.FromArray
class BitSet extends AbstractBitSet implements ImmutableSet<int>
{
	// Factory Methods

	static func apply() -> BitSet = new BitSet

	static func apply(elements: int...) -> BitSet = new BitSet(elements)

	static func from(array: [int]) -> BitSet = new BitSet(array)

	static func from(iterable: Iterable<+int>) -> BitSet = new BitSet(iterable)

	static func from(iterable: SizedIterable<+int>) -> BitSet = new BitSet(iterable)

	static func from(bitSet: AbstractBitSet) -> BitSet = new BitSet(bitSet)

	// Constructors

	protected init() : super()

	protected init(capacity: int) : super(capacity)

	public init(elements: [int]) : super(elements)

	public init(iterable: Iterable<+int>) : super(iterable)

	public init(iterable: SizedIterable<+int>) : super(iterable)

	public init(bitSet: AbstractBitSet) : super(bitSet)

	// Implementation Methods

	protected override func removeAt(bit: int) -> void
		= throw new dyvil.util.ImmutableException("Iterator.remove() on Immutable Set")

	override func added(element: int) -> BitSet
	{
		if this.bitSet(element) {
			return this
		}

		let copy = new BitSet(this)
		copy.setBit(element)
		return copy
	}

	override func removed(element: any!) -> BitSet {
		if !(element is Int) {
			return this
		}

		let bit = element as int
		if !this.bitSet(bit) {
			return this
		}

		let copy = new BitSet(this)
		copy.clearBit(bit)
		return copy
	}

	override func union(collection: Collection<+int>) -> BitSet {
		if collection.isEmpty {
			return this
		}

		let copy = new BitSet(this)
		for element <- collection {
			copy.setBit(element)
		}
		return copy
	}

	override func difference(collection: Collection<_>) -> BitSet {
		if collection.isEmpty || this.isEmpty {
			return this
		}

		let copy = new BitSet(this)
		for element <- collection {
			if element is Int {
				copy.clearBit(element as int)
			}
		}
		return copy
	}

	override func intersection(collection: Collection<+int>) -> BitSet {
		if collection.isEmpty || this.isEmpty {
			return this
		}

		let copy = new BitSet(this.size)
		for element <- collection {
			if this.bitSet(element) {
				copy.setBit(element)
			}
		}
		return copy
	}

	override func symmetricDifference(collection: Collection<+int>) -> BitSet
	{
		if collection.isEmpty {
			return this
		}
		if this.isEmpty {
			return new BitSet(collection)
		}

		let copy = new BitSet
		for element <- collection {
			if !this.bitSet(element) {
				copy.setBit(element)
			}
		}

		for element <- this {
			if !collection.contains(element) {
				copy.setBit(element)
			}
		}
		return copy
	}

	override func mapped<R>(mapper: java.util.function.Function<-int, +R>) -> ImmutableSet<R>
	{
		let builder = ImmutableSet.builder<R>
		for element <- this {
			builder.add(mapper(element))
		}
		return builder.build
	}

	override func flatMapped<R>(mapper: java.util.function.Function<-int, +Iterable<+R>>) -> ImmutableSet<R>
	{
		let builder = ImmutableSet.builder<R>
		for element <- this {
			for result <- mapper.apply(element) {
				builder.add(result)
			}
		}
		return builder.build
	}

	override func filtered(predicate: java.util.function.Predicate<-int>) -> BitSet
	{
		let copy = new BitSet(this.size)
		for element <- this {
			if predicate.test(element) {
				copy.setBit(element)
			}
		}
		return copy
	}

    override func copy() -> ImmutableSet<int> = this.immutableCopy

	override func mutable() -> MutableSet<int> = this.mutableCopy

	override func toJava() -> java.util.Set<int> = java.util.Collections.unmodifiableSet(super.toJava)
}
