package dyvil.collection

import java.util._
import java.util.function._

@Deprecated(replacements: [ "java.util.Iterable" ])
interface SizedIterable<type E> extends Iterable<E>
{
	// Size

	func size() -> int

	func isEmpty() -> boolean = this.size() == 0

	// Iterator

	override func iterator() -> Iterator<E>

	override func spliterator() -> Spliterator<E> = Spliterators.spliterator(this.iterator(), this.size(), 0)

	// For Each

	override func forEach(action: Consumer<-E>!) -> void = for e <- this { action.accept(e) }

	@OverloadPriority
	func forEach(action: E -> void) -> void = for e <- this { action(e) }

	inline static func |_|(it: SizedIterable<_>) -> int = it.size
}
