package dyvil.collection

import dyvil.collection.immutable.PrependList

class ListOperators
{
	// List Operators

	infix inline func + <T>(lhs: List<T>, rhs: T) -> List<T> = lhs.added(rhs)

	infix inline func ++ <T>(lhs: List<T>, rhs: List<+T>) -> List<T> = lhs.union(rhs)

	infix inline func - <T>(lhs: List<T>, rhs: any) -> List<T> = lhs.removed(rhs)

	infix inline func -- <T>(lhs: List<T>, rhs: List<_>) -> List<T> = lhs.difference(rhs)

	// Mutable List Operators

	infix inline func + <T>(lhs: MutableList<T>, rhs: T) -> MutableList<T> = lhs.added(rhs)

	infix inline func ++ <T>(lhs: MutableList<T>, rhs: List<+T>) -> MutableList<T> = lhs.union(rhs)

	infix inline func - <T>(lhs: MutableList<T>, rhs: any) -> MutableList<T> = lhs.removed(rhs)

	infix inline func -- <T>(lhs: MutableList<T>, rhs: List<_>) -> MutableList<T> = lhs.difference(rhs)

	// Immutable List Operators

	infix inline func :: <T>(head: T, tail: ImmutableList<T>) -> ImmutableList<T> = new PrependList<T>(head, tail)

	infix inline func + <T>(lhs: ImmutableList<T>, rhs: T) -> ImmutableList<T> = lhs.added(rhs)

	infix inline func ++ <T>(lhs: ImmutableList<T>, rhs: List<+T>) -> ImmutableList<T> = lhs.union(rhs)

	infix inline func - <T>(lhs: ImmutableList<T>, rhs: any) -> ImmutableList<T> = lhs.removed(rhs)

	infix inline func -- <T>(lhs: ImmutableList<T>, rhs: List<_>) -> ImmutableList<T> = lhs.difference(rhs)
}
