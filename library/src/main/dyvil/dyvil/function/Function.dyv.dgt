// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.function

abstract class Function {
	private init() {} // no instances

	@FunctionalInterface
	interface Of0<type +R> {
		func apply() -> R
	}

	@FunctionalInterface
	interface Of1<type -P1, type +R> {
		func apply(_ par1: P1) -> R

		final extension func compose<A, B, C>(this: B -> C, _ g: A -> B) -> (A -> C) = x => this(g(x))

		final extension func andThen<A, B, C>(this: A -> B, _ g: B -> C) -> (A -> C) inline = g.compose(this)

		// composition operator
		infix func * <A, B, C>(_ lhs: B -> C, _ rhs: A -> B) -> (A -> C) inline = lhs.compose(rhs)

		// repeated application / pow operator
		infix func ** <A>(_ lhs: A -> A, _ n: int) -> (A -> A) = a => {
			var result = a
			for i <- 0 ..< n {
				result = lhs(result)
			}
			return result
		}

		/*
		// alternative ** (pow) implementation that creates a recursive lambda:
		// f ** n = f(f(...f(n)...))
		//          ^---_--^
		//              n function calls
		infix func ** <A>(_ lhs: A -> A, _ n: int) -> (A -> A) = n match {
			case 0 => identity<A>()            // f^0 = id
			case var n => lhs * (lhs ** (n-1)) // f^n = f * (f ** (n-1))
		}
		*/

		static func identity<T> -> (T -> T) = x => x
	}

	@FunctionalInterface
	interface Of2<type -P1, type -P2, type +R> {
		func apply(_ par1: P1, _ par2: P2) -> R

		final extension func curried<A, B, C>(this: (A, B) -> C) -> (A -> B -> C) = p1 => p2 => this(p1, p2)

		final extension func tupled<A, B, C>(this: (A, B) -> C) -> (((A, B)) -> C) = tuple => this(tuple._1, tuple._2)
	}

	#for (ARITY <- 3 .. LibraryGenConstants.MAX_ARITY) {

		@FunctionalInterface
		interface Of#(ARITY)<#for (INDEX <- 1 .. ARITY) {type -P#(INDEX), }type +R> {
			func apply(_ par1: P1#for (INDEX <- 2 .. ARITY) {, _ par#(INDEX): P#(INDEX)}) -> R
		}
	}
}
