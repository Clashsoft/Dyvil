// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.array

abstract class ArrayOperators {
	private init() {} // no instances

	// --------------- Generic Object Array Operators ---------------

	inline infix func in <T>(value: T, array: [T]) -> boolean = array.contains(value)

	infix func ? <T>(lhs: [T], rhs: T) -> boolean inline = lhs.contains(rhs)

	infix func + <T>(lhs: [T], rhs: T) -> [T] inline = lhs.added(rhs)

	infix func + <T>(lhs: T, rhs: [T]) -> [T] inline = rhs.added(lhs)

	infix func ++ <T>(lhs: [T], rhs: [T]) -> [T] inline = lhs.union(rhs)

	infix func - <T>(lhs: [T], rhs: T) -> [T] inline = lhs.removed(rhs)

	infix func -- <T>(lhs: [T], rhs: [T]) -> [T] inline = lhs.difference(rhs)

	#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
		#let(PRIMITIVE = spec['PRIMITIVE'])
		#let(TYPE_NAME = spec['TYPE_NAME'])

		// --------------- TYPE_NAME Array Operators ---------------

		inline infix func in(value: PRIMITIVE, array: [PRIMITIVE]) -> boolean = array.contains(value)

		infix func ? (lhs: [PRIMITIVE], rhs: PRIMITIVE) -> boolean inline = lhs.contains(rhs)

		infix func + (lhs: [PRIMITIVE], rhs: PRIMITIVE) -> [PRIMITIVE] inline = lhs.added(rhs)

		infix func + (lhs: PRIMITIVE, rhs: [PRIMITIVE]) -> [PRIMITIVE] inline = rhs.added(lhs)

		infix func ++ (lhs: [PRIMITIVE], rhs: [PRIMITIVE]) -> [PRIMITIVE] inline = lhs.union(rhs)

		infix func - (lhs: [PRIMITIVE], rhs: PRIMITIVE) -> [PRIMITIVE] inline = lhs.removed(rhs)

		infix func -- (lhs: [PRIMITIVE], rhs: [PRIMITIVE]) -> [PRIMITIVE] inline = lhs.difference(rhs)
	}
}
