// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.array

abstract class PrimitiveObjectArray {
	package private init() {} // no instances from outside this package

	#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
		#let(TYPE_NAME = spec['TYPE_NAME'])
		#let(PRIMITIVE = spec['PRIMITIVE'])
		#let(WRAPPER = spec['WRAPPER'])
		// TYPE_NAME wrapper array methods

		infix func flatten(array: [[PRIMITIVE]]) -> [PRIMITIVE] {
			// Compute the size of the resulting array
			var size = 0
			for nested <- array {
				size += nested.size
			}

			// Construct and fill the array
			let res = new [PRIMITIVE](size)
			var index = 0

			for nested <- array {
				let nestedSize = nested.size
				System.arraycopy(nested, 0, res, index, nestedSize)
				index += nestedSize
			}

			return res
		}

		infix func unboxed(array: [WRAPPER]) -> [PRIMITIVE] {
			let size = array.size
			let unboxed = new [PRIMITIVE](size)
			for i <- 0 ..< size {
				unboxed[i] = array[i]
			}
			return unboxed
		}
	}
}
