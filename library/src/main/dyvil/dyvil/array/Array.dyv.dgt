#let(TYPE_NAME          = spec['TYPE_NAME'])
#let(PRIMITIVE          = spec['PRIMITIVE'])
#let(WRAPPER            = spec['WRAPPER'])
#let(HAS_RANGE_CLASS    = Boolean.parseBoolean(spec['HAS_RANGE_CLASS']))
#let(IS_RANGEABLE       = Boolean.parseBoolean(spec['IS_RANGEABLE']))
#let(RANGE_CAST         = Boolean.parseBoolean(spec['RANGE_CAST']))
#let(IS_GENERIC         = Boolean.parseBoolean(spec['IS_GENERIC']))
#let(ARRAY_LOAD_INSN    = spec['ARRAY_LOAD_INSN'])
#let(ARRAY_STORE_INSN   = spec['ARRAY_STORE_INSN'])
#let(ERASURE            = spec['ERASURE'] ?? PRIMITIVE)

#let(REIFIED)           {@Reified(.OBJECT_CLASS)}
#let(GENERIC)           {#if (IS_GENERIC) {<T>}}
#let(GENERIC_2)         {#if (IS_GENERIC) {<T, REIFIED U>} #else {<REIFIED U>}}
#let(GENERIC_REIFIED)   {#if (IS_GENERIC) {<REIFIED T>}}
#let(T)                 {#if (IS_GENERIC) {#("T")} #else {PRIMITIVE}}

#func(APPLY(body BODY: String) -> String) {#if (IS_GENERIC) {ObjectArray<T>(BODY)} #else {new [PRIMITIVE](#({
	let index = BODY.lastIndexOf(',');
	index < 0 ? BODY : BODY.substring(0, index)
}))}}

// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.array

#if(HAS_RANGE_CLASS){import dyvil.collection.range.closed.#(TYPE_NAME)Range}

import dyvil.ref.#(TYPE_NAME)Ref
import dyvil.ref.array.#(TYPE_NAME)ArrayRef

import java.util.Arrays
import java.lang.reflect.Array

import static dyvil.reflect.Opcodes._

public abstract class #(TYPE_NAME)Array {
	private init() {} // no instances

	public const EMPTY: [final #if (IS_GENERIC) {ERASURE} #else {T}] = []

	static inline func apply GENERIC_REIFIED() -> [T] = []

	#if (IS_GENERIC) {
		static inline func apply GENERIC_REIFIED(size: int) -> [T] = ObjectArray<T>(size, of: class T)

		@JavaName('ofType')
		static func apply GENERIC(size: int, of elementType: Class<T>) -> [T] = Array.newInstance(elementType, size) as [T]
	}
	#else {
		static inline func apply(size: int) -> [T] = new [T](size)
	}

	static inline func apply GENERIC(array: [T]) -> [T] = array.copy

	#if (HAS_RANGE_CLASS) {
		static func apply GENERIC(range: #(TYPE_NAME)Range) -> [T] = range.to#(TYPE_NAME)Array()
	}

	static func apply GENERIC_REIFIED(size: int, repeatedValue: T) -> [T] {
		let array = #APPLY{size}

		for i <- 0 ..< size {
			array[i] = repeatedValue
		}
		return array
	}

	static func apply GENERIC_REIFIED(size: int, valueSupplier: () -> T) -> [T] {
		let array = #APPLY{size}

		for i <- 0 ..< size {
			array[i] = valueSupplier()
		}
		return array
	}

	static func apply GENERIC_REIFIED(size: int, valueMapper: int -> T) -> [T] {
		let array = #APPLY{size}

		for i <- 0 ..< size {
			array[i] = valueMapper(i)
		}
		return array
	}

	#if (IS_RANGEABLE) {
		@JavaName('rangeClosed')
		static func apply GENERIC(from: T, to: T) -> [T] {
			let array = #APPLY{(to - from + 1)#if (RANGE_CAST) { as int}}

			var index = 0
			for i <- from .. to {
				array[index] = i
				index += 1
			}
			return array
		}

		@JavaName('rangeOpen')
		static func apply GENERIC(from: T, explicit toExclusive: T) -> [T] {
			let array = #APPLY{(toExclusive - from)#if (RANGE_CAST) { as int}}

			var index = 0
			for i <- from ..< toExclusive {
				array[index] = i
				index += 1
			}
			return array
		}
	}

	// Basic Array Operations

	@Intrinsic([ LOAD_0, ARRAYLENGTH ])
	final extension func size GENERIC(this: [T]) -> int = this.size

	@Intrinsic([ LOAD_0, ARRAYLENGTH ])
	static func |_| GENERIC(array: [T]) -> int = array.size

	@Intrinsic([ LOAD_0, ARRAYLENGTH, EQ0 ])
	final extension func isEmpty GENERIC(this: [T]) -> boolean = this.isEmpty

	@Intrinsic([ LOAD_0, LOAD_1, ARRAY_LOAD_INSN ])
	final extension func subscript GENERIC(this: [T], index: int) -> T = this[index]

	@Mutating
	@Intrinsic([ LOAD_0, LOAD_1, LOAD_2, ARRAY_STORE_INSN ])
	final extension func subscript_= GENERIC(this: [T], index: int, newValue: T) -> void = this[index] = newValue

	final extension func subscript GENERIC(this: [T], range: Range<int>) -> [T] {
		let size = range.size
		let result = #APPLY{size, of: this.elementType}

		System.arraycopy(this, range.first, result, 0, size)
		return result
	}

	@Mutating
	final extension func subscript_= GENERIC(this: [T], range: Range<int>, newValues: [T]) -> void
		= System.arraycopy(newValues, 0, this, range.first, range.size)

	@Mutating
	final extension func subscript_& GENERIC(this: [T], index: int) -> #(TYPE_NAME)Ref
		= new #(TYPE_NAME)ArrayRef(this, index)

	final extension func forEach GENERIC(this: [T], action: T -> void) -> void
		= for value <- this { action(value) }

	#if (IS_GENERIC) {
		// Component Types

		final extension func elementType GENERIC(this: [T]) -> Class<T> = this.getClass().getComponentType() as Class<T>

		final extension func deepElementType GENERIC(this: [T]) -> Class<_> {
			var result: Class<_> = this.getClass()
			while true {
				let elementType = result.getComponentType()
				if elementType == null {
					break
				}
				result = elementType
			}
			return result
		}
	}

	// Operators

	@Intrinsic([], compilerCode: Intrinsic.ARRAY_SPREAD)
	postfix func `...` GENERIC(array: [T]) -> [T] = array

	#if (IS_GENERIC) {
		infix inline func == GENERIC(lhs: [T]!, rhs: [T]!) -> boolean = Arrays.deepEquals(lhs, rhs)

		infix inline func != GENERIC(lhs: [T]!, rhs: [T]!) -> boolean = !Arrays.deepEquals(lhs, rhs)
	}
	#else {
		infix inline func ==(lhs: [T]!, rhs: [T]!) -> boolean = Arrays.equals(lhs, rhs)

		infix inline func !=(lhs: [T]!, rhs: [T]!) -> boolean = !Arrays.equals(lhs, rhs)
	}

	final extension func added GENERIC(this: [T], value: T) -> [T] {
		let size = this.size
		let result = #APPLY{size + 1, of: this.elementType}

		System.arraycopy(this, 0, result, 0, size)
		result[size] = value
		return result
	}

	final extension func inserted GENERIC(this: [T], at index: int, value: T) -> [T] {
		let size = this.size
		let result = #APPLY{size + 1, of: this.elementType}

		System.arraycopy(this, 0, result, 0, index)
		result[index] = value
		System.arraycopy(this, index, result, index + 1, size - index)
		return result
	}

	final extension func union GENERIC(this: [T], with: [T]) -> [T] {
		let size1 = this.size
		let size2 = with.size
		let size = size1 + size2
		let result = #APPLY{size, of: this.elementType}

		System.arraycopy(this, 0, result, 0, size1)
		System.arraycopy(with, 0, result, size1, size2)
		return result
	}

	final extension func removed GENERIC(this: [T], value: T) -> [T] {
		var size = this.size

		// Calculate number of elements in new array
		for element <- this {
			if element == value {
				size -= 1
			}
		}

		let result = #APPLY{size, of: this.elementType}

		var index = 0
		for element <- this {
			if element != value {
				result[index] = element
				index += 1
			}
		}
		return result
	}

	final extension func difference GENERIC(this: [T], from: [T]) -> [T] {
		let size = this.size
		let result = #APPLY{size, of: this.elementType}

		var index = 0
		for v <- this {
			if !from.contains(v) {
				result[index] = v
				index += 1
			}
		}
		return result.trim(index)
	}

	final extension func intersection GENERIC(this: [T], with: [T]) -> [T] {
		let size = this.size
		let result = #APPLY{size, of: this.elementType}

		var index = 0
		for v <- this {
			if with.contains(v) {
				result[index] = v
				index += 1
			}
		}
		return result.trim(index)
	}

	#if (!IS_GENERIC /* Object Arrays do not need a specialized mapped method */ ) {
		final extension func mappedTo#(TYPE_NAME)(this: [T], mapper: T -> T) -> [T] {
			let size = this.size
			let result = #APPLY{size}

			for i <- 0 ..< size {
				result[i] = mapper(this[i])
			}
			return result
		}
	}

	@OverloadPriority
	final extension func mapped GENERIC_2(this: [T], mapper: T -> U) -> [U] {
		let size = this.size
		let result = ObjectArray<U>(size)
		for i <- 0 ..< size {
			result[i] = mapper(this[i])
		}
		return result
	}

	#if (!IS_GENERIC /* Object Arrays do not need a specialized flatMapped method */) {
		final extension func flatMappedTo#(TYPE_NAME)(this: [T], mapper: T -> [T]) -> [T] {
			var size = 0
			var result = #APPLY{this.size << 2}

			for v <- this {
				let inner = mapper(v)
				let newSize = inner.size

				if size + newSize >= result.size {
					result = result.copy((size + newSize) << 1)
				}

				System.arraycopy(inner, 0, result, size, newSize)
				size += newSize
			}

			return result.trim(size)
		}
	}

	@OverloadPriority
	final extension func flatMapped GENERIC_2(this: [T], mapper: T -> Iterable<+U>) -> [U] {
		let list = new mutable.ArrayList<U>(this.size << 2)

		for value <- this {
			list.addAll(mapper(value))
		}
		return list.toArray<U>(class U)
	}

	final extension func filtered GENERIC(this: [T], condition: T -> boolean) -> [T] {
		let size = this.size
		let result = #APPLY{size, of: this.elementType}

		var index = 0
		for v <- this {
			if condition(v) {
				result[index] = v
				index += 1
			}
		}
		return result.trim(index)
	}

	final extension func sorted GENERIC(this: [T]) -> [T] {
		#if (TYPE_NAME == 'Boolean') {
			let size = this.size
			let result = new [boolean](size)

			// Count the number of 'false' entries in the array
			var falseEntries = 0

			for value <- this {
				if !value {
					falseEntries += 1
				}
			}

			// Make the remaining elements of the result true
			for i <- falseEntries ..< size {
				result[i] = true
			}
			return result
		}
		#else {
			let result = this.copy
			Arrays.sort(result)
			return result
		}
	}

	// Search Operations

	final extension func contains GENERIC(this: [T], value: T) -> boolean inline = this.indexOf(value, 0) >= 0

	final extension func indexOf GENERIC(this: [T], value: T) -> int inline = this.indexOf(value, 0)

	final extension func indexOf GENERIC(this: [T], value: T, startIndex: int) -> int {
		while startIndex < this.size {
			if this[startIndex] == value {
				return startIndex
			}
			startIndex += 1
		}
		return -1
	}

	final extension func lastIndexOf GENERIC(this: [T], value: T) -> int = this.lastIndexOf(value, this.size - 1)

	final extension func lastIndexOf GENERIC(this: [T], value: T, startIndex: int) -> int {
		while startIndex >= 0 {
			if this[startIndex] == value {
				return startIndex
			}
			startIndex -= 1
		}
		return -1
	}

	// Copying

	final extension func copy GENERIC(this: [T]) -> [T] inline = (this as Object).clone() as [T]

	final extension func copy GENERIC(this: [T], withSize size: int) -> [T] {
		let result = #APPLY{size, of: this.elementType}

		System.arraycopy(this, 0, result, 0, Math.min(size, this.size))
		return result
	}

	final extension func trim GENERIC(this: [T], toSize size: int) -> [T] = this.size <= size ? this : this.copy(size)

	#if(!IS_GENERIC /* Object arrays cannot be boxed */) {
		final extension func boxed(this: [T]) -> [WRAPPER] {
			let size = this.size
			let boxed = new [WRAPPER](size)

			for i <- 0 ..< size {
				boxed[i] = this[i]
			}
			return boxed
		}
	}

	// FIXME use "final extension", when the compiler supports "implicit extension"
	implicit postfix func asIterable GENERIC(array: [T]) -> Iterable<T> inline = array.toList

	implicit postfix func asList GENERIC(array: [final T]) -> ImmutableList<T> inline = array.toList

	final extension func toList GENERIC(this: [T]) -> ImmutableList<T> = new immutable.ArrayList<T>(#if (TYPE_NAME == 'Object') {this} #else {this.boxed, trusted: true})

	// equals, hashCode and toString

	#if (IS_GENERIC) {
		final extension func equals(this: [ERASURE]!, other: [ERASURE]!) -> boolean inline = Arrays.deepEquals(this, other)

		override final extension func hashCode(this: [ERASURE]!) -> int inline = Arrays.deepHashCode(this)

		final extension func arrayEquals(this: any!, rhs: any!) -> boolean = [this].equals([rhs])

		final extension func arrayHashCode(this: any!) -> int = [this].hashCode
	}
	#else {
		final extension func equals(this: [T]!, other: [T]!) -> boolean inline = Arrays.equals(this, other)

		override final extension func hashCode(this: [T]!) -> int inline = Arrays.hashCode(this)
	}

	// toString

	override final extension func toString(this: [ERASURE]!) -> String {
		if let array = this {
			let size = array.size
			if size == 0 {
				return '[]'
			}

			let builder = new StringBuilder
			append(array, size, builder)
			return builder.toString!!
		}
		else {
			return 'null'
		}
	}

	final extension func toString(this: [ERASURE]!, builder: StringBuilder) -> void {
		if let array = this {
			let size = array.size
			if size == 0 {
				builder.append('[]')
				return
			}

			append(array, size, builder)
		}
		else {
			builder.append('null')
		}
	}

	private static func append(array: [ERASURE], size: int, builder: StringBuilder) -> void {
		#if (IS_GENERIC) {
			builder.append('[')
			array[0].arrayToString(builder)
			for i <- 1 ..< size {
				builder.append(', ')
				array[i].arrayToString(builder)
			}
			builder.append(']')
		}
		#else {
			builder.append('[').append(array[0])
			for i <- 1 ..< size {
				builder.append(', ').append(array[i])
			}
			builder.append(']')
		}
	}

	#if (IS_GENERIC) {
		final extension func arrayToString(this: ERASURE) -> String {
			if this == null {
				return 'null'
			}

			let objectClass = this!!.dynamicClass
			if !objectClass.isArray {
				return this!!.toString
			}

			#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
				#let(P = spec['PRIMITIVE'])
				if objectClass === class [P] { return (this as [P]).toString }
			}
			return (this as [ERASURE]).toString
		}

		final extension func arrayToString(this: ERASURE, builder: StringBuilder) -> void {
			if this == null {
				builder.append('null')
				return
			}

			let objectClass = this!!.dynamicClass
			if !objectClass.isArray {
				builder.append(this)
				return
			}

			#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
				#let(P = spec['PRIMITIVE'])
				if objectClass === class [P] { (this as [P]).toString(builder); return }
			}
			(this as [ERASURE]).toString(builder)
		}
	}
}
