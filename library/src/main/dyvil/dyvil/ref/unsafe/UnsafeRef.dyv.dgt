// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.ref.unsafe

import dyvil.ref._
import const dyvil.reflect.ReflectUtils.UNSAFE

import java.lang.reflect.Field

// *************** UnsafeObjectRef ***************

class UnsafeObjectRef<type T>(protected let base: Object!, protected let offset: long) implements ObjectRef<T> {
	public init(staticField: Field) : this(UNSAFE.staticFieldBase(staticField), UNSAFE.staticFieldOffset(staticField))

	public init(receiver: Object!, field: Field) : this(receiver, UNSAFE.objectFieldOffset(field))

	override func get() -> T = UNSAFE.getObject(this.base, this.offset) as T

	override func set(value: T) -> void = UNSAFE.putObject(this.base, this.offset, value)
}

#for(spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
	#let(TYPE_NAME = spec['TYPE_NAME'])
	#let(PRIMITIVE = spec['PRIMITIVE'])

	// *************** Unsafe#(TYPE_NAME)Ref ***************

	class Unsafe#(TYPE_NAME)Ref(protected let base: Object!, protected let offset: long) implements #(TYPE_NAME)Ref {
		public init(staticField: Field) : this(UNSAFE.staticFieldBase(staticField), UNSAFE.staticFieldOffset(staticField))

		public init(receiver: Object!, field: Field) : this(receiver, UNSAFE.objectFieldOffset(field))

		override func get() -> PRIMITIVE = UNSAFE.get#(TYPE_NAME)(this.base, this.offset)

		override func set(value: PRIMITIVE) -> void = UNSAFE.put#(TYPE_NAME)(this.base, this.offset, value)
	}
}
