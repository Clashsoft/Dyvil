// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.ref

import dyvil.ref.array._
import dyvil.ref.unsafe._
import dyvil.reflect.ReflectUtils
import dyvil.runtime.reference.PropertyReferenceMetafactory

import java.lang.invoke._
import java.lang.reflect.Field

public final class ReferenceFactory
{
	private const STATIC_CONSTRUCTOR_TYPE:   MethodType = MethodType.methodType(class<void>, class<Field>)
	private const INSTANCE_CONSTRUCTOR_TYPE: MethodType = MethodType.methodType(class<void>, class<Object>, class<long>)

	private static func getField(forType: Class<_>, withName: String) -> Field throws NoSuchFieldException
		= forType.getDeclaredField(withName)

	// Bootstrap Factories

	static func instanceRefMetafactory(
		caller: MethodHandles.Lookup, fieldName: String, methodType: MethodType
	) -> CallSite throws Throwable
	{
		let enclosingClass = methodType.parameterType(0)
		let targetType = methodType.returnType()

		// The field to reference and its offset
		let field = getField(enclosingClass, fieldName)
		let offset: long = ReflectUtils.UNSAFE.objectFieldOffset(field)

		// The Unsafe*Ref constructor
		let constructor: MethodHandle = caller.findConstructor(targetType, INSTANCE_CONSTRUCTOR_TYPE)

		// Insert the offset argument, returning a method of type (enclosingClass)Unsafe*Ref
		return new ConstantCallSite(MethodHandles.insertArguments(constructor, 1, offset).asType(methodType))
	}

	static func staticRefMetafactory(
		caller: MethodHandles.Lookup, fieldName: String, methodType: MethodType,
		enclosingClass: Class<_>
	) -> CallSite throws Throwable
	{
		let targetType = methodType.returnType()

		// The field to reference
		let field = getField(enclosingClass, fieldName)

		// The Unsafe*Ref(Field) constructor
		let constructor: MethodHandle = caller.findConstructor(targetType, STATIC_CONSTRUCTOR_TYPE)

		// The resulting Unsafe*Ref
		let result = constructor.invokeWithArguments(field)
		return new ConstantCallSite(MethodHandles.constant(targetType, result))
	}

	static func propertyRefMetafactory(
		caller: MethodHandles.Lookup, invokedName: String, invokedType: MethodType,
		getter: MethodHandle, setter: MethodHandle
	) -> CallSite throws Exception
		= new PropertyReferenceMetafactory(caller, invokedType, getter, setter).buildCallSite()

	// Reference Factory Methods
	#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
		#let(TYPE_NAME = spec['TYPE_NAME'])
		#let(PRIMITIVE = spec['PRIMITIVE'])

		// TYPE_NAME

		static func new#(TYPE_NAME)Ref(base: Object, offset: long) -> #(TYPE_NAME)Ref
			= new Unsafe#(TYPE_NAME)Ref(base, offset)

		static func new#(TYPE_NAME)Ref(base: Object, ofType: Class<_>, field: String) -> #(TYPE_NAME)Ref throws NoSuchFieldException
			= new Unsafe#(TYPE_NAME)Ref(base, getField(ofType, field))

		static func newStatic#(TYPE_NAME)Ref(forType: Class<_>, field: String) -> #(TYPE_NAME)Ref throws NoSuchFieldException
			= new Unsafe#(TYPE_NAME)Ref(getField(forType, field))

		static func new#(TYPE_NAME)ArrayRef(array: [PRIMITIVE], index: int) -> #(TYPE_NAME)Ref
			= new #(TYPE_NAME)ArrayRef(array, index)
	}
}
