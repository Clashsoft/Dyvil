package dyvil.io

import java.io._

public abstract class Console {
	// =============== Constants ===============

	public const ANSI_RESET: String = '\e[0m'

	public const ANSI_BOLD:          String = '\e[1m'
	public const ANSI_DIM:           String = '\e[2m'
	public const ANSI_ITALIC:        String = '\e[3m'
	public const ANSI_UNDERLINE:     String = '\e[4m'
	public const ANSI_BLINK:         String = '\e[5m'
	public const ANSI_FAST_BLINK:    String = '\e[6m'
	public const ANSI_INVERSE:       String = '\e[7m'
	public const ANSI_HIDDEN:        String = '\e[8m'
	public const ANSI_STRIKETHROUGH: String = '\e[9m'

	public const ANSI_BLACK:  String = '\e[30m'
	public const ANSI_RED:    String = '\e[31m'
	public const ANSI_GREEN:  String = '\e[32m'
	public const ANSI_YELLOW: String = '\e[33m'
	public const ANSI_BLUE:   String = '\e[34m'
	public const ANSI_PURPLE: String = '\e[35m'
	public const ANSI_CYAN:   String = '\e[36m'
	public const ANSI_WHITE:  String = '\e[37m'

	// =============== Static Fields ===============

	private static var reader: BufferedReader!
	private static var out:    PrintStream!

	static init {
		setOut(System.out)
		setIn(System.in)
	}

	// =============== Constructors ===============

	private init() {}

	// =============== Static Methods ===============

	// --------------- General ---------------

	static func isTerminalOutput() -> boolean = System.console !== null

	static func setOut(out: PrintStream) -> void = Console.out = out

	static func setIn(in: InputStream) -> void = Console.reader = new BufferedReader(new InputStreamReader(in))

	// --------------- Output ---------------

	static func writeLine() -> void = out.println()

	static func writeLine(value: any!) -> void = out.println(value)

	static func writeLine(value: String) -> void = out.println(value)

	final extension func styled(this: String, with style: String) -> String = style ++ this ++ ANSI_RESET

	@JavaName("appendStyled")
	final extension func append(this: StringBuilder, text: String, with style: String) -> StringBuilder {
		return this.append(style).append(text).append(ANSI_RESET)
	}

	@JavaName("appendStyled")
	final extension func append(this: StringBuilder, with style: String, body: StringBuilder.() -> void) -> StringBuilder {
		this.append(style)
		body(this)
		return this.append(ANSI_RESET)
	}

	// --------------- Input ---------------

	static func readLine() -> String! {
		try {
			return reader.readLine()
		}
		catch ex: IOException {}
		return null
	}

	static func readString() -> String = readLine()

	static func readString(charCount: int) -> String! {
		let chars = new [char](charCount)
		try {
			reader.read(chars)
			return new String(chars)
		}
		catch ex: IOException {}
		return null
	}

	static func readByte() -> byte = Int.parseInt(readLine()) as byte

	static func readShort() -> short = Int.parseInt(readLine()) as short

	static func readChar() -> char = readCodePoint() as char

	static func readCodePoint() -> int {
		try {
			return reader.read()
		}
		catch ex: IOException {}
		return 0
	}

	static func readInt() -> int = Int.parseInt(readLine())

	static func readLong() -> long = Long.parseLong(readLine())

	static func readFloat() -> float = Float.parseFloat(readLine())

	static func readDouble() -> double = Double.parseDouble(readLine())
}
