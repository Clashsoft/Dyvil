package dyvil.io

import java.io.File
import java.io.IOException
import java.nio.file.Files
import java.nio.charset.Charset
import java.util.List
import java.util.regex.Pattern

@JavaName("Files")
extension File {

	// --------------- Ant File Name Patterns ---------------

	static func antPattern(pattern: String) -> Pattern {
		let length = pattern.length()
		let builder = new StringBuilder(length)

		for i <- 0 ..< length {
			pattern.charAt(i) match {
				case '?' => builder.append('.')
				case '*' if i + 1 < length && pattern.charAt(i + 1) == '*' => builder.append('.*')
				case '*' => builder.append('[^/]*')
				case '(' => builder.append('\\(')
				case ')' => builder.append('\\)')
				case '[' => builder.append('\\[')
				case ']' => builder.append('\\]')
				case '{' => builder.append('\\{')
				case '}' => builder.append('\\}')
				case '.' => builder.append('\\.')
				case '^' => builder.append('\\^')
				case '$' => builder.append('\\$')
				case '|' => builder.append('\\|')
				case let c => builder.append(c)
			}
		}

		return Pattern(builder.toString())
	}

	// --------------- File Creation ---------------

	final func create() -> void throws IOException inline = this.createNewFile()

	final func tryCreate() -> boolean = IOAction.tryIO { this.create() }

	final func createRecursively() -> void throws IOException {
		if this.exists() {
			return
		}

		if let parent = this.getParentFile {
			if !parent.exists() && !parent.mkdirs() {
				throw new IOException("could not create parent directory \(parent)")
			}
		}

		this.createNewFile()
	}

	final func tryCreateRecursively() -> boolean = IOAction.tryIO { this.createRecursively() }

	// --------------- Writing to a File ---------------

	@JavaName("writeData")
	final func write(data: [byte]) -> void throws IOException {
		this.createRecursively()
		Files.write(this.toPath(), data)
	}

	@JavaName("tryWriteData")
	final func tryWrite(data: [byte]) -> boolean = IOAction.tryIO { this.write(data) }

	@JavaName("writeText")
	final func write(text: String) -> void throws IOException = this.write(text.getBytes)

	@JavaName("tryWriteText")
	final func tryWrite(text: String) -> boolean = IOAction.tryIO { this.write(text) }

	@JavaName("writeLines")
	final func write(lines: List<String>) -> void throws IOException {
		this.createRecursively()
		Files.write(this.toPath(), lines, Charset.defaultCharset)
	}

	@JavaName("tryWriteLines")
	final func tryWrite(lines: List<String>) -> boolean = IOAction.tryIO { this.write(lines) }

	// --------------- Reading from a File ---------------

	final func readData() -> [byte] throws IOException inline = Files.readAllBytes(this.toPath())

	final func tryReadData() -> [byte]? = IOSupplier.tryIO { this.readData() }

	final func readText() -> String throws IOException inline = new String(this.readData())

	final func tryReadText() -> String? = IOSupplier.tryIO { this.readText() }

	final func readLines() -> List<String> throws IOException inline = Files.readAllLines(this.toPath()) as List<String>

	final func tryReadLines() -> List<String>? = IOSupplier.tryIO { this.readLines() }

	// --------------- File Deletion ---------------

	final func deleteRecursively() -> boolean = this.deleteRecursively(Int.MAX_VALUE)

	final func deleteRecursively(maxDepth: int) -> boolean {
		if maxDepth > 0 && this.isDirectory {
			if let files = this.listFiles() {
				for subFile <- files {
					subFile.deleteRecursively(maxDepth - 1)
				}
			}
		}
		return this.delete()
	}
}
