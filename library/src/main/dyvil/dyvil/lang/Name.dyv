package dyvil.lang

import java.util.{ Map, HashMap, concurrent.ConcurrentHashMap }

import func dyvil.util.Qualifier.{ qualify, unqualify }

import java.io.{ DataInput, DataOutput, IOException }

@LiteralConvertible.FromString
final class Name private (
	public let unqualified: String { get }
	public let qualified: String { get }
) {
	// =============== Constants ===============

	/**
	 * This is about the size of the CACHE after the REPL has been initialized. Eagerly creating a large Hash Table may
	 * improve performance by reducing the number of resize operations.
	 */
	private const CACHE_CAPACITY: int = 1024

	// =============== Static Fields ===============

	/**
	 * This cache stores mappings between both qualified names and their associated Name objects.
	 * The invariant 'CACHE.get(name.qualified) == name for all name: Name' always holds.
	 */
	private const CACHE: Map<String, Name> = new ConcurrentHashMap<String, Name>(CACHE_CAPACITY)

	// =============== Static Methods ===============

	// --------------- Generic ---------------

	static func apply(value: String) -> Name {
		return apply(qualified: qualify(value))
	}

	@Deprecated(replacements: ["Name.apply(value: String)"]) // in Dyvil only, this func is for Java interop
	static func from(value: String) -> Name = apply(value)

	// --------------- Explicit Qualified and Unqualified ---------------

	static func apply(unqualified: String, qualified: String) -> Name {
		return CACHE.computeIfAbsent(qualified, v => new Name(unqualified, v))
	}

	@Deprecated(replacements: ["Name.apply(unqualified: String, qualified: String)"]) // in Dyvil only
	static func from(unqualified: String, qualified: String) -> Name = apply(unqualified, qualified)

	// --------------- From Raw ---------------

	@JavaName('fromRaw')
	static func apply(explicit raw value: String) -> Name {
		return CACHE.computeIfAbsent(value, v => new Name(v, v))
	}

	// --------------- From Unqualified ---------------

	@JavaName('fromUnqualified')
	static func apply(explicit unqualified: String) -> Name {
		return CACHE.computeIfAbsent(qualify(unqualified), v => new Name(unqualified, v))
	}

	// --------------- From Qualified ---------------

	@JavaName('fromQualified')
	static func apply(explicit qualified: String) -> Name {
		return CACHE.computeIfAbsent(qualified, v => new Name(unqualify(v), v))
	}

	// --------------- Serialization ---------------

	static func read(from input: DataInput) -> Name! throws IOException {
		if let data = input.readUTF(), !data.isEmpty() {
			return apply(unqualified: data)
		}
		return null
	}

	final extension func write(this: Name!, to output: DataOutput) -> void throws IOException {
		output.writeUTF(this?.unqualified ?? "")
	}

	// =============== Methods ===============

	func write(to output: DataOutput) -> void throws IOException {
		output.writeUTF(this.unqualified)
	}

	// --------------- Equals and Hash Code ---------------

	/*
	 * Because Names are interned, equals and hashCode are identity-based.
	 * Thus, the equals and hashCode methods from Object are not overriden.
	 */

	// --------------- Helper Methods ---------------

	func equals(qualified: String) -> boolean = this.qualified == qualified

	func startsWith(qualified: String) -> boolean = this.qualified.startsWith(qualified)

	func endsWith(qualified: String) -> boolean = this.qualified.endsWith(qualified)

	// --------------- String Conversion ---------------

	override func toString() -> String = this.unqualified
}
