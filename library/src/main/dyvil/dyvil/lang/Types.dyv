package dyvil.lang

import const dyvil.reflect.Opcodes._

final class Types {
	private init() {}

	// Value to Type / Class Conversions

	final extension func staticClass<@Reified(.ANY_CLASS) type T: Object>(this: T) -> Class<T> inline = class T

	final extension func staticType<@Reified(.TYPE) type T: Object>(this: T) -> Type<T> inline = type T

	@Intrinsic([ LOAD_0, INVOKEVIRTUAL, 0, 1, 2 ], strings: [ "java/lang/Object", "getClass", "()Ljava/lang/Class;" ])
	final extension func dynamicClass<type T: Object>(this: T) -> Class<+T> = this.getClass() as Class<+T>

	// Class Extensions

	@JavaName("arrayTypeOf")
	static func arrayType<@Reified(.ANY_CLASS) type T: any>() -> Class<[T]> = class<[T]>

	@OverloadPriority
	final extension func arrayType<type T: any>(this: Class<T>) -> Class<_> {
		let builder = new StringBuilder().append '['

		if this.isPrimitive {
			dyvil.reflect.types.PrimitiveType(this).appendSignature(builder)
		}
		else if this.isArray {
			builder.append(this.getName)
		}
		else {
			builder.append('L').append(this.getName).append(';')
		}

		return Class.forName(builder.toString, false, this.getClassLoader)
	}

	@JavaName("objectArrayType")
	final extension func arrayType<type T: Object>(this: Class<T>) -> Class<[T]> {
		let className = this.isArray ? "[\(this.getName)" : "[L\(this.getName);"
		return Class.forName(className, false, this.getClassLoader) as Class<[T]>
	}
}
