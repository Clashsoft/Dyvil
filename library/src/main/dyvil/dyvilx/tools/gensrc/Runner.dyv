package dyvilx.tools.gensrc

import java.util.{ List, ArrayList }
import java.io.File

class Runner {
	static func main(args: [String]) {
		let basePath = new File('.').getAbsolutePath
		print("Generating sources from templates in '\(basePath)'...")

		var specs = 0
		let templates = parseTemplates(args)
		for temp <- templates {
			specs += temp.generate()
		}

		print("Generated sources for \(templates.size) template(s) and \(specs) spec(s).")
	}

	private static func parseTemplates(args: [String]) -> List<Template> {
		let argc = args.size
		var outputDir: File = new File('.')
		let templates = new ArrayList<Template>()
		let specFiles = new ArrayList<String>()

		for i <- 0 ..< argc {
			let arg = args[i]
			if arg.startsWith('output_dir=') {
				outputDir = new File(arg.substring(11))
				continue
			}
			if arg.startsWith('source_dir=') {
				Builtins.addSourceDir(arg.substring(11))
				continue
			}

			if arg == '-t' {
				// legacy, ignore
			}
			else if arg.endsWith('.dgs') {
				specFiles.add(arg)
			}
			else {
				let currentTemplate = Class.forName(arg).newInstance() as Template
				currentTemplate.outputDir = outputDir
				templates.add(currentTemplate)
			}
		}

		for currentTemplate <- templates {
			for specFile <- specFiles {
				currentTemplate.addSpec(specFile)
			}
		}

		return templates
	}
}
