// ---------------------------------------- Plugins ----------------------------------------

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

import org.apache.tools.ant.filters.ReplaceTokens

// ---------------------------------------- Main Settings ----------------------------------------

class Constants {
	public static String version = '0.40.0'
	public static String libraryVersion = '0.40.0'
	public static String compilerVersion = '0.40.0'
	public static String replVersion = '0.25.0'
	public static String dpfVersion = '0.15.4'
	public static String genSrcVersion = '0.9.2'

	public static final String devStage = 'epsilon'

	public static final String replMainClass = 'dyvilx.tools.repl.Main'
	public static final String compilerMainClass = 'dyvilx.tools.compiler.Main'
	public static final String genSrcMainClass = 'dyvilx.tools.gensrc.Main'

	public static final List<String> dyvilFilters = [ '**/*.dyv', '**/*.dyh', '**/*.dyvil', '**/*.dyvilh' ]
	public static final List<String> javaFilters = [ '**/*.java' ]
	public static final List<String> genSrcFilters = [ '**/*.dgt', '**/*.dgs', '**/*.dgc', '**/*.dgh' ]
	public static final List<String> resourceFilters = [ '**/*.properties' ]
	public static final List<String> binaryFilters = [ '**/*.dyo', '**/*.class' ]
}

project.group = 'clashsoft'
project.version = Constants.version

// ---------------------------------------- Nightly Versioning ----------------------------------------

Map<String, String> env = System.getenv()
String buildNum = env['TRAVIS_BUILD_NUMBER'] ?: env['DRONE_BUILD_NUMBER']
boolean nightly

if (buildNum) {
	String info = "+nightly." + buildNum

	Constants.version += info
	Constants.libraryVersion += info
	Constants.compilerVersion += info
	Constants.replVersion += info
	Constants.dpfVersion += info
	Constants.genSrcVersion += info

	nightly = true
}

// ---------------------------------------- Source Settings ----------------------------------------

//noinspection GroovyAssignabilityCheck
sourceSets {
	library {
		java {
			srcDir 'src/library'
			srcDir 'src/asm'
			srcDir 'src/tools'
			srcDir "$buildDir/gensrc/library"
			include Constants.javaFilters
		}

		resources {
			srcDir 'src/library'
			srcDir 'src/tools'
			include Constants.resourceFilters
		}
	}

	dpf {
		java {
			srcDir 'src/dpf'
			srcDir "$buildDir/gensrc/dpf"
			include Constants.javaFilters
		}

		resources {
			srcDir 'src/dpf'
			include Constants.resourceFilters
		}
	}

	compiler {
		java {
			srcDir 'src/compiler'
			include Constants.javaFilters
		}

		resources {
			srcDir 'src/compiler'
			include Constants.resourceFilters
		}
	}

	repl {
		java {
			srcDir 'src/repl'
			include Constants.javaFilters
		}

		resources {
			srcDir 'src/repl'
			include Constants.resourceFilters
		}
	}

	gensrc {
		java {
			srcDir 'src/gensrc'
			include Constants.javaFilters
		}

		resources {
			srcDir 'src/gensrc'
			include Constants.resourceFilters
		}
	}

	test {
		java {
			srcDir 'src/test'
			include Constants.javaFilters
		}
	}
}

//noinspection GroovyAssignabilityCheck
processResources {
	include Constants.resourceFilters
}

// ---------------------------------------- Dependencies ----------------------------------------

repositories {
	mavenCentral()
}

dependencies {
	compile fileTree('libs/')

	// --------------- Library ---------------

	libraryCompile(files("$buildDir/classes/dyvil/library", 'libs/dyvil-library.jar'))

	def libraryCP = sourceSets.library.output + sourceSets.library.compileClasspath

	// --------------- Compiler ---------------

	compilerCompile(files("$buildDir/classes/dyvil/compiler"), libraryCP)

	def compilerCP = sourceSets.compiler.output + sourceSets.compiler.compileClasspath

	// --------------- DPF ---------------

	dpfCompile(files("$buildDir/classes/dyvil/dpf"), libraryCP)

	def dpfCP = sourceSets.dpf.output + sourceSets.dpf.compileClasspath

	// --------------- REPL ---------------

	replCompile(files("$buildDir/classes/dyvil/repl"), compilerCP)

	// --------------- GenSrc ---------------

	gensrcCompile(files("$buildDir/classes/dyvil/gensrc"), compilerCP)

	// --------------- Test ---------------

	// https://mvnrepository.com/artifact/junit/junit
	testCompile group: 'junit', name: 'junit', version: '4.12'

	testCompile(files("$buildDir/classes/dyvil/test"), dpfCP)
}

wrapper.setDistributionType(Wrapper.DistributionType.ALL)

// ---------------------------------------- Copy Tasks ----------------------------------------

// Library

task copyLibraryJava(type: Sync, dependsOn: 'genLibrary') {
	from sourceSets.library.java
	into "$buildDir/src/java/library"

	include Constants.javaFilters
	includeEmptyDirs = false
}

compileLibraryJava.dependsOn copyLibraryJava
compileLibraryJava.source = "$buildDir/src/java/library"

task copyLibraryDyvil(type: Sync, dependsOn: 'genLibrary') {
	from 'src/library'
	from 'src/tools'
	from "$buildDir/gensrc/library"
	into "$buildDir/src/dyvil/library"

	include Constants.dyvilFilters
	includeEmptyDirs = false
}

// Compiler

task copyCompilerJava(type: Sync) {
	from sourceSets.compiler.java
	into "$buildDir/src/java/compiler"

	include Constants.javaFilters
	includeEmptyDirs = false

	filesMatching('**/DyvilCompiler.java') {
		filter(ReplaceTokens, beginToken: '$$', endToken: '$$', tokens: [
				version        : Constants.version,
				libraryVersion : Constants.libraryVersion,
				compilerVersion: Constants.compilerVersion
		])
	}
}

compileCompilerJava.dependsOn copyCompilerJava
compileCompilerJava.source = "$buildDir/src/java/compiler"

// REPL

task copyReplJava(type: Sync) {
	from sourceSets.repl.java
	into "$buildDir/src/java/repl"

	include Constants.javaFilters
	includeEmptyDirs = false

	filesMatching('**/DyvilREPL.java') {
		filter(ReplaceTokens, beginToken: '$$', endToken: '$$', tokens: [
				replVersion: Constants.replVersion
		])
	}
}

compileReplJava.dependsOn copyReplJava
compileReplJava.source = "$buildDir/src/java/repl"

// DPF

task copyDPFDyvil(type: Sync, dependsOn: 'genDPF') {
	from 'src/dpf'
	from "$buildDir/gensrc/dpf"
	into "$buildDir/src/dyvil/dpf"

	includeEmptyDirs = false
	include Constants.dyvilFilters
}

// GenSrc

task copyGensrcJava(type: Sync) {
	from sourceSets.gensrc.java
	into "$buildDir/src/java/gensrc"

	include Constants.javaFilters
	includeEmptyDirs = false
}

compileGensrcJava.dependsOn copyGensrcJava
compileGensrcJava.source = "$buildDir/src/java/gensrc"

// Tests

task copyTestDyvil(type: Sync) {
	from 'src/test'
	into "$buildDir/src/dyvil/test"

	includeEmptyDirs = false
	include Constants.dyvilFilters
}

// ---------------------------------------- Compilation Tasks ----------------------------------------

idea.module.inheritOutputDirs = true

tasks.withType(JavaCompile).all {
	it.options.compilerArgs.addAll(
			'-parameters',          // generates parameter attributes and names
			'-XDignore.symbol.file' // disables "proprietary API" warnings
	)
	it.options.fork = true
}

private void setupCompiler(Map args, JavaExec exec, List<String> fileFilters) {
	String[] source_dirs = args['source_dirs']
	String[] libraries = args['libraries']
	String output_dir = args['output_dir']
	String main_type = args['main_type']
	String[] include_patterns = args['include_patterns']
	String[] exclude_patterns = args['exclude_patterns']

	exec.main = Constants.compilerMainClass
	exec.classpath = files('libs/dyvil-library.jar', 'libs/dyvil-compiler.jar')

	if (source_dirs) {
		exec.args "source_dirs=${ source_dirs.join(':') }"

		for (String src : source_dirs) {
			exec.inputs.files fileTree(src) {
				include fileFilters
			}
		}
	}

	if (include_patterns) {
		exec.args "include_patterns=${ include_patterns.join(':') }"
	}

	if (exclude_patterns) {
		exec.args "exclude_patterns=${ exclude_patterns.join(':') }"
	}

	if (libraries) {
		exec.args "libraries=${ libraries.join(':') }"

		for (String library : libraries) {
			exec.inputs.files fileTree(library)
		}
	}

	if (output_dir) {
		exec.args "output_dir=$output_dir"

		exec.outputs.dir output_dir
	}

	if (main_type) {
		exec.args "main_type=$main_type"

		exec.args 'test'
	}

	exec.args 'compile', '--ansi'
}

private void setupCompiler(Map args, JavaExec exec) {
	setupCompiler(args, exec, Constants.dyvilFilters)
}

private void setupGenSrc(Map args, JavaExec exec) {
	setupCompiler(args, exec, Constants.genSrcFilters)

	String gensrc_dir = args['gensrc_dir']

	exec.main = Constants.genSrcMainClass
	exec.classpath = files('libs/dyvil-library.jar', 'libs/dyvil-compiler.jar', 'libs/dyvil-gensrc.jar')

	if (gensrc_dir) {
		exec.args "gensrc_dir=$gensrc_dir"
		exec.args 'test'
	}

	// Outputs and Inputs
	exec.outputs.dir gensrc_dir
}

task genLibrary(type: JavaExec) { JavaExec exec ->
	setupGenSrc(exec,
			source_dirs: [ 'src/library/', 'src/gensrc-base/' ],
			output_dir: "$buildDir/classes/dyvil/library-gen/",
			gensrc_dir: "$buildDir/gensrc/library/",
	)
}

task genDPF(type: JavaExec) { JavaExec exec ->
	setupGenSrc(exec,
			source_dirs: [ 'src/dpf/', 'src/gensrc-base/' ],
			output_dir: "$buildDir/classes/dyvil/dpf-gen/",
			gensrc_dir: "$buildDir/gensrc/dpf/",
	)
}

/**
 * Compiles the Dyvil Classes and Headers in the Dyvil Library by running the previous version of the compiler
 */
task compileLibraryDyvil(type: JavaExec, dependsOn: [ 'compilerClasses', 'copyLibraryDyvil' ]) { JavaExec exec ->
	setupCompiler(exec,
			source_dirs: [ "$buildDir/src/dyvil/library/" ],
			libraries: [ ],
			output_dir: "$buildDir/classes/dyvil/library",
	)
}

task compileDPFDyvil(type: JavaExec, dependsOn: [ 'compileLibraryDyvil', 'copyDPFDyvil' ]) { JavaExec exec ->
	setupCompiler(exec,
			source_dirs: [ "$buildDir/src/dyvil/dpf" ],
			libraries: [ "$buildDir/classes/dyvil/library/" ],
			output_dir: "$buildDir/classes/dyvil/dpf",
	)
}

task compileTestDyvil(type: JavaExec, dependsOn: [ 'compileDPFDyvil', 'copyTestDyvil' ]) { JavaExec exec ->
	setupCompiler(exec,
			source_dirs: [ 'src/test/' ],
			libraries: [ "$buildDir/classes/dyvil/library/", "$buildDir/classes/dyvil/dpf/" ],
			output_dir: "$buildDir/classes/dyvil/test/",
			exclude_patterns: [ 'dyvil/experimental/**' ],
	)
}

// ---------------------------------------- Test Tasks ----------------------------------------

/* // Add a / at the start of this line to skip all compilation tasks
tasks.withType(JavaExec).forEach{it.enabled = false}
tasks.withType(JavaCompile).forEach{it.enabled = false}
//*/

task testDyvil(type: JavaExec, dependsOn: [ 'compileTestDyvil' ]) {
	main = 'dyvil.test.Main'
	classpath = sourceSets.test.runtimeClasspath
}

task testGenSrc(type: JavaExec, dependsOn: [ 'gensrcClasses' ]) { JavaExec exec ->
	setupGenSrc(exec,
			source_dirs: [ 'src/test/' ],
			output_dir: "$buildDir/classes/test-gen/",
			gensrc_dir: "$buildDir/gensrc/test/",
	)
}

test.dependsOn 'testDyvil', 'testGenSrc'

// ---------------------------------------- Build Tasks ----------------------------------------

/**
 * Creates a Jar file that contains all library classes (from src/library), including ASM
 */
task buildLibrary(type: Jar, dependsOn: [ 'libraryClasses', 'compileLibraryDyvil' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources

	from("$buildDir/classes/dyvil/library") {
		include Constants.binaryFilters
	}

	archiveName = "dyvil-library-${ Constants.libraryVersion }.jar"
}

task buildDPF(type: Jar, dependsOn: [ 'dpfClasses', 'compileDPFDyvil' ]) {
	from sourceSets.dpf.output

	from("$buildDir/classes/dyvil/dpf") {
		include Constants.binaryFilters
	}

	archiveName = "dyvil-property-format-${ Constants.dpfVersion }.jar"
}

/**
 * Creates a Jar file that contains all compiler classes (from src/compiler)
 */
task buildCompiler(type: Jar, dependsOn: 'compilerClasses') {
	from sourceSets.compiler.output
	from sourceSets.compiler.resources

	archiveName = "dyvil-compiler-${ Constants.compilerVersion }.jar"

	manifest.attributes("Main-Class": Constants.compilerMainClass)
}

/**
 * Creates a Jar file that contains all REPL classes (from src/repl)
 */
task buildREPL(type: Jar, dependsOn: 'replClasses') {
	from sourceSets.repl.output
	from sourceSets.repl.resources

	archiveName = "dyvil-repl-${ Constants.replVersion }.jar"

	manifest.attributes("Main-Class": Constants.replMainClass)
}

task buildGenSrc(type: Jar, dependsOn: 'gensrcClasses') {
	from sourceSets.gensrc.output
	from sourceSets.gensrc.resources

	archiveName = "dyvil-gensrc-${ Constants.genSrcVersion }.jar"

	manifest.attributes("Main-Class": Constants.genSrcMainClass)
}

/**
 * Creates a Jar file that combines all classes from library, compiler and REPL.
 */
task buildAll(type: Jar, dependsOn: [ 'libraryClasses', 'compileLibraryDyvil', 'compilerClasses', 'replClasses',
                                      'dpfClasses', 'compileDPFDyvil', 'gensrcClasses' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources
	from sourceSets.compiler.output
	from sourceSets.compiler.resources
	from sourceSets.repl.output
	from sourceSets.repl.resources
	from sourceSets.dpf.output
	from sourceSets.gensrc.output
	from sourceSets.gensrc.resources

	from("$buildDir/classes/dyvil/library") {
		include Constants.binaryFilters
	}
	from("$buildDir/classes/dyvil/dpf") {
		include Constants.binaryFilters
	}

	archiveName = "dyvil-${ Constants.version }.jar"

	manifest.attributes("Main-Class": Constants.replMainClass)
}

build.setDependsOn([ 'buildAll', 'buildLibrary', 'buildCompiler', 'buildREPL', 'buildDPF', 'buildGenSrc' ])

/**
 * Creates a Jar file that contains all library classes generated from Dyvil source code and saves it in libs/
 */
task bootstrapLibrary(type: Copy, dependsOn: [ 'buildLibrary' ]) { Copy task ->
	confBootstrapTask(task, 'dyvil-library', Constants.libraryVersion)
}
task bootstrapCompiler(type: Copy, dependsOn: [ 'buildCompiler' ]) { Copy task ->
	confBootstrapTask(task, 'dyvil-compiler', Constants.compilerVersion)
}
task bootstrapGenSrc(type: Copy, dependsOn: [ 'buildGenSrc' ]) { Copy task ->
	confBootstrapTask(task, 'dyvil-gensrc', Constants.genSrcVersion)
}

def confBootstrapTask(Copy task, String artifact, String version) {
	task.from("$buildDir/libs/")
			.include("$artifact-${ version }.jar")
			.rename(".*", "${ artifact }.jar")
			.into('libs/')
}

task bootstrap(dependsOn: [ 'bootstrapLibrary', 'bootstrapCompiler', 'bootstrapGenSrc' ])

tasks.withType(Jar).forEach {
	it.preserveFileTimestamps = false

	it.from('.') {
		include '*LICENSE*.txt'
	}
}

// ---------------------------------------- Version Files ----------------------------------------

task prepareRelease(type: Copy) {
	outputs.upToDateWhen { return false }

	from 'versions/'

	if (nightly) {
		into 'versions'
		include 'nightly-template.dyp'
		rename 'nightly\\-template\\.dyp', 'nightly.dyp'
	}
	else {
		into "versions/$Constants.devStage"
		include 'template.dyp'
		rename 'template\\.dyp', "v${ Constants.version }.dyp"
	}

	filter(ReplaceTokens, beginToken: '$$', endToken: '$$', tokens: [
			version        : Constants.version,
			libraryVersion : Constants.libraryVersion,
			compilerVersion: Constants.compilerVersion,
			replVersion    : Constants.replVersion,
			dpfVersion     : Constants.dpfVersion,
			genSrcVersion  : Constants.genSrcVersion
	])

	doLast {
		println "Release v$Constants.version"
		println ""
		println "Library v$Constants.libraryVersion"
		println "Compiler v$Constants.compilerVersion"
		println "REPL v$Constants.replVersion"
		println "Dyvil Property Format v$Constants.dpfVersion"
		println "GenSrc v$Constants.genSrcVersion"
	}
}

if (nightly) {
	build.dependsOn 'prepareRelease'
}

// ---------------------------------------- Cleanup Tasks ----------------------------------------

clean {
	delete = buildDir.listFiles().findAll({
		def path = it.getPath()
		!path.endsWith('libs') && !path.endsWith('idea-out')
	}).toSet()
}
