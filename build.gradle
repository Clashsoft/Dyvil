import org.apache.tools.ant.filters.ReplaceTokens

// --------------- Plugins ---------------

plugins {
	id 'com.jfrog.bintray' version '1.8.4' apply false
	id 'de.clashsoft.simple-publish' version '0.3.0' apply false
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'de.clashsoft.simple-publish'
}

// --------------- Info ---------------

version = '0.44.1'
description = 'The Dyvil programming language.'
publishInfo.labels = [ 'dyvil', 'programming-language', 'jvm' ]

allprojects {
	group = 'org.dyvil'

	publishInfo {
		organization = 'dyvil'
		websiteUrl = 'https://github.com/Dyvil/Dyvil'
		issueTrackerUrl = 'https://github.com/Dyvil/Dyvil/issues'
		vcsUrl = 'https://github.com/Dyvil/Dyvil'
		githubRepo = 'Dyvil/Dyvil'

		license {
			shortName = 'BSD 3-Clause'
			longName = 'BSD 3-Clause "New" or "Revised" License'
			url = 'https://opensource.org/licenses/BSD-3-Clause'
		}

		developer {
			id = 'clashsoft'
			name = 'Adrian Kunz'
			email = 'clashsoft@hotmail.com'
		}
	}
}

// *************** Shared Configuration ***************

wrapper.setDistributionType(Wrapper.DistributionType.ALL)

// --------------- Constants ---------------

ext {
	versionDir = 'v0.4x'
	javaFilters = [ '**/*.java' ]
	dyvilFilters = [ '**/*.dyv', '**/*.dyh', '**/*.dyvil', '**/*.dyvilh' ]
	genSrcFilters = [ '**/*.dgt', '**/*.dgs', '**/*.dgc', '**/*.dgh' ]
	binaryFilters = [ '**/*.dyo', '**/*.class' ]
	resourceFilters = [ '**/*.properties' ]

	libraryBootstrapJarFile = rootProject.files('libs/dyvil-library.jar')
}

subprojects {
	// --------------- Source Copying ---------------

	def outputPath = "$buildDir/src/main/java/"
	compileJava.source = files(outputPath).builtBy 'copyJava'

	tasks.register('copyJava', Sync) {
		group 'sources'

		from sourceSets.main.java
		into outputPath

		include rootProject.javaFilters
		includeEmptyDirs = false
	}
}

allprojects {
	// --------------- Dependencies ---------------

	repositories {
		mavenCentral()
	}

	// --------------- Java Compilation ---------------

	idea.module.inheritOutputDirs = true

	tasks.withType(JavaCompile) {
		options.compilerArgs.addAll(
				'-parameters',          // generates parameter attributes and names
				'-XDignore.symbol.file' // disables "proprietary API" warnings
		)
		options.fork = true
	}

	// --------------- Jar ---------------

	tasks.withType(Jar) {
		preserveFileTimestamps = false

		from(rootProject.file('.')) {
			include '*LICENSE*.txt'
		}
	}

	// --------------- Dyvil Compilation ---------------

	ext {
		setupGenSrc = { args, exec -> setupGenSrc(args, exec) }
		setupCompiler = { args, exec -> setupCompiler(args, exec) }
	}
}

private void setupCompiler(Map args, JavaExec exec, List<String> fileFilters) {
	String[] source_dirs = args['source_dirs']
	String[] libraries = args['libraries']
	String output_dir = args['output_dir']
	String main_type = args['main_type']
	String[] include_patterns = args['include_patterns']
	String[] exclude_patterns = args['exclude_patterns']

	exec.main = project(':compiler').mainClassName
	exec.classpath = files('libs/dyvil-library.jar', 'libs/dyvil-compiler.jar')

	if (source_dirs) {
		exec.args "source_dirs=${ source_dirs.join(':') }"

		for (String src : source_dirs) {
			exec.inputs.files fileTree(src) {
				include fileFilters
			}
		}
	}

	if (include_patterns) {
		exec.args "include_patterns=${ include_patterns.join(':') }"
	}

	if (exclude_patterns) {
		exec.args "exclude_patterns=${ exclude_patterns.join(':') }"
	}

	if (libraries) {
		exec.args "libraries=${ libraries.join(':') }"

		for (String library : libraries) {
			exec.inputs.files fileTree(library)
		}
	}

	if (output_dir) {
		exec.args "output_dir=$output_dir"

		exec.outputs.dir output_dir
	}

	if (main_type) {
		exec.args "main_type=$main_type"

		exec.args 'test'
	}

	exec.args 'compile', '--ansi', '--machine-markers'
}

private void setupCompiler(Map args, JavaExec exec) {
	setupCompiler(args, exec, project.dyvilFilters)
}

private void setupGenSrc(Map args, JavaExec exec) {
	setupCompiler(args, exec, project.genSrcFilters)

	String gensrc_dir = args['gensrc_dir']

	exec.main = project(':gensrc').mainClassName
	exec.classpath = project.files('libs/dyvil-library.jar', 'libs/dyvil-compiler.jar', 'libs/dyvil-gensrc.jar')

	if (gensrc_dir) {
		exec.args "gensrc_dir=$gensrc_dir"
		exec.args 'test'
	}

	// Outputs and Inputs
	exec.outputs.dir gensrc_dir
}

// *************** Tests ***************

// --------------- Source Sets ---------------

sourceSets {
	test {
		java {
			srcDir 'src/test'
		}
	}
}

// --------------- Dependencies ---------------

def compilerOutput = files("$buildDir/classes/dyvil/test/") {
	builtBy 'compileTestDyvil'
}

dependencies {
	compile subprojects

	// --------------- Test ---------------

	// https://mvnrepository.com/artifact/junit/junit
	testCompile group: 'junit', name: 'junit', version: '4.12'

	testCompile project(':library')
	testCompile project(':dpf')
	testRuntime compilerOutput
	testCompileOnly rootProject.libraryBootstrapJarFile
}

test.testClassesDirs = sourceSets.test.runtimeClasspath

check.dependsOn 'testDyvil', 'testGenSrc'

// --------------- Dyvil Compilation ---------------

tasks.register('compileTestDyvil', JavaExec) {
	group 'build'
	dependsOn 'testClasses'

	setupCompiler(it,
			source_dirs: [ 'src/test/' ],
			libraries: sourceSets.test.compileClasspath.toList(),
			output_dir: "$buildDir/classes/dyvil/test/",
			exclude_patterns: [ 'dyvil/experimental/**' ],
	)

	// override classpath to use the new compiler instead of bootstrap
	classpath = project(':compiler').sourceSets.main.runtimeClasspath
}

// --------------- Test Tasks ---------------

tasks.register('testDyvil', JavaExec) {
	group 'verification'
	dependsOn 'compileTestDyvil'

	main = 'dyvil.test.Main'
	classpath = sourceSets.test.runtimeClasspath
}

tasks.register('testGenSrc', JavaExec) {
	group 'verification'
	dependsOn ':gensrc:classes'

	setupGenSrc(it,
			source_dirs: [ 'src/test/' ],
			output_dir: "$buildDir/classes/test-gen/",
			gensrc_dir: "$buildDir/gensrc/test/",
			// the line is here to ensure the compiler finds all Dyvil classes
			// (somehow its classpath-based library resolution is insufficient)
			libraries: [ "$buildDir/classes/dyvil/library/" ]
	)

	// override classpath to use the new classes instead of bootstrap
	classpath = project(':gensrc').sourceSets.main.runtimeClasspath
}

tasks.register('runRepl', JavaExec) {
	group 'run'
	dependsOn 'compileTestDyvil'

	setupCompiler(it,
			libraries: sourceSets.test.compileClasspath.toList()
	)

	standardOutput = System.out
	standardInput = System.in

	main = project(':repl').mainClassName
	classpath = sourceSets.test.runtimeClasspath + project(':repl').sourceSets.main.runtimeClasspath
}

// *************** Shared Jar ***************

subprojects {
	rootProject.jar.dependsOn ":$it.name:jar"
	rootProject.javadoc.dependsOn ":$it.name:javadoc"
	rootProject.javadoc.source it.javadoc.source
}

jar.doFirst {
	manifest.attributes("Main-Class": project(':repl').mainClassName)

	// include dependencies (transitive)
	from(configurations.runtime.collect { it.directory ? it : zipTree(it) })
}

afterEvaluate {
	subprojects {
		rootProject.sourcesJar.dependsOn ":$it.name:sourcesJar"

		afterEvaluate {
			rootProject.sourcesJar.from it.sourcesJar.inputs.sourceFiles
		}
	}
}

// *************** Versioning ***************

tasks.register('prepareRelease', Copy) {
	outputs.upToDateWhen { false }

	from 'versions/'
	into "versions/$rootProject.versionDir"
	include 'template.dyp'
	rename 'template\\.dyp', "v${ rootProject.version }.dyp"

	filter(ReplaceTokens, beginToken: '$$', endToken: '$$', tokens: [
			version        : rootProject.version,
			libraryVersion : project(':library').version,
			compilerVersion: project(':compiler').version,
			replVersion    : project(':repl').version,
			dpfVersion     : project(':dpf').version,
			genSrcVersion  : project(':gensrc').version
	])

	doLast {
		println "Release v$rootProject.version"
		println ""
		println "Library v" + project(':library').version
		println "Compiler v" + project(':compiler').version
		println "REPL v" + project(':repl').version
		println "Dyvil Property Format v" + project(':dpf').version
		println "GenSrc v" + project(':gensrc').version
	}
}
