// ---------------------------------------- Plugins ----------------------------------------

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

// ---------------------------------------- Main Settings ----------------------------------------

group = 'dyvil-team'

version = '0.11.0'

String libraryVersion = '0.11.0'
String compilerVersion = '0.11.0'
String replVersion = '0.6.1'
String dpfVersion = '0.3.0'

boolean nightly = false

String replMainClass = 'dyvil.tools.repl.DyvilREPL'
String compilerMainClass = 'dyvil.tools.compiler.DyvilCompiler'

List<String> dyvilFilters = [ '**/*.dyv', '**/*.dyh', '**/*.dyvil', '**/*.dyvilh' ]
List<String> javaFilters = [ '**/*.java' ]
List<String> resourceFilters = [ '**/*.dyo', '**/*.class', '**/*.properties' ]

// ---------------------------------------- Nightly Versioning ----------------------------------------

Map<String, String> env = System.getenv()
String droneBuild = env['DRONE_BUILD_NUMBER']

if (droneBuild)
{
	String snapshot = "+nightly." + droneBuild

	version += snapshot
	libraryVersion += snapshot
	compilerVersion += snapshot
	replVersion += snapshot
	dpfVersion += snapshot

	nightly = true
}

// ---------------------------------------- Source Settings ----------------------------------------

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	library {
		java {
			srcDir 'src/library'
			srcDir 'src/asm'
			srcDir 'src/parsing'
		}
	}

	dpf {
		java {
			srcDir 'src/dpf'

			compileClasspath += library.output
			runtimeClasspath += library.output
		}
	}

	compiler {
		java {
			srcDir 'src/compiler'

			compileClasspath += library.output
			runtimeClasspath += library.output + compiler.resources
		}
		resources {
			srcDir 'src/resources'

			include resourceFilters
		}
		return
	}

	repl {
		java {
			srcDir 'src/repl'

			compileClasspath += library.output + compiler.output
			runtimeClasspath += library.output + compiler.output + compiler.resources
		}
	}

	test {
		java {
			srcDir 'src/test'
		}
	}
}

processResources {
	include resourceFilters
}

// ---------------------------------------- Dependencies ----------------------------------------

repositories {
	mavenCentral()
}

dependencies {
	// Runtime Dependencies (Resources)

	runtime files("$buildDir/dyvilbin") {
		builtBy 'compileLibraryDyvil'
	}

	runtime files("src/resources")

	// Test Dependencies
	testCompile 'junit:junit:4.12'

	testCompile sourceSets.library.output
	testCompile sourceSets.compiler.output
	testCompile sourceSets.repl.output
	testCompile sourceSets.dpf.output
}

// ---------------------------------------- Copy Tasks ----------------------------------------

task clearCopyDir(type: Delete) {
	delete fileTree("${ buildDir }/src/")
}

// Library

task copyLibraryJava(type: Copy, dependsOn: clearCopyDir) {
	from sourceSets.library.java
	into "${ buildDir }/src/java/library"
	
	include javaFilters
}

compileLibraryJava.dependsOn(copyLibraryJava)
compileLibraryJava.source = "${ buildDir }/src/java/library"

task copyLibraryDyvil(type: Copy, dependsOn: clearCopyDir) {
	from 'src/library'
	into "${ buildDir }/src/dyvil/library"
	
	includeEmptyDirs = false
	
	include dyvilFilters
}

// Compiler

task copyCompilerJava(type: Copy, dependsOn: clearCopyDir) {
	from sourceSets.compiler.java
	into "${ buildDir }/src/java/compiler"
	
	include javaFilters
	
	filter {
		it.replace('$$version$$', version)
				.replace('$$libraryVersion$$', libraryVersion)
				.replace('$$compilerVersion$$', compilerVersion)
	}
}

compileCompilerJava.dependsOn(copyCompilerJava)
compileCompilerJava.source = "${ buildDir }/src/java/compiler"

// REPL

task copyReplJava(type: Copy, dependsOn: clearCopyDir) {
	from sourceSets.repl.java
	into "${ buildDir }/src/java/repl"
	
	include javaFilters
	
	filter {
		it.replace('$$replVersion$$', replVersion)
	}
}

compileReplJava.dependsOn(copyReplJava)
compileReplJava.source = "${ buildDir }/src/java/repl"

// DPF

task copyDpfJava(type: Copy, dependsOn: clearCopyDir) {
	from sourceSets.dpf.java
	into "${ buildDir }/src/java/dpf"
	
	include javaFilters
}

compileDpfJava.dependsOn(copyDpfJava)
compileDpfJava.source = "${ buildDir }/src/java/dpf"

// ---------------------------------------- Compilation Tasks ----------------------------------------

/**
 * Compiles the Dyvil Classes and Headers in the Dyvil Library by running the freshly-compiled compiler
 */
task compileLibraryDyvil(type: JavaExec, dependsOn: [ 'compilerClasses', 'copyLibraryDyvil' ]) {
	// Required to make UP-TO-DATE work
	outputs.upToDateSpec = new AndSpec()

	String src = "build/src/dyvil/library"
	String bin = "build/dyvilbin"

	// All Dyvil Class and Header files
	inputs.dir src
	// All possible Output Files (.class, .dyo)
	outputs.dir bin
	
	main = 'dyvil.tools.compiler.DyvilCompiler'
	classpath = sourceSets.compiler.runtimeClasspath
	args = [ "source_dir=${ src }", "output_dir=${ bin }", 'compile' ]
}

// ---------------------------------------- Build Tasks ----------------------------------------

/**
 * Creates a Jar file that contains all library classes (from src/library), including ASM
 */
task buildLibrary(type: Jar, dependsOn: [ 'classes', 'compileLibraryDyvil' ]) {
	from sourceSets.main.resources
	from sourceSets.library.output

	from("$buildDir/dyvilbin") {
		include resourceFilters
	}
	
	archiveName = "dyvil-library-${ libraryVersion }.jar"
}

task buildDPF(type: Jar, dependsOn: 'buildLibrary') {
	from sourceSets.dpf.output
	
	archiveName = "dyvil-property-format-${ dpfVersion }.jar"
}

/**
 * Creates a Jar file that contains all compiler classes (from src/compiler)
 */
task buildCompiler(type: Jar, dependsOn: 'compilerClasses') {
	from sourceSets.compiler.output
	from sourceSets.compiler.resources
	
	archiveName = "dyvil-compiler-${ compilerVersion }.jar"
	
	manifest.attributes.put("Main-Class", compilerMainClass)
}

/**
 * Creates a Jar file that contains all REPL classes (from src/repl)
 */
task buildREPL(type: Jar, dependsOn: 'replClasses') {
	from sourceSets.repl.output
	
	archiveName = "dyvil-repl-${ replVersion }.jar"
	
	manifest.attributes.put("Main-Class", replMainClass)
}

/**
 * Creates a Jar file that combines all classes from library, compiler and REPL.
 */
task buildAll(type: Jar, dependsOn: [ 'libraryClasses', 'compileLibraryDyvil', 'compilerClasses', 'replClasses',
                                      'dpfClasses' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources
	from sourceSets.compiler.output
	from sourceSets.compiler.resources
	from sourceSets.repl.output
	from sourceSets.dpf.output

	from("$buildDir/dyvilbin") {
		include resourceFilters
	}

	archiveName = "dyvil-${ version }.jar"
	
	manifest.attributes.put("Main-Class", replMainClass)
}

build.setDependsOn([ 'buildAll', 'buildLibrary', 'buildCompiler', 'buildREPL', 'buildDPF' ])

// ---------------------------------------- Version Files ----------------------------------------

task prepareRelease(type: Copy) {
	outputs.upToDateWhen { return false }

	from 'versions/'
	
	if (nightly)
	{
		into 'versions'
		include 'nightly-template.dyp'
		rename 'nightly\\-template\\.dyp', 'nightly.dyp'
	}
	else
	{
		into 'versions/pre'
		include 'template.dyp'
		rename 'template\\.dyp', "v${ version }.dyp"
	}
	
	filter {
		it.replace('$$version$$', version)
				.replace('$$libraryVersion$$', libraryVersion)
				.replace('$$compilerVersion$$', compilerVersion)
				.replace('$$replVersion$$', replVersion)
				.replace('$$dpfVersion$$', dpfVersion)
	}
}

if (nightly)
{
	build.dependsOn prepareRelease
}

// ---------------------------------------- Misc. Tasks ----------------------------------------

/**
 * Creates the Gradle Wrapper (gradlew)
 */
task wrapper(type: Wrapper) {
	gradleVersion = '2.7'
}

/**
 * Re-create the build/dyvilbin directory after cleaning to avoid Eclipse Build Path errors
 */
clean.doLast {
	file('build/dyvilbin').mkdirs()
}

/**
 * Removes temporary folders from the build dir, leaving only the 'build/libs' folder.
 */
task cleanTemps(type: Delete) {
	delete file("${ buildDir }/src/")
	delete file("${ buildDir }/classes/")
	delete file("${ buildDir }/dependency-cache/")
	delete file("${ buildDir }/tmp/")
	delete file("${ buildDir }/resources/")
	delete fileTree("$buildDir/dyvilbin")
}
