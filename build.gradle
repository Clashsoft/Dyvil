apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'

sourceSets {
	library {
		java {
			srcDir 'src/library'
			srcDir 'src/asm'
		}
		resources {
			srcDir 'build/dyvilbin'
		}
	}
	compiler {
		java {
			srcDir 'src/compiler'
			compileClasspath += library.output
			runtimeClasspath += library.output + compiler.resources
		}
		resources {
			srcDir 'src/resources'
		}
	}
	repl {
		java {
			compileClasspath += library.output + compiler.output
			runtimeClasspath += compiler.runtimeClasspath
			srcDir 'src/repl'
		}
	}
}

processResources {
	from('dbin') {
		// Explicity include Compiled Dyvil Headers (.dyo)
		include '**/*.dyo'
	}
}

group = 'dyvil-team'

version = '0.6.0'

String libraryVersion = '0.5.0'
String compilerVersion = '0.6.0'
String replVersion = '0.3.0'

String replMainClass = 'dyvil.tools.repl.DyvilREPL'

def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".SNAPSHOT-" + ENV.DRONE_BUILD_NUMBER
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

/**
 * Creates the Gradle Wrapper (gradlew)
 */
task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

/**
 * Re-create the build/dyvilbin directory after cleaning to avoid Eclipse Build Path errors
 */
task clean(overwrite: true) << {
	file('build/dyvilbin').mkdirs()
}

/**
 * Compiles the Dyvil Classes and Headers in the Dyvil Library by running the freshly-compiled compiler
 */
task compileDyvilLibrary(type: JavaExec, dependsOn: 'compilerClasses') {
	println 'Compiling Dyvil Runtime Library...'
	
	// Required to make UP-TO-DATE work
	outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
	
	// All Dyvil Class and Header files
	inputs.dir 'src/library'
	// All possible Output Files (.class, .dyo)
	outputs.dir 'build/dyvilbin/'
	
	main = 'dyvil.tools.compiler.DyvilCompiler'
	classpath += sourceSets.compiler.output + sourceSets.library.output + sourceSets.compiler.resources
	args = [ '@lib.txt', 'compile' ]
}

/**
 * Creates a Jar file that contains all library classes (from src/library), including ASM
 */
task buildLibrary(type: Jar, dependsOn: [ 'classes', 'compileDyvilLibrary' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources
	
	archiveName = "dyvil-library-${libraryVersion}.jar"
}

/**
 * Creates a Jar file that contains all compiler classes (from src/compiler)
 */
task buildCompiler(type: Jar, dependsOn: 'classes') {
	from sourceSets.compiler.output
	
	archiveName = "dyvil-compiler-${compilerVersion}.jar"
	
	manifest.attributes.put("Main-Class", "dyvil.tools.compiler.DyvilCompiler")
}

/**
 * Creates a Jar file that contains all REPL classes (from src/repl)
 */
task buildREPL(type: Jar, dependsOn: 'classes') {
	from sourceSets.repl.output
	
	archiveName = "dyvil-repl-${replVersion}.jar"
	
	manifest.attributes.put("Main-Class", replMainClass)
}

/**
 * Creates a Jar file that combines all classes from library, compiler and REPL.
 */
task build(type: Jar, overwrite: true) {
	from sourceSets.library.output
	from sourceSets.compiler.output
	from sourceSets.repl.output
	
	archiveName = "dyvil-${version}.jar"
	
	manifest.attributes.put("Main-Class", replMainClass)
}

task buildAll(dependsOn: [ 'build', 'buildLibrary', 'buildCompiler', 'buildREPL' ])
