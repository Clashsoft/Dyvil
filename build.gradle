// ---------------------------------------- Plugins ----------------------------------------

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'application'

import groovy.transform.Field

// ---------------------------------------- Main Settings ----------------------------------------

group = 'dyvil-team'

version = '0.28.0'

String libraryVersion = '0.28.0'
String compilerVersion = '0.28.0'
String replVersion = '0.17.2'
String dpfVersion = '0.9.0'
String genSrcVersion = '0.3.0'

String devStage = 'gamma'

boolean nightly = false

@Field static final String replMainClass = 'dyvil.tools.repl.Main'
@Field static final String compilerMainClass = 'dyvil.tools.compiler.Main'
@Field static final String genSrcMainClass = 'dyvil.tools.gensrc.Main'

@Field static final List<String> dyvilFilters = [ '**/*.dyv', '**/*.dyh', '**/*.dyvil', '**/*.dyvilh' ]
@Field static final List<String> javaFilters = [ '**/*.java' ]
@Field static final List<String> genSrcFilters = [ '**/*.dgt', '**/*.dgs' ]
@Field static final List<String> resourceFilters = [ '**/*.properties' ]
@Field static final List<String> binaryFilters = [ '**/*.dyo', '**/*.class' ]

// ---------------------------------------- Nightly Versioning ----------------------------------------

Map<String, String> env = System.getenv()
String droneBuild = env['DRONE_BUILD_NUMBER']
if (!droneBuild)
{
	droneBuild = env['TRAVIS_BUILD_NUMBER']
}

if (droneBuild)
{
	String snapshot = "+nightly." + droneBuild
	
	version += snapshot
	libraryVersion += snapshot
	compilerVersion += snapshot
	replVersion += snapshot
	dpfVersion += snapshot
	genSrcVersion += snapshot
	
	nightly = true
}

// ---------------------------------------- Source Settings ----------------------------------------

//noinspection GroovyAssignabilityCheck
sourceSets {
	library {
		java {
			srcDir 'src/library'
			srcDir 'src/asm'
			srcDir 'src/parsing'
			
			srcDir "$buildDir/gensrc/library"
		}
		
		resources {
			srcDir 'src/library'
			srcDir 'src/parsing'
			
			include resourceFilters
		}
	}
	
	dpf {
		java {
			srcDir 'src/dpf'
		}
		
		resources {
			srcDir 'src/dpf'
			include resourceFilters
		}
	}
	
	compiler {
		java {
			srcDir 'src/compiler'
		}
		
		resources {
			srcDir 'src/compiler'
			include resourceFilters
		}
	}
	
	repl {
		java {
			srcDir 'src/repl'
		}
		
		resources {
			srcDir 'src/repl'
			include resourceFilters
		}
	}
	
	gensrc {
		java {
			srcDir 'src/gensrc'
		}
		
		resources {
			srcDir 'src/gensrc'
			include resourceFilters
		}
	}
	
	test {
		java {
			srcDir 'src/test'
		}
	}
}

//noinspection GroovyAssignabilityCheck
processResources {
	include resourceFilters
}

// ---------------------------------------- Dependencies ----------------------------------------

repositories {
	mavenCentral()
}


dependencies {
	// Runtime Dependencies (Resources)
	
	def libRun = files("$buildDir/dyvil-classes/library")
	def dpfRun = files("$buildDir/dyvil-classes/dpf")
	def testRun = files("$buildDir/dyvil-classes/test")
	
	def bootstrap = files('libs/dyvil-bootstrap.jar')
	def libComp = sourceSets.library.output
	
	gensrcCompile bootstrap
	
	libraryRuntime libRun
	libraryCompile bootstrap
	
	// compiler -> library
	compilerCompile libComp
	compilerRuntime libRun
	compilerCompile bootstrap
	
	// dpf -> library
	dpfCompile libComp
	dpfRuntime libRun, dpfRun
	dpfCompile bootstrap
	
	// repl -> library, compiler
	replCompile libComp, sourceSets.compiler.output
	replRuntime libRun, dpfRun, testRun
	replCompile bootstrap
	
	// test -> library, junit
	testCompile libComp, 'junit:junit:4.12'
	testRuntime libRun, dpfRun, testRun
	testCompile bootstrap
}
// ---------------------------------------- Copy Tasks ----------------------------------------

// Library

task copyLibraryJava(type: Sync, dependsOn: 'genLibrary') {
	from sourceSets.library.java
	into "$buildDir/src/java/library"
	
	include javaFilters
	includeEmptyDirs = false
}

compileLibraryJava.dependsOn copyLibraryJava
compileLibraryJava.source = "$buildDir/src/java/library"


task copyLibraryDyvil(type: Sync) {
	from 'src/library'
	into "$buildDir/src/dyvil/library"
	
	include dyvilFilters
	includeEmptyDirs = false
}

// Compiler

task copyCompilerJava(type: Sync) {
	from sourceSets.compiler.java
	into "$buildDir/src/java/compiler"
	
	include javaFilters
	includeEmptyDirs = false
	
	filter {
		it.replace('$$version$$', version)
				.replace('$$libraryVersion$$', libraryVersion)
				.replace('$$compilerVersion$$', compilerVersion)
	}
}

compileCompilerJava.dependsOn copyCompilerJava
compileCompilerJava.source = "$buildDir/src/java/compiler"

// REPL

task copyReplJava(type: Sync) {
	from sourceSets.repl.java
	into "$buildDir/src/java/repl"
	
	include javaFilters
	includeEmptyDirs = false
	
	filter {
		it.replace('$$replVersion$$', replVersion)
	}
}

compileReplJava.dependsOn copyReplJava
compileReplJava.source = "$buildDir/src/java/repl"

// DPF

task copyDPFDyvil(type: Sync) {
	from 'src/dpf'
	into "$buildDir/src/dyvil/dpf"
	
	includeEmptyDirs = false
	include dyvilFilters
}

// Tests

task copyTestDyvil(type: Sync) {
	from 'src/test'
	into "$buildDir/src/dyvil/test"
	
	includeEmptyDirs = false
	include dyvilFilters
}

// ---------------------------------------- Compilation Tasks ----------------------------------------

tasks.withType(JavaCompile) {
	it.options.compilerArgs.addAll(
			'-parameters',          // generates parameter attributes and names
			'-XDignore.symbol.file' // disables "proprietary API" warnings
	)
	it.options.fork = true
}

task genLibrary(type: JavaExec, dependsOn: [ 'gensrcClasses' ]) { JavaExec exec ->
	runGenSrc exec, 'src/library/', "$buildDir/gensrc/library/"
}

/**
 * Compiles the Dyvil Classes and Headers in the Dyvil Library by running the freshly-compiled compiler
 */
task compileLibraryDyvil(type: JavaExec, dependsOn: [ 'compilerClasses', 'copyLibraryDyvil' ]) { JavaExec exec ->
	runCompiler exec, 'config/lib.dyc', 'src/library/', "$buildDir/dyvil-classes/library"
}

task compileDPFDyvil(type: JavaExec, dependsOn: [ 'compileLibraryDyvil', 'copyDPFDyvil' ]) { JavaExec exec ->
	runCompiler exec, 'config/dpf.dyc', 'src/dpf/', "$buildDir/dyvil-classes/dpf"
}

task compileTestDyvil(type: JavaExec, dependsOn: [ 'compileDPFDyvil', 'copyTestDyvil' ]) { JavaExec exec ->
	runCompiler exec, 'config/test.dyc', 'src/test/', "$buildDir/dyvil-classes/test"
}

private void runCompiler(JavaExec exec, String config, String src, String bin)
{
	// Required to make UP-TO-DATE work
	
	// All Dyvil Class and Header files
	exec.inputs.file fileTree(src) {
		include dyvilFilters
	}
	
	// All possible Output Files (.class, .dyo)
	exec.outputs.dir bin
	
	exec.main = compilerMainClass
	exec.classpath = sourceSets.compiler.runtimeClasspath
	exec.args = [ "@$config", 'compile', '--ansi' ]
}

private void runGenSrc(JavaExec exec, String src, String dest)
{
	exec.inputs.file fileTree(src) {
		include genSrcFilters
	}
	
	exec.outputs.dir dest
	
	exec.main = genSrcMainClass
	exec.classpath = sourceSets.gensrc.runtimeClasspath
	exec.args = [ "source=$src", "target=$dest" ]
}

// ---------------------------------------- Test Tasks ----------------------------------------

task testDyvil(type: JavaExec, dependsOn: [ 'compileTestDyvil' ]) {
	main = 'dyvil.test.Main'
	classpath = sourceSets.test.runtimeClasspath
}

test.dependsOn 'testDyvil'

// ---------------------------------------- Build Tasks ----------------------------------------

/**
 * Creates a Jar file that contains all library classes generated from Dyvil source code and saves it in libs/
 */
task bootstrap(type: Copy, dependsOn: [ 'buildLibrary' ]) {
	from("$buildDir/libs") {
		include 'dyvil-library-*.jar'
	}
	
	into 'libs'
	
	rename ".*", "dyvil-bootstrap.jar"
}

/**
 * Creates a Jar file that contains all library classes (from src/library), including ASM
 */
task buildLibrary(type: Jar, dependsOn: [ 'libraryClasses', 'compileLibraryDyvil' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources
	
	from("$buildDir/dyvil-classes/library") {
		include binaryFilters
	}
	
	archiveName = "dyvil-library-${ libraryVersion }.jar"
}

task buildDPF(type: Jar, dependsOn: [ 'dpfClasses', 'compileDPFDyvil' ]) {
	from sourceSets.dpf.output
	
	from("$buildDir/dyvil-classes/dpf") {
		include binaryFilters
	}
	
	archiveName = "dyvil-property-format-${ dpfVersion }.jar"
}

/**
 * Creates a Jar file that contains all compiler classes (from src/compiler)
 */
task buildCompiler(type: Jar, dependsOn: 'compilerClasses') {
	from sourceSets.compiler.output
	from sourceSets.compiler.resources
	
	archiveName = "dyvil-compiler-${ compilerVersion }.jar"
	
	manifest.attributes.put("Main-Class", compilerMainClass)
}

/**
 * Creates a Jar file that contains all REPL classes (from src/repl)
 */
task buildREPL(type: Jar, dependsOn: 'replClasses') {
	from sourceSets.repl.output
	from sourceSets.repl.resources
	
	archiveName = "dyvil-repl-${ replVersion }.jar"
	
	manifest.attributes.put("Main-Class", replMainClass)
}

task buildGenSrc(type: Jar, dependsOn: 'gensrcClasses') {
	from sourceSets.gensrc.output
	from sourceSets.gensrc.resources
	
	archiveName = "dyvil-gensrc-${ genSrcVersion }.jar"
	
	manifest.attributes.put("Main-Class", genSrcMainClass)
}

/**
 * Creates a Jar file that combines all classes from library, compiler and REPL.
 */
task buildAll(type: Jar, dependsOn: [ 'libraryClasses', 'compileLibraryDyvil', 'compilerClasses', 'replClasses',
                                      'dpfClasses', 'gensrcClasses' ]) {
	from sourceSets.library.output
	from sourceSets.library.resources
	from sourceSets.compiler.output
	from sourceSets.compiler.resources
	from sourceSets.repl.output
	from sourceSets.repl.resources
	from sourceSets.dpf.output
	from sourceSets.gensrc.output
	from sourceSets.gensrc.resources
	
	from("$buildDir/dyvil-classes/library") {
		include binaryFilters
	}
	from("$buildDir/dyvil-classes/dpf") {
		include binaryFilters
	}
	
	archiveName = "dyvil-${ version }.jar"
	
	manifest.attributes.put("Main-Class", replMainClass)
}

build.setDependsOn([ 'buildAll', 'buildLibrary', 'buildCompiler', 'buildREPL', 'buildDPF', 'buildGenSrc' ])

tasks.withType(Jar).forEach {
	it.from('.') {
		include '*LICENSE*.txt'
	}
}

// ---------------------------------------- Version Files ----------------------------------------

task prepareRelease(type: Copy) {
	outputs.upToDateWhen { return false }
	
	from 'versions/'
	
	if (nightly)
	{
		into 'versions'
		include 'nightly-template.dyp'
		rename 'nightly\\-template\\.dyp', 'nightly.dyp'
	}
	else
	{
		into "versions/$devStage"
		include 'template.dyp'
		rename 'template\\.dyp', "v${ version }.dyp"
	}
	
	filter {
		it.replace('$$version$$', version)
				.replace('$$libraryVersion$$', libraryVersion)
				.replace('$$compilerVersion$$', compilerVersion)
				.replace('$$replVersion$$', replVersion)
				.replace('$$dpfVersion$$', dpfVersion)
	}
	
	doLast {
		println "Release v$version"
		println ""
		println "Dyvil Library v$libraryVersion"
		println "Dyvil Compiler v$compilerVersion"
		println "Dyvil REPL v$replVersion"
		println "Dyvil Property Format v$dpfVersion"
		println "Dyvil GenSrc v$genSrcVersion"
	}
}

if (nightly)
{
	build.dependsOn 'prepareRelease'
}

// ---------------------------------------- Cleanup Tasks ----------------------------------------

task cleanDyvil(type: Delete, group: 'cleanup') {
	// Delete contents, but not the directories itself
	delete fileTree("$buildDir/dyvil-classes")
	delete fileTree("$buildDir/gensrc")
}

clean {
	group = 'cleanup'
	dependsOn 'cleanDyvil'
	
	delete = buildDir.listFiles().findAll({
		def path = it.getPath()
		!path.endsWith('dyvil-classes') && !path.endsWith('libs')
	}).toSet()
}
