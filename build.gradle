import java.util.regex.Matcher

// --------------- Plugins ---------------

plugins {
	id 'org.dyvil.dyvil-gradle' version '0.4.0' apply false
	id 'com.jfrog.bintray' version '1.8.4' apply false
	id 'de.clashsoft.simple-publish' version '0.3.0' apply false
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'maven-publish'
	apply plugin: 'com.jfrog.bintray'
	apply plugin: 'de.clashsoft.simple-publish'
}

// --------------- Info ---------------

version = getTagVersion()
description = 'The Dyvil programming language.'
publishInfo.labels = [ 'dyvil', 'programming-language', 'jvm' ]

allprojects {
	group = 'org.dyvil'

	publishInfo {
		organization = 'dyvil'
		websiteUrl = 'https://github.com/Dyvil/Dyvil'
		issueTrackerUrl = 'https://github.com/Dyvil/Dyvil/issues'
		vcsUrl = 'https://github.com/Dyvil/Dyvil'
		githubRepo = 'Dyvil/Dyvil'

		license {
			shortName = 'BSD 3-Clause'
			longName = 'BSD 3-Clause "New" or "Revised" License'
			url = 'https://opensource.org/licenses/BSD-3-Clause'
		}

		developer {
			id = 'clashsoft'
			name = 'Adrian Kunz'
			email = 'clashsoft@hotmail.com'
		}
	}
}

// *************** Shared Configuration ***************

wrapper.setDistributionType(Wrapper.DistributionType.ALL)

// --------------- Constants ---------------

ext {
	libraryDependency = 'org.dyvil:library:0.46.1'
	compilerDependency = 'org.dyvil:compiler:0.46.5'
	gensrcDependency = 'org.dyvil:gensrc:0.10.2'

	versionDir = 'v0.4x'
	javaFilters = [ '**/*.java' ]
	dyvilFilters = [ '**/*.dyv', '**/*.dyh', '**/*.dyvil', '**/*.dyvilh' ]
	genSrcFilters = [ '**/*.dgt', '**/*.dgs', '**/*.dgc', '**/*.dgh' ]
	binaryFilters = [ '**/*.dyo', '**/*.class' ]
	resourceFilters = [ '**/*.properties' ]

	getTagVersion = this.&getTagVersion
}

private static String getTagVersion(String module = '') {
	if (!module.isEmpty() && !module.endsWith("/")) {
		module += '/'
	}

	final Matcher matcher = 'git tag --sort=-version:refname'.execute().text =~ module + 'v(.*)'
	matcher.find()

	final String newestTag = matcher.group(0)
	final String newestVersion = matcher.group(1)
	if (System.getenv("DYVIL_RELEASE")) {
		return newestVersion
	}

	final String commitCount = "git rev-list $newestTag.. --count".execute().text.trim()
	if (commitCount == "0") {
		return newestVersion
	}
	final String commitID = 'git rev-parse --short HEAD'.execute().text.trim()
	return newestVersion + '-' + commitCount + '-' + commitID
}

apply from: 'gradle/dependencies.gradle'
apply from: 'gradle/javaCompile.gradle'
apply from: 'gradle/dyvilCompile.gradle'
apply from: 'gradle/test.gradle'

jar.doFirst {
	manifest.attributes("Main-Class": project(':repl').mainClassName)
}
