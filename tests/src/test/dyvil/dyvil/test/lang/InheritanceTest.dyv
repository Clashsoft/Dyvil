package dyvil.test.lang

using dyvil.test.JUnit

class InheritanceTest {
	// --------------- Double-Layer Trait Initialization ---------------

	trait IFoo {
		func onFooInit() -> void

		init {
			this.onFooInit()
		}
	}

	static class Foo1 implements IFoo {
		public var fooInit: boolean

		override func onFooInit() -> void = this.fooInit = true
	}

	@Test
	func traitInit() -> void {
		let foo1 = new Foo1
		foo1.fooInit =?= true
	}

	static class Foo2 extends Foo1 implements IFoo {
		public var foo2Init: int

		func fooInitAvailable() -> boolean = this.fooInit

		override func onFooInit() -> void = this.foo2Init += 1
	}

	@Test
	func doubleTraitInit() -> void {
		let foo2 = new Foo2
		foo2.foo2Init =?= 1
	}

	// --------------- Trait Initialization Order ---------------

	static var initOrder: String = ""

	// example adapted from https://stackoverflow.com/a/34243727/
	// note that here, A implements T, which changes the init order slightly.

	static trait H                           { init { initOrder += 'H' } }
	static trait R                           { init { initOrder += 'R' } }
	static trait S extends H                 { init { initOrder += 'S' } }
	static trait T extends R, H              { init { initOrder += 'T' } }

	static class X                           { init { initOrder += 'X' } }
	static class A extends X implements T    { init { initOrder += 'A' } }
	static class B extends A implements T, S { init { initOrder += 'B' } }

	@Test
	func traitInitOrder() -> void {
		let b = new B
		initOrder =?= "XRHTASB"
	}

	// --------------- Trait Constructor ---------------

	trait Named {
		var name: String {
			abstract get
			abstract set

			init {
				this.name = "" // calls the setter
			}
		}
	}

	static class Person(
		private var name: String { public override get; public override set }
	) implements Named

	@Test
	func traitConstructor() -> void {
		let person: Named = new Person("Test Subject")
		person.name =?= "Test Subject"
	}
}
