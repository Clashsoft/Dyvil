package dyvil.test.lang

using dyvil.test.JUnit

class OptionalTest {
	static let optString = Optional("abc")

	@Test func optionalChains() -> void {
		let optUppercase = optString?.toUpperCase
		// = optString == null ? null : optString!!.toUpperCase

		optUppercase =?= "ABC"
	}

	@Test func nullCoalescing() -> void {
		// with optional LHS
		let string = optString ?? "def" // = "abc"
		string.staticType.toString =?= "java.lang.String"

		// with subscript
		let optUppercaseFirst = optString?.toUpperCase? [0] ?? 0
		optUppercaseFirst =?= 65

		// with LHS that is not an optional chain
		let a = (null as String?) ?? "a"
		a =?= "a"

		// with Primitives (see bug #357)
		let optTuple = Optional((1, 2))
		let optFirst = optTuple?._1
		optFirst =?= 1

		let optSecond = optTuple?._2 ?? 0
		optSecond =?= 2
	}

	@Test func optionalBinding() -> void {
		let opt = Optional "ABC"

		if let abc = opt { } else { fail }
		if let abc = opt, !abc.isEmpty { } else { fail }
		if let abc = opt, let a = abc.substring(0, 1) { a =?= "A" } else { fail }

		let s = Optional "a"
		if let s = s { s.staticType.toString =?= "java.lang.String" } else { fail }
	}
}
