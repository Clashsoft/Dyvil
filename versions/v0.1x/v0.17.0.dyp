version = "0.17.0"
library.version = "0.17.0"
compiler.version = "0.17.0"
repl.version = "0.11.0"
dpf.version = "0.4.1"

changelog = """
# Dyvil v0.17.0

- Added a Colon Operator as syntactic sugar for Tuples. #194
- Added a Syntax Warning for Initializer Calls using the `new` keyword.
- Added a Syntax Warning for Constructor Declarations using the `new` keyword.
- References Types and -Operators now use `*` again, as opposed to the `&` symbol.
- Removed the Dyvil-specific Primitive Wrapper classes and redirected them to the standard Java wrappers.

## Dyvil Library v0.17.0

- `Map.toString` now uses `: ` as the key-value separator instead of `->`.
- Added the `dyvil.lang.Primitives` class to host all primitive operators.
- Added primitive Range classes for `int`, `long`, `float` and `double`.
- Added the `dyvil.collection.immutable.BitSet` class.
- Added the `@ColonConvertible` annotation for user-defined interaction with the Colon Operator.
- Added Type Aliases for Mutable and Immutable Arrays, Lists and Maps in the `dyvil.Lang` header.
- Added the `dyvil.util.DateExtensions` class for a Date DSL.
- Added the `StringExtensions.char(char)` method for character literals and an overload taking a `String` to provide a warning.
- Added the `@DyvilType` annotation.
- Added the `Map.remap(Object, K)` method.
- Added default implementations for the `Map.remap` method in `MutableMap` and `ImmutableMap`.
- Added a cache for faster index lookup in the `StringPoolWriter` class.
- Split the large Predef class into multiple smaller components.
- Made all `Map` interfaces and implementations `ColonConvertible`.
- Updated all library classes for the primitive changes (including Lambda Factory utility classes).
- Updated all Constructors in Dyvil files to use the `init` keyword instead of `new`.
- Updated the `Rangeable` interface to require `Comparable` instead of `Ordered`.
- Updated the `Range` implementations accordingly.
- Updated the `Collection.toString` and `Map.toString` implementations.
- Updated the `FileUtils` utility class to have throwing and non-throwing (`try*`) methods.
- Fixed the `AbstractTupleMap(Entryâ€¦)` constructor not setting the size correctly.
- Fixed the `DEPRECATED` modifier being an access modifier.
- Fixed `Deprecated`, `Experimental` and `UsageInfo` annotations not being present in compiled class files.
- Fixed the `MutableMap.remap(Object, K)` method adding `null` entries when the old key was not present.
- Deprecated the `$` prefix operator for character literals.
- Deprecated the `->` and `<-` operators in the `dyvil.lang.LanguageFeatures` class.
- Removed the primitive classes in the `dyvil.lang` package.
- Removed the `MatchError` constructors that take and wrap a primitive value.
- Cleaned up the `AbstractTupleMap` class.
- Cleaned up the `StringPoolWriter` and `StringPoolReader` classes.
- Cleanup & Formatting across the entire code base.
- Moved common base language extension class to the `dyvil.lang` package.
- Renamed the replacement tokens for use in Deprecated annotations to `{member.kind}` and `{member.name}`.

## Dyvil Compiler v0.17.0

- The Compiler is now usable as a `javax.tools.Tool`.
- Major structure changes and moved files in the `dyvil.tools.compiler.ast.type` package.
- The Compiler Config can now contain relative and absolute paths (the latter starting with a `/`).
- Generic Types now check if their argument types fulfill the Type Parameter contract in the CHECK_TYPES phase.
- Added support for Syntax Warning for deprecated language features.
- Added the `IClassConsumer` interface.
- Added the `TypeDelegate` class.
- Added the `ListType.toString` implementation.
- Added the `toString` method implementation for the `VoidValue` and `ArrayExpr` classes.
- Updated the compiler to link wrapper classes and primitive operators correctly.
- Updated the Common Super Type Algorithm in the `Types` class.
- Updated the `RangeOperator` and `RangeForStatement` to support the new primitive range classes.
- Updated and cleaned up the `ClassBodyParser`, `DyvilHeaderParser` and `DyvilUnitParser` classes.
- Updated Enclosing Class and Header resolution.
- Updated the way Parser errors are reported.
- Updated the `Library.load(File)` method to throw an exception instead of printing to stdout.
- Updated the Multi Import Parser to support (inferred) semicolons in addition to commas.
- Improved automatic type promotions for `int`, `long` and `float` literals.
- Improved the 'Incompatible Generic Type Argument' error message.
- Improved the `ClassDeclarationParser` and `DyvilHeaderParser` implementation.
- Improved the `AbstractMethod.getSignatureMatch(...)` implementation.
- Fixed Type Mismatches for Tuple Expressions not being reported correctly, leading to compiler errors upon bytecode generation.
- Fixed Range Operators generating invalid bytecode.
- Fixed Range For Statements generating invalid bytecode for primitive types.
- Fixed Constructors using the `new` keyword instead of `init` in the `toString` and formatting implementation.
- Fixed the Compiler exiting before the Test thread has finished in some cases.
- Fixed certain Type kinds being decompiled incorrectly from Object Files.
- Fixed most Type kinds not having a code position attribute.
- Fixed the `libraries` paths in the compiler config not being relative to the parent directory of the config file.
- Fixed the 'Invalid Operator Property' syntax error not showing the problematic token.
- Fixed the `operator.prefix.associativity` syntax error not being localized.
- Fixed Reference Types being linked incorrectly for Primitive Types.
- Fixed alphanumeric letters being part of a single identifier when succeeding a sequence of symbols preceded by a `$` or `_`.
- Fixed Throw Statements reporting type errors for unresolved expressions.
- Removed the `PartialFunctionExpr` class from the Compiler AST.
- Removed most globals from the `DyvilCompiler` class.
- Cleaned up the `CompilerConfig` class.
- Cleaned up the `ExpressionParser` class.
- Renamed the `SubscriptGetter` class to `SubscriptAccess`.
- Renamed the `SubscriptSetter` class to `SubscriptAssignment`.
- Renamed the `IParameterized` interface to `IParametric`.
- Renamed the `ITypeParameterized` interface to `ITypeParametric`.
- Renamed the `IClassMember.getTheClass()` and `.setTheClass(IClass)` methods to `getEnclosingClass` and `setEnclosingClass`.
- Renamed the `IClass.getOuterClass()` and `.setOuterClass(IClass)` methods to `getEnclosingClass` and `setEnclosingClass`.
- Renamed all `theClass` fields from `IClassMember` subtypes to `enclosingClass`.
- Removed the code for hardcoded `dyvilBinLibrary` in the `Library` class.
- Moved the `MapTypeContext` class to the `dyvil.tools.compiler.ast.generic` package.
- Moved the `classVersion` and `asmVersion` constants from the `DyvilCompiler` class to the `ClassFormat` class.

## Dyvil REPL v0.11.0

- The REPL now only recognizes commands as such if they consist of a colon followed by one or more letters.
- Commands now take the raw string after the command name instead of a space-separated array.
- The `:complete` command can now process and show completions for compound expressions and types (without evaluating them).
- The `:debug` command now uses an optional argument to enable or disable Debug Mode.
- The `:help` command can now show usage information about commands and aliases.
- Added the `:library` command for loading external libraries in the REPL.
- Added the `:rename` REPL command for renaming variables.
- Added the `dyvil.tools.repl.Main` class as the entry point for the REPL.
- Improved variable names for Reference Types.
- Fixed Constructors being unusable in the REPL. #195
- Fixed Member and Header Element parsing in the REPL.
- Fixed Constructors Calls being impossible in the REPL because Constructor Declaration errors are reported.
- Fixed Tuple and Function Types causing errors during variable name generation in the REPL.
- Fixed automatic variable name generation in the REPL causing errors for unresolved / package types.
- Removed the `:?` command shortcut.
- Removed the `output`, `errorOutput` and `inputManager` fields from the `DyvilREPL` class.
- Cleaned up the `CompleteCommand` class.
- Moved classes from the `dyvil.tools.repl` package to new subpackages `context` and `input`.

## Dyvil Property Format v0.4.1

- Updated all DPF classes for primitive changes.
"""
