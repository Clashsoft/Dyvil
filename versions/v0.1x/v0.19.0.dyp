version = "0.19.0"
library.version = "0.19.0"
compiler.version = "0.19.0"
repl.version = "0.12.0"
dpf.version = "0.4.1"

changelog = """
# Dyvil v0.19.0

- Array Literals now infer an Immutable Array Type.
- Class-Level Fields and Properties can now be declared with the `var` keyword. #220
- Concrete Classes now call the Trait Initializer Methods from their constructors. #226
- Constructors now always execute the Initializer Call before initializing the class and running the rest of their body. #228
- Constructors now only execute the Class Initializers if their Initializer refers to the super class. #228
- Final Field and Variable Declarations can now use `let` instead of `final var`. #237
- Properties can now infer their type from the Getter if necessary. #222
- The Cast (`as`) Operator now allows casting to `void`. #219
- The automatic Conversion from Array Literal to Iterable now works for all expressions that return an Array type. #218
- The default Property Setter Parameter name is now `newValue`.
- Interfaces can now have methods with default implementations.
- Methods at the Class level can now be defined with the new `func` keyword. #221
- Methods produce an error marker if they reduce the visibility of their super method(s). #229
- Methods, Fields and Properties can now be declared with Type Ascriptions. #223
- Variables of an Option Type can now be assigned with a concrete value. #68
- Added Brace Access Expressions as a syntax element. #215
- Added Implicit Reference Types. #233
- Added Implicitly Unwrapped Option Types, denoted with a `!` after the contained type. #68
- Added support for Modifiers and Annotations on For (Each) and Catch Variables. #225
- Added support for Nested Block Comments. #239
- Added support for Type Ascriptions in Catch Block Variables. #223
- Added support for Type Ascriptions in For (Each) Statements. #223
- Added support for Type Ascriptions in Parameter Declarations. #223
- Added the `func` keyword. #221
- Added the `repeat` keyword. #213
- Added the `let` keyword. #237
- Allow Method Declarations to have only one `throws` declaration list.
- Allow `&` to be used for the prefix Reference Operator.
- Improved Dots Handling in Symbol Identifiers #217
- Made Parenthesis optional around For and For Each Statements. #224
- Made Parenthesis optional for Catch Blocks. #224
- Made Parenthesis optional for If, While and Synchronized Statements. #224
- Deprecated `var` Parameters.
- Deprecated the `functional` Modifier. #227
- Removed support for `in` in For Each Statements.

## Dyvil Library v0.19.0

- The `Map.keys` and `values` methods now both return instances of `Queryable`.
- Added `Map.mapKeys`, `.mapValues`, `.keyMapped` and `.valueMapped` overloads.
- Added a sugar method for writing values to PrintStreams with the `<<` syntax known from C++.
- Added the Ternary Operator reference implementation in the `LanguageCommons` class.
- Added the `Map.filter(ed)ByKey` and `.filter(ed)ByValue` methods.
- Added the `Queryable.mapped`, `.flatMapped` and `.filtered` methods.
- Updated standard Operator Precedence Values.
- Updated the Library and Test Classes to use the Implicit Reference Type operator instead of `var` parameters.
- Updated the Operator Precedence for the `<<`, `>>` and `>>>` operators.
- Updated the `Some.toString` implementation.
- Structured the Lang Header.
- Improved the implementations of primitive `println` methods in `LanguageCommons`.
- Cleaned up some ASM classes.
- Removed the `Quad` alias for `Tuple4` from the Lang Header.-

## Dyvil Compiler v0.19.0

- The Compiler now supports ANSI colors via the `--ansi` argument.
- The Parameter Parser can now handle single identifiers without a syntax error.
- The Statement List Parser now uses the Member Parser to parse Variables and Nested Methods.
- The `AbstractMethod.checkOverride(...)` method no longer automatically adds the candidate to the List of overriden Methods.
- The `IClassConsumer` and `IMemberConsumer` classes now have methods to create custom Member implementations.
- The `IMemberConsumer.addField` method now takes an `IDataMember` parameter.
- The `MethodVisitor.visitCode` method can now return whether or not the code should be visited rather than relying on a global constant flag.
- The `MethodWriter` interface now extends the `MethodVisitor` interface.
- The `TryParserManager` now correctly checks for success when an Exception occurs.
- The `TryParserManager` now handles Syntax Warnings correctly.
- The `dynamic` type can now resolve and virtually call `Object` methods.
- Statement Lists now store their Variables in a List.
- String Concat Expressions can now fold consecutive constant parts. #71
- Traits now generate a special `<traitinit>` method that contains Trait Initialization code. #226
- Interfaces and Traits now mandate warnings for members that are explicitly declared `public`.
- Interfaces now mandate errors for Properties with initializers.
- Types Aliases and Operators are now stored in arrays instead of a `Map` in the `DyvilHeader` class.
- Added Visibility Checks for Types.
- Added a `TryParserManager(TokenIterator, MarkerList, IOperatorMap)` constructor.
- Added a flag for the `TryParserManager` to exit when the `parser` becomes `null`.
- Added a warning for declarations with Symbol Identifiers not preceded with the `operator` keyword.
- Added a warning for declarations with non-Symbol Identifiers preceded with the `operator` keyword.
- Added additional checks for (inferred) Method Type Arguments to match the bounds.
- Added advanced checks for the `FunctionalInterface` annotation. #227
- Added an additional `StatementListParser` constructor that takes a boolean `closure` flag.
- Added an optional flag to the `ParameterListParser` class that allows untyped Parameters in Parameter Lists.
- Added auto-unwrapping for Implicit Reference Types.
- Added overloaded `markerSupplier` methods to the `TypeChecker` class.
- Added the `CodeConstructor` to represent Constructors for which the source is available.
- Added the `ExpressionParser.IGNORE_LAMBDA` and `.IGNORE_CLOSURE` flags to exclude Lambda Arrows and Open Braces from the parsed Expression.
- Added the `IInstruction.getOpcode()` method and implemented it in all subclasses.
- Added the `IType.getLocalSlots` methods that returns `2` for `long` and `double` and `1` for every other type.
- Added the `IType.isConvertibleTo` and `.convertValueTo(IValue, IType, ...)` methods for custom conversion from value type to target type.
- Added the `IVariableConsumer` interface.
- Added the `ModifierUtil.checkVisibility(IMember, MarkerList, IContext)` method for shared visibility checks.
- Added the `Types.isAssignable(IType, IType)`, `.getDistance(...)` and `.isConvertible(...)` methods.
- Added the `Types.isSuperType(IType, IType)` method for more controllable super type checks.
- Re-added the `inline` modifier and implemented it through the `Intrinsic` method system.
- Changed the `IValue.getTypeMatch` return type from `float` to `int`.
- Cleaned up many `IValue` and `IPattern` subclasses.
- Cleaned up the `ArrayExpr` class.
- Cleaned up the `Deprecation` class.
- Cleaned up the `DyvilKeywords` class.
- Cleaned up the `ExpressionParser` class.
- Cleaned up the `Parser` and `ParserManager` classes.
- Cleaned up the `SuperExpr` class.
- Cleaned up the `TypeListParser` class.
- Cleaned up the `UnionType.combine(IType, IType)` method.
- Constructors and Class Parameters in Traits now mandate error markers.
- Direct Lambda Method References now also work when calling a non-static method on a primitive receiver.
- Extracted a single Member Parser from the Class Body Parser.
- Fields now cache their Descriptor.
- Initializers, Constructors and Class Parameters in Interfaces now mandate error markers.
- Intrinsified the Ternary Operator in the Compiler by providing an automatic desugaring to an If Statement. #214
- It is no longer possible to declare Variables without an initial value in Statement Lists.
- Nested Methods now produce an Error Marker if there is duplicate in the same Statement List.
- Operator Methods in Statement Lists now require the `operator` keyword before Symbol Identifiers.
- Option Types are now restored from bytecode.
- Parameters now maintain a Cache for their Internal Covariant Parameter Type.
- Properties, Constructors, Initializers and Nested Classes in Statement Lists are now added to the AST and produce an error.
- Variables that shadow other variables with the same name now produce a Warning Marker.
- Finding the common super type of two types now happens lazily through the use of Union Types in the Type System.
- Implicitly Unwrapped Reference and Option Types can now be compiled and restored from the bytecode.
- Generified the `IDataMemberConsumer` and `DataMemberParser` classes.
- Generified the `MemberParser` class.
- Improved Condition parsing in Match Cases.
- Improved Formatting Indentation in Class Bodies.
- Improved Formatting for Type Ascriptions.
- Improved Parser Errors for Expressions, Parameter Lists and For Statements.
- Improved Variable Declarations without an initial value.
- Improved constant Field compilation.
- Improved storage Array growth for Import, Using, Include, Field and Method declarations.
- Improved the Type Annotation system.
- Improved the `IType.withAnnotation(IAnnotation)` method contract.
- Improved the `ParameterListParser` implementation.
- Updated Compiler-internal Static Field Reference Duplicate checking.
- Updated Variable Parsing in For (Each) and Try/Catch Statements.
- Updated `NestedMethod` and `Variable` constructors.
- Updated the Lambda Expression Parser to be more reliable and efficient.
- Updated the `IfStatementParser` class.
- Updated the `Operators` class.
- Updated the `ParserManager` API.
- Updated the `StringInterpolationExpr` class.
- Updated the checks for empty and `void` Properties.
- Updated the way initial Field, Variable and Method values are type checked.
- Made the `ClassParameter` class extend `Field` and implement `IParameter`.
- Made the `IMemberConsumer` class generic and extend `IDataMemberConsumer`.
- Fixed Annotations without a type (single `@` symbol) causing compiler errors.
- Fixed Array Literals being parsed as Subscript Accesses after Infix Operators.
- Fixed Colon Operator Type Checking failing for automatic Lambda wrapping in Tuple Types.
- Fixed Colon Operators without a value on either side causing compiler errors.
- Fixed Dynamic Method Calls working incorrectly in Statement Contexts.
- Fixed Error Markers in REPL Method and Property Definitions not being printed.
- Fixed Field Resolution not looking into the Lang Header.
- Fixed Infix Method Receiver Type Mismatch errors causing compiler errors.
- Fixed Method Override Checking not properly adding the overriden Method to the List.
- Fixed Option and Union Types causing compiler errors when used in Type Expressions and reified methods.
- Fixed Primitive Types resolving Type Parameters incorrectly.
- Fixed Property Assignments always returning `void` instead of the assigned value.
- Fixed Property Formatting not handling the `newValue` identifier correctly.
- Fixed Repeat Statements without action blocks causing compiler errors on bytecode generation.
- Fixed Super Constructor Resolution causing compiler errors in some contexts.
- Fixed Type Annotations not calling the `IType.withAnnotation(IAnnotation)` method.
- Fixed Type Parameter Annotation compilation.
- Fixed `ClassGenericType.getParameterType` causing Lambda type checking to break.
- Fixed `IntValue.withType(...)` not looking for type annotations.
- Fixed `OptionType.getDefaultValue` returning `null`.
- Fixed invalid bytecode generation when Arrays are used in place of Varargs Parameters.
- Fixed nested Range ForEach Statements causing invalid bytecode to be generated.
- Fixed the `AnnotationVisitor.visitEnd` method not being called in all contexts on Annotation bytecode generation.
- Fixed the `TypeChecker.typeError(ICodePosition, IType, IType, String, Object...)` swapping error key and info key.
- Fixed the `WildcardType.asParameterType` method giving an incorrect result for lower-bounded Wildcard Types.
- Fixed the `dynamic` type resolving to `any` in some contexts.
- Fixed unimplemented static Methods producing two Error Markers.
- Moved and renamed the `Util.toConstant` method to `IValue.toAnnotationConstant`.
- Moved the Reference Class Constants and Methods from `Types` to `ReferenceType.LazyFields`.
- Moved the `AbstractMethod.value` and `.overrideMethods` fields to the `CodeMethod` class.
- Moved the `BaseModifiers.parseModifier(...)` method to `ModifierUtil`.
- Moved the `DataMemberParser` class to the `dyvil.tools.compiler.parser.classes` package.
- Moved the `DyvilUnitParser` and `DyvilHeaderParser` classes to the `header` package.
- Moved the `TryParserManager.parse(...)` method to the `DyvilREPL` class.
- Refactored `Parameter` compilation.
- Removed redundant `Parser.reportErrors` implementations.
- Removed redundant and non-transitive `getSub...` methods from the `IType` interface.
- Removed the Parser Factoy methods from the `IParserManager` class.
- Removed the Side Effect Checks for Methods and Method Calls; all method calls are considered to have side effects now.
- Removed the `EmulatorParser` class.
- Removed the `IDataMember.capture(IContext, IDataMember)` method.
- Removed the `Parameter.varargs` field and implemented it with Modifiers.
- Removed the `TryParserManager.parse(MarkerList, TokenIterator, Parser, boolean)` method.
- Removed the code for `lazy` field compilation.
- Removed the syntax error for untyped Parameters since they generate a semantic error later.
- Removed the unused `MarkerList` and `IClass` parameters from most methods related to Method Override Checking.
- Removed the unused `MemberType` enum.
- Removed unused Methods from the `ParserUtil` class.
- Removed unused methods from the `Types` and `TypeChecker` class.
- Renamed the `Constructor` class to `AbstractConstructor`.
- Renamed the `IClassCompilable.writeInit(...)` method to `writeClassInit`.
- Renamed the `IDataMember.getDescription` method to `getDescriptor`.
- Renamed the `IMemberConsumer.addField` method to `addDataMember`.
- Renamed the `IParameter.getInternalParameterType` method to `getInternalType`.
- Renamed the `IType.classEquals(IType)` method to `isSameClass`.
- Renamed the `IType.getReturnType` and `.getParameterType` methods to `.asReturnType` and `.asParameterType`.
- Renamed the `IValue.isConstant` method to `isAnnotationConstant`.
- Renamed the `IValue.toConstant(...)` method to `toAnnotationConstant`.
- Renamed the `MethodStatement` class to `MemberStatement`.
- Renamed the `ModifierUtil.readClassTypeModifier(...)` method to `parseClassTypeModifier`.
- Renamed the `REPLParser` class to `TryParserManager` and moved it to the Compiler API.
- Renamed the `Types.getObjectArray` method to `.getObjectArrayClass`.
- Renamed the `VariableParser` class to `DataMemberParser`.
- Renamed the `dyvil.tools.compiler.parser.imports` package to `header`.
- Replaced code occurences where Primitive Types Instances are checked by Reference (`== Types.VOID`, ...).

## Dyvil REPL v0.12.0

- The REPL now supports ANSI colors via the `--ansi` argument.
- The REPL now uses the same `MemberParser` configuration as the `StatementList` Parser.
- Improved REPL Variable parsing.
- Fixed Operators being resolved incorrectly in the REPL.
- Fixed REPL variables that mandated errors during declaration causing compiler errors when accessed.
- Fixed the `dumpDir` REPL argument being parsed incorrectly.

## Dyvil Property Format v0.4.1
"""
