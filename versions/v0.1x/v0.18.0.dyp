version = "0.18.0"
library.version = "0.18.0"
compiler.version = "0.18.0"
repl.version = "0.11.2"
dpf.version = "0.4.1"

changelog = """
# Dyvil v0.18.0

- Enabled Nested Methods and removed the error that was produced upon their declaration. #48
- Variables in Statement Lists and For(Each) Statements can now be declared using the `var` keyword instead of `auto`. #208
- For Each Statements can now operator on `Iterator`s. #212
- For Each Statements can now be written using the `<-` symbol or the contextual `in` keyword. #210
- Added support for the `applyStatement` method for free-standing values in statement lists. #204
- Added special syntax to define Extension Lambda Types without parameter modifiers. #203
- Reserved the `->` and `<-` operators as Symbols.
- Type Parameters Bounds can now be declared with the `extends` and `super` keywords. #206
- Deprecated the `auto` type name. #209
- Deprecated C-Style For Loops (with Condition and Update). #211
- Deprecated the Colon Operator in For Each Statements. #210
- Dropped `new` support for Constructor Declarations and Initializer Calls.

## Dyvil Library v0.18.0

- Updated the `dyvil.Lang` and `dyvil.Collections` Headers.
- Fixed the `FileUtils.create(File)` method returning incorrect results.
- Fixed the `StringExtensions.substring(String, Range[int]) method including one character too much in the resulting String.
- Removed the `->` and `<-` Operators from the `LanguageFeatures` class.

## Dyvil Compiler v0.18.0

- Classes, Methods and Constructors now use a `CombiningContext` instead of directly referring to the enclosing class during resolution.
- ClassAccess expressions that do not refer to Object Types no longer report errors in certain contexts.
- Return Statements with type mismatches now show display the expected return type in the error message.
- If Statements no longer report type mismatch errors if the `then` or `else` branch has not resolved correctly.
- Added an error for when the last value in a statement list cannot be used as the return value because of a type mismatch.
- Added a semantic error for Lambda Expressions without a return value.
- Added error for free-standing Modifiers or Annotations in Class Bodies and Headers.
- Added the `TypeChecker` class for Type Checking utility methods.
- Added the `IParameterConsumer` interface, which can also handle `IParameter` instance creation.
- Added a default implementation for `IDataMember.checkAssign(…)` and made use of it in sub-classes.
- Added extension Methods for `Comparable` in the `ObjectExtensions` class.
- Added the `classOf` and `typeOf` methods in the `LanguageFeatures` class.
- Added the `LanguageCommons.consume(any)` blackhole method.
- Added modifier bitmask constants for the `infix` and `extension` modifiers in the `dyvil.reflect.Modifiers` class.
- Unified the API methods to compile Parameters and Local Variables.
- Updated Try / Catch type checking.
- Updated the way Static Contexts are handled and checked.
- Updated Nested Method resolution and contexts.
- Updated Nested Method invocation and implementation bytecode generation.
- Updated Type Checking in most `withType` implementations.
- Updated the `LambdaTest` class to include a test for currying and type inference.
- Updated the `ParameterListParser` to only require a `IParameterConsumer` instead of a `IParameterList`.
- Updated the `ParameterListParser` class.
- Updated compilation units to handle file loading on their own.
- Improved the For / For Each Statement API and For / For Each Statement Parser.
- Improved For Each Statement type-checking.
- Improved Nil Expressions in place of Object Arrays.
- Improved parameter modifier persistence.
- Improved Type Inference for Lambda Expressions with explicit parameter types.
- Improved `ClassFormat` parameter type decompilation.
- Simplified Anonymous Class Resolution making use of the new class context system.
- Fixed Var Parameter transformations not being applied when the Reference argument is used in Receiver position. #201
- Fixed the `auto` type being an error.
- Fixed Parse Errors propagating as compiler errors when thrown during EOF parsing.
- Fixed Try Statements being unusable in all cases, even when used as a statement.
- Fixed Class Parameters not being checked for visibility modifiers.
- Fixed Throw Statements applying RESOLVE to their arguments incorrectly.
- Fixed Range For Each Statements causing type errors for untyped variables.
- Fixed Range Operators not producing an error if their element type is neither numeric nor a sub-type of `dyvil.collection.range.Rangeable`.
- Fixed localization error caused by mismatching receiver types.
- Fixed the `IType.isSuperClassOf(IType)` method causing compiler errors for unresolved types.
- Fixed `IStatement.checkCondition` producing an error for unresolved values.
- Fixed unresolved Types causing Compiler Errors when calling `isSuperTypeOf`.
- Fixed `CompoundCall`s producing invalid argument lists.
- Fixed the Colon Operator not calling `withType` on it’s arguments.
- Fixed Return Statements in Lambda Expressions not being Type-checked.
- Fixed Nil Expressions not reporting errors in some cases.
- Fixed Implicit Closure Parameters not having a Code Position attribute.
- Fixed the message that reports markers for a file printing the entire code of a compilation unit.
- Fixed Reference Types being handled incorrectly by the `type` operator.
- Moved Try Catch Block compiler phase code to the `CatchBlock` class.
- Removed many direct constructor calls to `CombiningContext` and replaced them with calls to `IContext.push(IContext)`.
- Removed the `dyvil.tools.parsing.CodeFile` class.
- Removed the `ITypeList` interface from the `IConstructor` super interfaces.
- Cleaned up the `LambdaExpr` class.
- Moved the `MethodParameter.write(MethodWriter)` and `ClassParameter.write(...)` methods to the `Parameter` class.
- Renamed all inner classes for lazy type resolution `LazyFields`.
- Renamed the `IMethodSignature` interface to `ICallableSignature`.
- Renamed the `IExternalMethod` interface to `IExternalCallableMember`.

## Dyvil REPL v0.11.2

- Improved Syntax Error Reporting in the REPL for some inputs.
- Improved the way Result Classes are generated for `void` statements in the REPL.
"""
