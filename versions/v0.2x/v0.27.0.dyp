version = "0.27.0"
library.version = "0.27.0"
compiler.version = "0.27.0"
repl.version = "0.17.1"
dpf.version = "0.8.0"
gensrc.version = "0.2.0"

changelog = """
# Dyvil v0.27.0

- Upper Type Parameter Bounds can now be specified after `:` instead of `extends`.
- Removed the `include` keyword. #299

## Dyvil Library v0.27.0

- Added Dyvil implementations for tuples of 2 and 3 elements.
- Added `Array.flatten` methods for two-dimensional arrays.
- Added a generic `Array.flatMapped` method for all primitive types. #193
- Added a non-isomorphic version of the `map` method for primitive array.
- Added the `Array.copy(int)` method for primitive arrays.
- Added the `ArrayOperators` class.
- Added the `Collection.addAll(Iterable)` method.
- Added the `Collection.removeAll(Iterable)` method.
- Added the `PrimitiveObjectArray` class for low-priority array infix methods.
- Converted the `dyvil.lang.LiteralConvertible` class to Dyvil.
- Converted the `dyvil.random.Random` and `.JavaBasedRandom` to Dyvil.
- Converted the `dyvil.util.I18n`, `.Option`, `.Some` and `.None` classes to Dyvil.
- Fixed an issue that sometimes caused Marker locations to be displayed incorrectly.
- Fixed the `-` operator on arrays only removing the first occurence of the RHS.
- Improved `ObjectArray.toString/deepToString` methods.
- Improved the non-generic `Array.flatMapped` method implementation for primitive and Object arrays. #193
- Made `None` `nil`-convertible.
- Made all Funcion classes nested classes of `dyvil.function.Function`.
- Made all Tuple classes nested classes of `dyvil.tuple.Tuple`.
- Moved operator methods from `dyvil.lang.Primitives` to type-specific `*Extensions` classes.
- Moved the `Array.unboxed` methods to the `PrimitiveObjectArray` class.
- Removed `ObjectExtensions.hash` and `.##`.
- Removed `ObjectExtensions.isNull` and `.isNonNull`.
- Removed the `dyvil.annotation.Utility` annotation class.
- Removed the `dyvil.math.vector.*Vector` classes.
- Removed the temporary `Tuple.java` class.
- Renamed `dyvil.random.JavaBasedRandom` to `JavaRandom`.
- Renamed operator methods in Array classes.
- Renamed the `ObjectArray.toString(Object, StringBuilder)` method to `deepToString`.
- Renamed the `dyvil.annotation._internal` package to `internal`.
- Replaced the `ReferenceFactory.java` class file with the `ReferenceFactory.java.dgt` template.
- Rewrote `dyvil.math.Complex` in idiomatic Dyvil.
- Updated most `dyvil.lang.*Extensions` classes.
- Updated templates to use `#foreach`.
- Updated the `Array.java.dgt` template and the `Base-Boolean.dgs` file to auto-generate the `BooleanArray` class.
- Updated the other primitive `Base-*.dgs` files.

## Dyvil Compiler v0.27.0

- Added dupliate key checking for Map Literals. #117
- Added support for multiple source directories.
- Case Classes now automatically generate public field accessors for class parameters.
- Dropped support for `<:` and `>:` as bound separators in Type Parameter declarations.
- FIxed an issue that caused Lower Type Parameter Bounds to be interpreted as Upper Bounds.
- Fixed Fields with Properties not syncing the types correctly after resolution.
- Fixed Method Duplicate Checking disregarding Class Parameter Properties.
- Fixed Property Modifiers being propagated incorrectly to internal method AST nodes.
- Fixed Type Parameter Lists handling inferred semicolons incorrectly.
- Fixed an error that was caused when unresolved type aliases where referenced from outside their enclosing unit.
- Fixed an issue related to type argument resolution on raw types.
- Fixed an issue that 'leaked' warning colors when the `--ansi` flag was active.
- Fixed an issue that caused Field Properties not to go through the CHECK phase.
- Fixed an issue that caused classes with nested classes to generate invalid class files.
- Fixed an issue that caused fields, methods and parameters with Type Parameter types to generate invalid signature attributes.
- Fixed an issue that caused generated Properties to have incorrect getter and setter positions.
- Fixed an issue that caused invalid bytecode to be generated when a generic function with a return type specialized to `boolean` was called as an `if` condition.
- Fixed an issue that caused nested classes to be compiled incorrectly.
- Fixed an issue that caused the `null` type to be parsed incorrectly within compound types.
- Fixed an issue that caused type relation checks to behave incorrectly for Arrays.
- Fixed an issue that prevented Dyvil Class Modifiers from being compiled to the bytecode.
- Fixed an issue that would produce invalid bytecode when class operators were used as constant field values.
- Fixed incorrect handling of the `{since}` in `@Deprecated` description messages.
- Fixed scoped method resolution sorting candidates incorrectly.
- Fixed the `MemberSorter.compareTypes` method breaking the comparator contract.
- Improved Library Resolution Order to search in custom libraries first.
- Improved Type Parameter formatting.
- Improved warning messages for Java syntax artifacts.
- Removed the deprecation warning for `include` statements. #299
- Updated compiler references to Function classes.
- Updated compiler references to Tuple classes.
- Updated references to `dyvil.annotation._internal`.
- Updated scoped method resolution by adding the `MatchList.hasCandidate` method.
- Updated the `FileLibrary` class.
- Updated the compiler to recognize new primitive `*Extensions` classes.

## Dyvil REPL v0.17.1

- Updated the `REPLVariable` class.

## Dyvil Property Format v0.7.0

- Added missing `override` modifiers in the `Node`, `NodeAccess` and `Property` classes.
- Cleaned up most AST classes by removing unnecessary semicolons and using properties instead of bean getters/setters.
- Cleaned up most AST classes by removing unnecessary semicolons and using properties instead of bean getters/setters.
- Fixed the `Expandable.expand(â€¦)` implementation.
- Removed all `position` variables from `NodeElement` subclasses.
- Removed duplicate `value` properties from primitive DPF Value classes.

## Dyvil GenSrc v0.2.0

- Added support for indexed `#for` directives. #307
- Added support for the `#for` and `#endfor` directives. #306
- Added the `#end` directive to denote the end of the enclosing block.
- Fixed Specialization File Resolution working incorrectly with non-canonical pathnames.
- Fixed an error caused by specialization files without a `-` in the file name.
- Renamed the `#for` directive to `#foreach`.
- Templates without specializations now use a default one based on their filename.
- The `#foreach` directive now uses `,` as the separator.
"""
