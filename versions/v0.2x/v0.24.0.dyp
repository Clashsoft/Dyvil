version = "0.24.0"
library.version = "0.24.0"
compiler.version = "0.24.0"
repl.version = "0.16.1"
dpf.version = "0.6.2"

changelog = """
# Dyvil v0.24.0

- Added support for virtual dispatch for static methods called on type variable types. #296
- Added the `struct` and `template` keywords.
- Deprecated the `[Type...]` syntax for `List<Type>`.
- Dropped support for the old C-Style Statement Label syntax.
- Generic Method Calls without Arguments can now be used as the left-hand operand of infix and postfix operators.
- The `operator` keyword can now be used in place of the `func` keyword in declarations.

## Dyvil Library v0.24.0

- Added and implemented the `Map.getEntry(Object)` method in all `Map` classes.
- Added the `*Ref.boxed(): ObjectRef<*>` methods to all primitive `*Ref` classes.
- Added the `DynamicLinker.linkClassMethod(Lookup, String, MethodType)` bootstrap method.
- Added the `InvalidReferenceException` class.
- Added the `Name.read(DataInput)` and `Name.write(DataOutput)` methods.
- Added the `ObjectRef.unboxed(ObjectRef<*>): *Ref` methods for all primitive `*Ref` classes.
- Added the `Option.fromNil` method to avoid type warnings in Dyvil source code.
- Added the `ReferenceFactory.instanceRefMetafactory(…)` bootstrap method.
- Added the `ReferenceFactory.staticRefMetafactory(…)` bootstrap method.
- Added the `StringExtensions.String` constructor.
- Added the `StringExtensions.getCharArray(String)` method.
- Added the `Wrapper.referenceType(Class)` method.
- Added the `dyvil.annotation._internal.Primitive` annotation.
- Cleaned up the `Some` class.
- Fixed empty Code Positions beeing produced by `ICodePosition.between(...)` causing display errors for markers.
- Fixed the `!=` operator for `Object`s referring to the non-existant class `Predef`.
- Improved the `DynamicLinker` implementation.
- Improved the `subscript_&` implementation for mutable and immutable `HashMap`s.
- Increased the max class hierarchy depth of the `InliningCacheCallSite` class from `3` to `256`.
- Made the `Option.!` and `.??` operators `infix` methods.
- Made the `ReflectUtils.JAVA_LANG_ACCESS` field `public`.
- Moved the `dyvil.lang.literal.*Convertible` classes as inner classes to `dyvil.lang.LiteralConvertible.From*`.
- Removed the `Option.?` operator.
- Removed the `dyvil.lang.Void` class. #297
- Un-deprecated the `Name.fromUnqualified(String)` method.
- Updated references to the former `*Convertible` classes in Dyvil source code.
- Updated the `@Reified` annotation to take a `Reified.Type` enum argument.
- Updated the `BooleanArray`, `ByteArray`, `CharArray` and `ShortArray` classes.
- Updated the `Collections` header to remove List type syntax usages.
- Updated the `FloatArray` and `DoubleArray` classes.
- Updated the `IntArray` and `LongArray` classes.
- Updated the `ObjectArray` class.
- Updated usages of the `@Reified` annotation.

## Dyvil Compiler v0.24.0

- Named Argument Lists now ensure their Arguments to be evaluated in source order. #279
- Added an additional `genericArg` parameter to the `IType.appendSignature(StringBuilder)` method.
- Added the `AnnotationUtil.getEnumValue(IArguments, IParameter, Class)` and `.getStringValue(IArguments, IParameter)` methods.
- Added the `ArrayType.getPosition` method.
- Added the `ClassFormat.BSM_HEAD` and `.BSM_TAIL` constants for common Bootstrap Method Descriptors.
- Added the `IMember.getInternalName(): String` method.
- Added the `IType.needsSignature()` method.
- Added the `ITypeParameter.getErasure(): IType` method.
- Added the `IValue.asIgnoredClassAccess()` method to convert a receiver to a Class Access.
- Added the `IValue.isClassAccess()` method to determine if a receiver is a Class Access.
- Added the `MapType.getPosition` method.
- Cleaned up the `IncludeDeclaration` class.
- Cleaned up the `Property` class.
- Fixed Class Access Method Receivers being discarded for static methods.
- Fixed InnerClass attributes being compiled incorrectly.
- Fixed Primitive Generic Arguments for Array Type Aliases being converted to their boxed counterpart.
- Fixed Primitive Types generating invalid signatures when used as generic type arguments.
- Fixed Type Expressions working incorrectly when used with Nested Types.
- Fixed Type Variables not being usable in place of Class Accesses.
- Fixed class-compilables being compiled after normal fields, causing errors in REPL inputs with static field references.
- Fixed invalid Bridge Methods being generated when reified type parameters are present in the overriding method. #291
- Fixed runtime error for varargs arrays of a generic type where the generic type is inferred to a primitive type.
- Fixed the `IntersectionType.typeTag` method returning `UNION`.
- Fixed the `dynamic` type being reported as unresolved, breaking compilation of most expressions with the type.
- Fixed the return value of `MapExpr.isResolved()` being incorrect in some contexts.
- Improved Error Messages for un-reified Type Parameter references in Class Type contexts.
- Improved Instance Field References to cache the field address in the callsite class.
- Improved Parameter Name Decompilation for External Methods.
- Improved String Interpolation bytecode output for a single value surrounded by empty spaces.
- Improved Super Expression errors for indirect Super Interfaces.
- Improved Type Parameter bound compilation.
- Improved the `ParameterList.readSignature(DataInput)` and `.writeSignature(DataOutput)` methods to persist parameter names.
- Improved the `ParameterList.signatureToString(…)` method to output parameter names.
- Improved the evaluation order for Map Expressions to be entry-wise instead of all keys then all values.
- Improved the method Name Mangling scheme to use parameter names instead of types.
- Removed all `IType.getSignature()` implementations and replaced them with a default one.
- Removed the `AbstractFieldReference` class.
- Removed the `IContext.resolveClass(IMemberContext, Name)` method.
- Removed the `IContext.resolveType(IContext, Name)` method.
- Removed the `IMethod.setMangledName(String)` method.
- Renamed the `AbstractMethod.mangledName` field to `internalName`.
- Renamed the `CaptureField.name` field to `internalName`.
- Renamed the `IMethod.getMangledName()` method to `getInternalName`.
- Replaced references to `dyvil.lang.Void` with `java.lang.Void`. #297
- Updated Compound Assignment AST Conversion.
- Updated External Classes to load inner classes on demand instead of all at once.
- Updated Instance Field References to generate `invokedynamic` calls.
- Updated Primitive Type compilation to generate `@Primitive` type annotations when used as a generic argument.
- Updated Signature Compilation to generate a Signature attribute only for Fields, Parameters and where it is needed.
- Updated Static Field References to generate `invokedynamic` calls.
- Updated Type Resolution for named Types and named Generic Types.
- Updated `fullName` computation for the `ExternalClass` and `Package` classes.
- Updated the Compiler to adapt to new `LiteralConvertible` locations.
- Updated the Package Resolution mechanism.
- Updated the `AnnotationValue` class.
- Updated the `IType.writeClassExpression(MethodWriter)` method to take a `boolean wrapPrimitives` argument.
- Updated the `ITypeParameter.getReifiedKind` method to return a `Reified.Type`.
- Updated the `InternalGenericType` class.
- Updated the `LambdaExpr` and `AbstractMethod` classes.
- Updated the `MapType` constructors.
- Updated the `StaticFieldReference` class.
- Updated usages of `Name` API methods.

## Dyvil REPL v0.16.1

- Adapted to Compiler API changes.

## Dyvil Property Format v0.6.2

-  Updated references to the former `*Convertible` classes in Dyvil source code.
-  Updated usages of `Name` API methods.
"""
