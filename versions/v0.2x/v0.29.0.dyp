version = "0.29.0"
library.version = "0.29.0"
compiler.version = "0.29.0"
repl.version = "0.17.4"
dpf.version = "0.10.0"
gensrc.version = "0.4.0"

changelog = """
# Dyvil v0.29.0

- Added the `explicit` keyword and parameter modifier. #325
- Added the `private protected` visibility modifier. #145
- Combining the `abstract` and `static` modifiers no longer results in an error. #317
- Removed support for the `dynamic` type. #323

## Dyvil Library v0.29.0

- Added method definitions for concatenation operators in `StringExtensions`.
- Added method definitions for increment, decrement and reference operators in the `dyvil.lang.References` class.
- Added method definitions for shortcut AND and OR boolean operators `&&` and `||` in `BooleanExtensions`.
- Added method definitions for the varargs spread operator `...` in `Array` classes.
- Added special equality and inequality operators with `null` arguments.
- Added the `EXPLICIT` modifier flag. #325
- Added the `Intrinsic.compileCode` field and constants.
- Added the `Optionals.unsafeInit<T>: T` method.
- Added the `Tuple.Of1` class.
- Added the `dyvil.lang.ClassExtensions` class for improved type reflection.
- Added the `dyvil.tools.parsing.source.Source` classes.
- Added the `dyvilx.tools.BasicTool` class.
- Cleaned up the `token` classes.
- Converted all `dyvil.event` classes to Dyvil.
- Converted the `dyvil.collection.range.halfopen.*` and `.closed.*` classes to Dyvil / DGT.
- Converted the `dyvil.io.Console` class to Dyvil.
- Deprecated the Boolean `^` operator as it is semantically equilvalent to the `!=` operator.
- Fixed an issue that caused markers to log incorrectly or cause runtime errors in some cases.
- Fixed invalid template syntax in the `dyvil.collection.Range` template.
- Increased the max arity for Tuples and Functions to `20`.
- Merged the `ObjectArray.java` class into the `Array.dyv.dgt` class.
- Moved the `dyvil.event` classes to `dyvilx.event`.
- Moved the classes from `dyvilx.lang.model.type` to `dyvil.reflect.types`.
- Moved tuple type aliases to the `Lang` header.
- Removed the `dyvil.Tuples` header.
- Removed the `dyvil.lang.ObjectExtensions.classOf` and `typeOf` methods.
- Renamed the `NULL` and `NONNULL` opcodes to `IS_NULL` and `IS_NONNULL`.
- Replaced the `dyvil.Reflection` header with `dyvil.Reflect`.
- The `*Array.equals`, `.hashCode` and `.toString` and the corresponding `ObjectArray.deep*` methods now accept nullable parameters.
- Updated Nullity Annotations in some `Map` subclasses.
- Updated `Marker` logging.
- Updated some `Modifiers` flags.
- Updated the `BigIntegerOperators` and `BigDecimalOperators` classes.
- Updated the `ClassExtensions` class to intrinsify `dynamicClass` and fix and issue with the `arrayType` methods.
- Updated the `Complex` class and added additional operator overloads.
- Updated the `DyvilLexer` class to use columns.
- Updated the `ICodePosition` interface to use columns instead of absolute indices.
- Updated the `Output.dyv.dgt` file to make use of `explicit`.
- Updated the `dyvil.Math` header.
- Updated the value of `Modifiers.PACKAGE`.
- Updated various modifier flags.

## Dyvil Compiler v0.29.0

- Added compiler support for the `Intrinsic.compilerCode` parameter.
- Added compiler support for the `private protected` visibility modifier. #145
- Added support for improved qualified package access. #327
- Added support for the `explicit` keyword. #325
- Added the `ModifierParser` class and moved some methods from the `ModifierUtil` class.
- Argument Lists now check for `explicit` parameters. #325
- Cleaned up Method Call Resolution by removing the `ICall.checkArguments` method.
- Cleaned up the `Library` classes.
- Cleaned up the `ReferenceOperator` class.
- Cleaned up the `ReferenceType` classes.
- Cleaned up the `StringConcatExpr` class.
- Default Modifiers are now dependent to the kind of member. #318
- Diagnostic Error and Warning Markers now display the associated key to indicate the kind.
- Disabled Override Checking for Static Final Methods.
- Final Methods in Interfaces now generate valid bytecode.
- Fixed Lambda Expressions annotating their generated methods as `synthetic`.
- Fixed a minor operator resolution issue.
- Fixed an error in the statement list parser that caused lambda headers to be parsed when there is a function declaration in the first line.
- Fixed an issue that caused Case Class Patterns to throw errors during bytecode generation.
- Fixed an issue that caused Class Operators to be incorrectly treated as constant values. #321
- Fixed an issue that caused Union and Intersection Types to work incorrectly with primitives.
- Fixed an issue that caused `char` to be inferred for Single-Quoted Literals in some contexts (mainly in place of type variables).
- Fixed an issue that caused annotations on implicitly unwrapped nullable types to be decompiled incorrectly.
- Fixed an issue that caused binding patterns to generate invalid bytecode when a `*SWITCH` instruction is used.
- Fixed an issue that caused bytecode generation to fail with an error in some cases involving `CharValue`s.
- Fixed an issue that caused implicitly unwrapped optionals to work incorrectly with type inference in some cases.
- Fixed an issue that caused invalid Stack Map Frames to be generated between `NEW` and `INVOKESPECIAL <init>` instructions.
- Fixed an issue that caused super type members to be inaccessible without an explicit `this.` expression.
- Fixed an issue that caused the argument index finder for named argument lists to return incorrect results.
- Fixed an issue that caused verification errors when assigning the result of an expression with type `null` to a Nullable reference.
- Fixed the `CodeClass.getFullName` implementation using `$` instead of `.`.
- Fixed the subtyping relation for `null` and Nullable Types being slightly incorrect in regards to Union and Intersection Types.
- Fixed type alias and decompiled generic type resolution issues.
- Fixed type checking with explicit receiver / `this` types being broken.
- Fixed variables leaking out of `match` Expression `case`s with binding patterns.
- Fixed various issues related to the reference operator `&`.
- Improved Method Overloading to support Overload-By-Receiver for methods with explicit Receiver Type.
- Improved checks for disallowed modifiers.
- Improved the error message for invisible member access.
- Members without any visibility modifiers now automatically have the `Modifiers.PACKAGE` modifier flag.
- Method Resolution no longer falls back to field resolution if the list of candidates is non-empty but ambigous.
- Modifier Decompilation is now checked by the `ClassFormat.readModifiers(int)` method.
- Moved the code for method override visibility checking to the `ModifierUtil` class.
- Override Checking now also includes Static Methods. #317
- Refactored Modifier stringification for decompiled flags.
- Refactored the Modifier Compilation system.
- Removed a special case where a Subscript Access would be converted to an Array automatically.
- Removed support for the `dynamic` type. #323
- Removed support for the `package protected` Modifier.
- Removed support for the `sealed` keyword and modifier.
- Removed the `IValue.resolveOperator(...)` method and invocations.
- Removed the `NullCheckOperator` class.
- Renamed the `ModifierSet.check(...)` method to `resolveTypes` and updated callees.
- Statement Lists are no longer parsed as a closure when the first line contains `let` or `var` keywords.
- Static Interface Methods without an implementation now automatically infer the `abstract` modifier.
- The default type parameter bound is now `Object!`.
- Unresolved Import Declarations now produce an error.
- Updated `*Parameter` constructors to take `ICallableMember callable` arguments for the surrounding method or constructor.
- Updated `ICompilationUnit` subclasses to use `FileSource`s.
- Updated `ModifierUtil` methods and callees.
- Updated checks for visibility and access modifiers in traits and interfaces. #318
- Updated code generation for `abstract static` methods. #317
- Updated compiler references to reflection Type classes.
- Updated the `DyvilCompiler` class to use the `BasicTool` class.
- Updated the `IField.writeAnnotations` method.
- Updated the `IntrinsicData` interface.
- Updated the `ModifierList.checkMethodModifiers` method and moved it to the `ModifierUtil` class.
- Updated the `ParameterListParser` class to allow varargs ellipsis after Type Ascriptions.
- Wildcard Types no longer generate useless `@NonNull` annotations.

## Dyvil Property Format v0.10.0

- Fixed compilation errors in the `Expandable` and `MapValue` classes.
- Updated the `ListValue`, `MapValue` and `StringInterpolation` classes implementation-wise.
- Updated the `Value`, `Builder` and `DPFSyntax` classes.
- Updated the `Value`, `Builder` and `DPFSyntax` classes.

## Dyvil REPL v0.17.4

- Fixed an issue that caused a runtime error when attempting to use the `complete` command with a package type.
- Fixed an issue that caused method definitions in the REPL to override previous definitions incorrectly.
- Fixed the `Extension Methods` section of the `:complete` command output containing `static` but non-`infix` methods.
- Updated the `REPLClassLoader` to use correct runtime class names.

## Dyvil GenSrc v0.4.0

- Added support for specialization-specific template markers and errors. #326
- Added support for syntax errors and warnings when parsing template files. #326
- Added support for the `#include` directive. #324
- Added support for the `#scope` and `#endscope` directives. #324
- Moved the code for default replacements `GEN_NOTICE` and `TIME_STAMP` to the `TemplateScope` class.
- Overhauled the Template / Specialization system to use a cached AST of directives.
- The `#define` and `#local` directives now apply replacements to their value argument.
- Updated the `GenSrc` class to use the `BasicTool` class.
- Updated the template loader and parser to use the `FileSource` class from the `parsing` library.
"""
