version = "0.25.0"
library.version = "0.25.0"
compiler.version = "0.25.0"
repl.version = "0.16.2"
dpf.version = "0.6.3"

changelog = """
# Dyvil v0.25.0

- Added support for `import inline`. #299
- Added support for the new `import` + declaration kind syntax. #299
- Added the `@DyvilName` annotation to denote names used in Dyvil when present in Java files, and bytecode identifiers when present in Dyvil files. #302
- Added support for the `OverloadPriority` annotation. #300
- Deprecated `include` Declarations in favor of `using` or `import inline`. #299
- Dropped support for the `[Type...]` syntax for `List<Type>`.

## Dyvil Library v0.25.0

- Added separate classes for `closed` and `halfopen` primitive ranges.
- Added the `@DyvilName(String)` annotation. #302
- Added the `@OverloadPriority(int)` annotation. #300
- Added the `[final T].asList(): ImmutableList<T>` and `[T].toList(): ImmutableList<T>` methods.
- Added the type-alias `BytecodeName` for the `DyvilName` annotation.
- Fixed the `**` operator implementation for `float`s.
- Fixed the `InvariantEventBus.register(Object, Class)` method.
- Fixed the `List.subscript(Range<int>)` implementation.
- Removed support for custom primitive Range `increment`s.
- Renamed the `ObjectRef.unboxed_$_T` methods to `.unboxedT` and added a `@DyvilName("unboxed")` method.
- Renamed the `Range.count` method to `size`.
- Renamed the `[T].apply(T from, T to)` methods to `rangeClosed` with `@DyvilName("apply")`.
- Renamed the `[T].apply(T from, T toExclusive)` methods to `range` with `@DyvilName("apply")`.
- Renamed the `[T].toIterable()` method to `asIterable`.
- Replaced `include` declarations with `using` declarations.
- Split the `LanguageCommons` and `LanguageFeatures` classes from the `dyvil.lang` package into the `Assert`, `Output` and `Misc` classes.
- Updated `Range` apply constructors.
- Updated the Lang Header.
- Updated the `PowImpl.pow(long, int)` method to use a faster implementation.
- Updated the `Primitives` class.

## Dyvil Compiler v0.25.0

- Added an error for failed contextual `this` type resolution.
- Added decompilation support for the `@DyvilName` annotation. #302
- Added default constructors for the `SingleImport`, `MultiImport` and `WildcardImport` classes.
- Added support for the `@BytecodeName` annotation in source code.
- Added support for the `OverloadPriority` annotation on Methods and Constructors. #300
- Added the `IClass.getReceiverType()` method, which returns a covariant copy of the `this` type.
- Added the `IClass.isAnonymous` method.
- Added the `IDefaultContext.DEFAULT` constant.
- Added the `IImport.asContext` method.
- Added the `IImport.resolve(MarkerList, IContext, int)` method.
- Added the `ImportDeclaration.getContext` method.
- Added the `KindedImport` class.
- Added the `RESOLVE_HEADERS` phase for Import type resolution.
- Added the `SourceHeader` class and the `ISourceHeader` interface.
- Added the `Types.getTypeMatch(superType, subType)` method.
- Changed the `IImport.resolveTypes(MarkerList, IImportContext, boolean using)` parameter to `int mask`.
- Cleaned up the `IImport.readImport(DataInput)` and `.writeImport(IImport, DataOutput)` methods.
- Cleaned up the `IImport` and `MultiImport` classes.
- Cleaned up the `ImportDeclaration` class.
- Cleaned up the `dyvil.tools.asm.ClassReader` class.
- Delegate symbol resolution for Import Declarations to the `getContext` method.
- Delegate symbol resolution for `IImport`s to the `asContext` method.
- Deprecated manual name-mangling with the `_$_` indicator.
- Deprecated the `IClass.getType()` method in favor of `.getThisType()`.
- Fixed Lambda Parameter resolution stopping after the first `auto` parameter.
- Fixed Semicolon Inference handling `@` or `#` symbols on the next line incorrectly.
- Fixed Type Aliases mapping to unresolved types in some cases.
- Fixed `NamedType.resolveType(MarkerList, IContext)` returning `null` when the parent type is unresolved.
- Fixed a compiler error caused by incorrect class initialization order of Map Types and Map Expressions.
- Fixed an error caused by Overload Candidate ordering of static calls.
- Fixed external inner class resolution causing NPEs if the class has no inner classes.
- Fixed extra space in error messages containing class-types.
- Fixed float literals not being assignable to super-types of the `java.lang.Float` type, including `Object`.
- Fixed generic type resolution failing in some rare cases.
- Fixed the `MemberSorter.compareTypes(IType, IType)` implementation.
- Fixed ‘implements non-interface’ error for unresolved types.
- Fixed ‘non-qualified access’ warnings for anonymous class fields and methods.
- Import Statements can now import Headers, Type Aliases and Operators.
- Import Statements can now make `implicit` conversion functions available.
- Improved Overload Candidate Comparison to favor the most specific return types.
- Improved several `IType.getConcreteType(ITypeContext)` implementations to reduce type copying.
- Improved the `GenericType.clone()` implementation.
- Improved the `SingleImport.writeData(DataOutput)` and `.readData(DataInput)` method implementations.
- Improved type inference for Lambda Expressions without explicit return type. #301
- Improved type inference for partially applied method calls. #301
- Made the `IImportContext` interface extend `IImplicitContext`.
- Made the `IImport` class use `IImportContext` for the `asContext`, `asParentContext` and `resolveTypes(…)` methods.
- Made the `IMemberContext` interface extend `IImportContext`.
- Made use of the `IDefaultContext.DEFAULT` constant in the `WildcardImport` class.
- Mapped `include` declarations to `import inline` statements. #299
- Mapped `using` declarations to `import static inline` statements. #299
- Merged the `DyvilHeader.importDeclarations` and `.usingDeclarations` arrays.
- Methods with mangled names now generate `@DyvilName` annotations. #302
- Moved `*Import` classes from the `d.t.c.ast.header` package to the `d.t.c.ast.imports` package.
- Moved `include` access checks to the `SingleImport` class. #299
- Moved all classes except `Package` and `RootPackage` from the `d.t.c.ast.structure` package to the `d.t.c.ast.header` package.
- Remapped `using` declarations to `import static` with `KindedImport`.
- Removed `include`-related classes and code. #299
- Removed the Hardcoded `[T]` → `Iterable<T>` conversion in favor of implicit conversion methods.
- Removed the `*Using*` methods from the `IDyvilHeader` interface.
- Renamed the `DyvilHeader` class to `HeaderUnit`.
- Renamed the `DyvilUnit` class to `ClassUnit`.
- Renamed the `HeaderUnit` class to `AbstractHeader`.
- Renamed the `IDyvilHeader` class to `IHeaderUnit`.
- Renamed the `IImport.getContext` method to `asParentContext`.
- Simplified `Candidate` constructors.
- Split Import resolution into type-resolution and member-resolution phases.
- Updated Implicit Conversion Method Resolution to search the original type of the value first.
- Updated `IImport` resolution with kind masks.
- Updated the Header Context Model to use a chain that first matches header declarations and then imported / included declarations.
- Updated the `ExternalHeader` class.
- Updated the `ReceiverTypeVisitor` class.

## Dyvil REPL v0.16.2

- Removed `include`-related input handling.
- Updated the REPL for `IDyvilHeader` API changes.

## Dyvil Property Format v0.6.3

- Bump DPF version number because of binary changes.
"""
