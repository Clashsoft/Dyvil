version = "0.31.0"
library.version = "0.31.0"
compiler.version = "0.31.0"
repl.version = "0.19.0"
dpf.version = "0.12.0"
gensrc.version = "0.5.0"

changelog = """
# Dyvil v0.31.0

- Dropped support for the `nil` literal. #337
- Fixed an issue that made prefix increment and decrement operators unusable. #339

## Dyvil Library v0.31.0

- Added a system property for the `BytecodeDump.dumpDirectory` path.
- Added documentation for the `Deprecated`, `Experimental` and `UsageInfo` classes.
- Added more `@NonNull` annotations in Map classes.
- Added the `Deprecated.forRemoval: String` field.
- Converted the `InvalidReferenceException`, `ImmutableException` and `MatchError` classes to Dyvil.
- Converted the `MathUtils` class to Dyvil.
- Fixed an issue in the Dyvil Lexer that caused non-decimal number literals to be parsed incorrectly.
- Fixed incorrect `inline` modifiers in the `Strings` class.
- Removed all `@LiteralConvertible.FromColonOperator` annotations from Map classes.
- Removed the Shift Operators with two `long` parameters, deprecated in v0.30.0.
- Removed the `Deprecated.Reason.UNSPECIFIED` enum constant.
- Removed the `LiteralConvertible.FromNil` annotation.
- Removed the `StringUtils` class.
- Updated dependants of `MathUtils`.
- Updated several library classes to adapt to language changes.
- Updated the `AnnotationProxyFactory` and `AnonymousClassLMF` classes.
- Updated the `FunctionConversions` and `PartialFunction` classes.
- Updated the `Strings` class.
- Updated the `Types` class to fix a type error.

## Dyvil Compiler v0.31.0

- Added a bytecode optimization for redundant CHECKCAST instructions.
- Added an Intrinsic for the Optional Unwrap and Force Unwrap operators.
- Added colon-based Explicit This Type syntax (`this: Type`).
- Added i18n support for `Deprecated.Reason`s and `Experimental.Stage`s.
- Added support for Casts in combination with Wildcard → Lambda Conversions.
- Added support for Type Alias Overloading. #334
- Added the `IOverloadable` interface and updated the `MatchList` and `Candidate` classes.
- Default Parameter Values no longer have to be annotation constants and can now be arbitrary expressions.
- Default Parameters now use a special modifier and are compiled to synthetic methods. #342
- Dropped support for `nil` expressions. #337
- Explicit This Types are now properly formatted.
- Fixed an issue that caused Type Signatures to be missing from bytecode for generic array types.
- Fixed an issue that caused external annotations to be resolved incorrectly.
- Fixed an issue that caused non-static methods to type-check receivers incorrectly.
- Fixed decompilation for the `Primitive` annotation working incorrectly with nullable types.
- Fixed some issues with the type system that caused various problems.
- Fixed undeterministic Union and Intersection Type Erasure.
- Improved Static and Implicit Method resolution for Union Types.
- Improved the `ArgumentList` API.
- Map Expressions now check for keys with side effects and produce warnings.
- Map Expressions now write expressions in the order in which they appear in source (alternating keys and values).
- Null checking is now done via a call to `Object.getClass` instead of a custom method.
- Refactored Wildcard → Lambda Conversion.
- Refactored many array+size fields into proper `TypeList` and `TypeParameterList` classes. #335
- Refactored the `AnnotationList` class. #335
- Refactored the `ArrayExpr`, `TupleExpr` and `MapExpr` classes to use `ArgumentList`s instead of raw arrays. #335
- Refactored the `IAnnotated` class.
- Refactored the `WildcardType` class to extend `TypeDelegate`.
- Removed many usages of `IType.asReturnType()`.
- Removed the `IArguments` interface in favor of `ArgumentList`.
- Removed the `ICase` interface in favor of the `MatchCase` subclass.
- Removed the `IParameterList` interface and replaced it with the `ParameterList` subclass.
- Static Methods can now use explicit this types that differ from the enclosing class. #338
- The `AbstractClass` class now uses a `TypeList` instance for interfaces instead of a raw array.
- Updated and improved Type Inference for Lambda Expressions.
- Updated dependants of `dyvil.math.MathUtils`.
- Updated method resolution to disallow unqualified access to Infix Methods. #339
- Updated the `Deprecation` class.
- Updated the `IContext.resolveTypeAlias` method.
- Updated the `UnionType` and `IntersectionType` classes and added a common superclass.
- `LiteralConvertible.*` annotations can now specify parameter labels with their `methodName` parameter. #336

## Dyvil REPL v0.19.0

- Fixed an issue that caused the Complete Command to not include `import` declarations in the resolution scope.
- Removed some unused code for constant handling in the `REPLVariable` class.
- Updated the REPL to adapt to compiler API changes.

## Dyvil Property Format v0.12.0

- Added the `dyvil.DPF` header.
- Templatized the primitive `Value` subclasses.
- Updated the `DPFSyntax` class.
- Updated the `Expandable` class.
- Updated the `ListValue` and `MapValue` classes.
- Updated the `Value` class to improve Array and Map Literal support.

## Dyvil GenSrc v0.5.0

- It is now possible to register and resolve from multiple source roots.
"""
