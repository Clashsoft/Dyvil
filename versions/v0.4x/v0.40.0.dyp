version = "0.40.0"
library.version = "0.40.0"
compiler.version = "0.40.0"
repl.version = "0.25.0"
dpf.version = "0.15.4"
gensrc.version = "0.9.2"

changelog = """
# Dyvil v0.40.0

- Added extension classes. #304
- Added support for mixed attribute declarations. #400

## Dyvil Library v0.40.0

- Added `Formattable.extension String`.
- Added `using` declarations for the primitive extension classes to the `Lang` header.
- Added extension classes for primitive types and wrappers to the `Primitives` header.
- Added the `[T].inserted(at: int, value: T)` method.
- Added the `bool` and `Bool` type aliases to the `Lang` header.
- Added the `Formattable.extension String` class.
- Added the `Formattable.format` method.
- Added the `Modifiers.{JAVA,DYVIL}_MODIFIER_MASK` constants.
- Added the EXTENSION_CLASS modifier to the `Modifiers` class.
- Added type annotations to `Intrinsic` constants.
- Changed the `EXTENSION_CLASS` constant in the `Modifiers` class to avoid clash with the `TRAIT` flag.
- Changed the value of the `Modifiers.EXTENSION` constant.
- Cleaned up the `BigDecimals` and `BigIntegers` headers.
- Cleaned up the `Output` class.
- Fixed incorrect an import declaration in the `OptionalTest` class.
- Fixed incorrect import declarations in the `Name`, `References`, `BigIntegers`, `BigDecimals` and `Unsafe*Ref` classes.
- Fixed unwanted recursion in the `Polynomial.toString()` and `Rational.toString()` implementations.
- Improved the `Output.print(any!..., ...)` methods.
- Made all methods with an explicit this type that is not the enclosing class `extension func`s.
- Modernized the `Strings` header to make use of extensions.
- Moved factorial, permutations and combinations from `MathUtils` to the new `Combinatorics` header.
- Moved functionality from the `BigIntegerOperators` and `BigDecimalOperators` classes to the `BigIntegers` and `BigDecimals` headers and extensions.
- Moved the `AutoPrinter` class to the `dyvil.syntax` package.
- Moved the `Output.<<` operator to `dyvil.syntax.CppIO`.
- Moved the `Output.print(AutoPrinter.()->void)` method to the `AutoPrinter` header.
- Moved the functionality from the `dyvil/lang/{Booleans, Doubles, Floats, Ints, Longs}` classes to `Primitives`.
- Removed imports for primitives from the `Lang` header.
- Removed the `FUNCTIONAL` constant from the `Modifiers` class.
- Removed the `Modifiers.EXTENSION_{FLAG,CLASS}` constants.
- Removed the explicit header declaration from the `Primitives` class.
- Replaced the `APPLY_T` and `APPLY_WITH_SIZE` macros in `Array.dyv.dgt` with the `APPLY` macro function.
- Replaced the `MathUtils` with a `Math` extension class.
- Replaced the `Representable` class with `Representation` and modernized the API.
- The `DyvilModifiers` annotation now uses `long` for the value.
- The `DyvilName` annotation can now be used on classes. #394
- The `LiteralConvertible` class is now generated with GenSrc.
- Updated and rearranged the `Modifiers` class.
- Updated the `any.toString(StringBuilder)` method in the `Strings` class to adapt to new `extension` declaration.
- Updated the `ObjectRange` and `Map` classes to qualify this expressions.

## Dyvil Compiler v0.40.0

- `AbstractClass` now automatically links enclosing class, header and package.
- `DyvilName` annotations on external classes are now correctly decompiled. #394
- Added a default implementation for the `Attributable.getAccessLevel` method.
- Added a diagnostic error when a class descriptor clashes with that of a different class. #403
- Added a diagnostic warning when a class descriptor clashes with that of class from an external library. #403
- Added an error diagnostic for generic extension classes. #406
- Added compiler support for using the `DyvilName` annotation on classes. #394
- Added lazy class list resolution to the `ExternalHeader` class.
- Added parser support for extension classes. #304
- Added proper compilation and decompilation support for the `extension` method modifier. #395
- Added some getters and setters to `AbstractClass` and `ExternalClass`.
- Added support for accessing and compiling `this` in extension methods.
- Added the `AbstractClass.enclosingPackage` and `.enclosingHeader` fields.
- Added the `ArgumentList.copy(capacity: int)` method.
- Added the `ArgumentList.getLabel(index: int)` method. #399
- Added the `ArgumentList.getOrDefault` method.
- Added the `Attributable.{get,set}{Java,Dyvil}Flags` methods.
- Added the `AttributeList.removeFlag` method.
- Added the `ClassList` class.
- Added the `ExternalClass.listExternalClassFileNames` method.
- Added the `IClass.allMethods` method.
- Added the `IClass.getPackage` and `.setPackage` methods.
- Added the `IClass.setTypeParameters` method.
- Added the `IHeaderUnit.hasHeaderDeclaration` method and implemented it in `AbstractHeader`.
- Added the `Library.list*Paths` and `.list*Names` methods for file and directory discovery.
- Added the `Package.getClasses` method.
- Added the `Package.getDirectory` method.
- Added the `Package.getHeaders` method.
- Added the `Package.listExternalClassNames` method to discover all external class names in a package.
- Added the `Package.resolveExternalClass(String)` method.
- Added the `ParameterList.removeFirst` method.
- Added the `TypeList.getInternalTypeNames` method.
- Added the `Util.getHeaderName` method.
- Allow the `ArgumentList.labels` field to be `null` to improve memory footprint. #399
- Changed the `ExternalClassVisitor.loadClass` return type from `IClass` to `ExternalClass`.
- Changed the `Package.resolveClass(String)` method to delegate to `resolveClass(Name)`.
- Changed the parameter type of `IContext.getAccessibleThis(IClass)` to `IType`.
- Class Units containing Extension Classes now automatically generate compiled header files.
- Classes with custom bytecode names now write a `DyvilName` annotation on compilation. #394
- Cleaned up and simplified the `ArgumentListParser` class
- Cleaned up the `AbstractClass` class.
- Cleaned up the `AbstractHeader` class.
- Cleaned up the `AbstractMember` class.
- Cleaned up the `AbstractMethod` class.
- Cleaned up the `ArgumentList` class.
- Cleaned up the `Attributable` class.
- Cleaned up the `CodeMethod` class.
- Cleaned up the `CompilerConfig` class. #402
- Cleaned up the `DyvilCompiler.applyPhases` method and related methods.
- Cleaned up the `KindedImport` class.
- Cleaned up the `LambdaExpr` class (partially).
- Cleaned up the `Library`, `FileLibrary` and `JarLibrary` classes.
- Cleaned up the `Names` class by renaming some constants and sorting them.
- Cleaned up the `Package` class.
- Cleaned up the `PrimitiveType` class.
- Cleaned up the `RootPackage` class.
- Cleaned up the `SequentialCompilerPhase` class.
- Cleaned up the `SourceHeader` class.
- Cleaned up the `ThrowStatement` class.
- Cleaned up various classes and interfaces for method and constructor ASTs.
- Cleanup up the `AnnotationExpr` class.
- Cleanup up the `TypeList` class.
- Compilation Units are now sorted before phases are applied, to ensure a consistent output across filesystems.
- Compilation units containing classes with custom bytecode names now automatically generate compiled headers.
- Compiled Header Files now store a list of class names.
- Compiled Headers now store the full internal class name of all contained classes.
- Disabled the behaviour of the `inline` modifier on external methods.
- Explicit `this` type compatibility checks now work with `extension func`s and are done in `checkTypes`.
- Extended declaration parsers to allow attributes within the declaration. #400
- Extended the property body parser to allow attributes after after `get` and after the setter parameter name. #400
- Extension Classes now allow `private const` fields.
- Extension Classes now automatically add the `extension` flag to all methods. #304
- Extension Classes now disallow fields and properties. #304
- Extension Classes now suppress unimplemented abstract method errors.
- Extension Methods no longer generate any bridge methods.
- Extension Methods now require an explicit receiver type. #395
- External Class Loading is now implemented in the `ExternalClassVisitor` class instead of `ExternalClass`.
- Fixed a compiler error caused by throw statements without expressions. #392
- Fixed an error in the `AbstractMethod.isAbstract` method.
- Fixed an issue in `KindedImport` that would not format `inline` and `implicit` modifiers.
- Fixed an issue in the `Package.resolveClass` method that would incorrectly return `null`.
- Fixed an issue that caused internal class name resolution to fail for top-level classes with names different from the enclosing header.
- Fixed an issue with class type formatting that would omit the `case` modifier.
- Fixed errors in the `Package.resolveClass` implementation.
- Implemented calling convention for `static extension func`s. #395
- Implemented name mangling for extension classes. #304
- Implemented special Java/Dyvil flag conversions as overridden methods.
- Implicit header declarations are now created in the `getHeaderDeclaration` method.
- Implicit header declarations now use the `GENERATED` modifier.
- Implicit header declarations of class units are now `private` instead of `public`.
- Implicit Search now also considers Extension Classes.
- Improved `Package` class cache performance.
- Improved diagnostics for inline imports referring to header units with `private protected` header declarations.
- Improved diagnostics for inline imports referring to header units with implicit header declarations.
- Improved external nested class resolution.
- Improved internal and full name getters in the `AbstractClass` class.
- Improved property argument parsing for list-like configurations. #402
- Improved recursive override checking.
- Improved the `ArgumentList.get(...)` and `.set(...)` implementations. #399
- Improved the `ConstructorParser`, `FieldParser`, `MethodParser` and `MemberParser` classes.
- Improved the `Package.resolveClass(internalName: String)` implementation; it now resolved by file name rather than symbolic name.
- Improved the `Package.resolveClass(String)` implementation.
- Improved the diagnostics for invalid break and continue statements.
- Improved the duplicate method descriptor diagnostic implementation.
- Improved the order in which class types and attributes are parsed in the `MemberParser` and `SourceFileParser` classes.
- Improved the structure of the `backend` package.
- Improved the way `ExtensionMetadata` stores its info. #304
- Internal class names no longer use the enclosing header name. #401
- Kinded imports no longer OR the mask of the enclosing context to their own, but overwrite it.
- Match list ambiguity now checks if the two candidates have the same member, in which case the list is not considered ambiguous.
- Method Resolution for Primitive Types now also looks into the `Primitives` Header.
- Methods from Extension Classes declared in source units are now implicitly imported. #304
- Modifier flags are now internally represented as `long`s.
- Moved `AbstractHeader.read(DataInput)` to `ExternalHeader`.
- Moved `AbstractHeader.write(DataOutput)` to `SourceHeader`.
- Moved command-line argument parsing to the `ArgumentParser` class.
- Moved nested class resolution code from the `Package.resolveExternalClass` method to `Package.resolveClass(String)`.
- Moved the `AnnotationUtil.getEnumValue` method to `EnumValue.eval`.
- Moved the `ClassFormat.readModifiers` method to `ModifierUtil`.
- Moved the `Member.getAccessLevel` method to `Attributable`.
- Moved the class list from `ClassUnit` to `AbstractHeader`.
- Moved the class list phase implementation from `ClassUnit` to `SourceHeader`.
- Moved the functionality from `ClassReader` to `ExternalClassVisitor` and removed the former.
- Moved the methods for checking modifiers and visibility from `ModifierUtil` to `ModifierChecks`.
- Primitive Wrapper Classes are now loaded lazily.
- Pulled up the `NamedArgumentList` implementation into the `ArgumentList` class.
- Refactored the methods for splitting Java and Dyvil modifiers in the `ModifierUtil` class.
- Regular imports now use the `class type` mask instead of anything.
- Reimplemented compilation of trait initializer calls. #396
- Removed an optimization in `MatchList.getBestCandidate` that does not work when the same member is added twice.
- Removed the `AnnotationUtil.getStringValue` method.
- Removed the `ArgumentList.getArray` method.
- Removed the `BackendUtil` class.
- Removed the `CodeClass.unit` field and unnecessary overridden methods.
- Removed the `ExternalClass.enclosingPackage` field and accessors.
- Removed the `IClass.addMethods` method.
- Removed the `IClassConsumer` interface from the `Package` class.
- Removed the `IClassList` interface.
- Removed the `ICompilationUnit.getOutputFile` method.
- Removed the `IHeaderUnit.needsHeaderDeclaration` method.
- Removed the `ITypeConsumer` class and replaced it with `Consumer<IType>`.
- Removed the `MethodWriter.setThisType` and `Frame.setInstance` methods.
- Removed the `ModifierUtil.getAttributes` method.
- Removed the `ModifierUtil.get{Java,Dyvil}Flags` methods.
- Removed the `ModifierUtil.{JAVA,DYVIL}_MODIFIER_MASK` constants.
- Removed the `NamedArgumentList` class and replaced usages with `ArgumentList`. #399
- Removed the `PrimitiveType.extClass` field as the former primitive extension classes no longer exist under their old names.
- Renamed a few classes of the `backend` package.
- Renamed all occurrences of `key`s and `name`s in `ArgumentList` to `label`. #399
- Renamed the `AnnotationUtil.visitDyvilName` method to `writeDyvilType`.
- Renamed the `ArgumentList.setName` method to `setLabel`. #399
- Renamed the `arguments.duplicate.key` diagnostic to `arguments.duplicate.label` and improved its human-readable text. #399
- Renamed the `IClassCompilable` interface to `ClassCompilable`.
- Renamed the `IClassMember` interface to `ClassMember`.
- Renamed the `IHeaderUnit.isHeader` method to `needsHeaderDeclaration`.
- Renamed the `IMember` class to `Member`.
- Renamed the `INamed` interface to `Named`.
- Renamed the `IObjectCompilable` interface to `ObjectCompilable`.
- Renamed the `IResolvable` interface to `Resolvable`.
- Renamed the `ITyped` interface to `Typed`.
- Renamed the `Member` class to `AbstractMember`.
- Renamed the `ModifierVisitor` class to `DyvilModifierVisitor`.
- Renamed the `Package.loadClass` method to `loadExternalClass` and changed the parameters.
- Renamed the `RootPackage.resolveGlobalExternalClass` to `resolveGlobalClass` and changed it's behaviour to resolve source classes as well.
- Renamed the `RootPackage.resolveInternalClass` method to `resolveGlobalExternalClass`.
- Renamed the `RootPackage.resolveInternalPackage` method to `resolveGlobalPackage`.
- Renamed the first parameter of `IValueList.add(Name, IValue)` to `label`.
- Renamed the first parameter of `StatementList.add(Name, IValue)` to `label`.
- Replaced usages of `MethodWriter.setThisType` with `MethodWriter.setLocalType`.
- Restructured the `ArgumentList` class.
- Restructured the `ArgumentList` class. #399
- Simplified `ExternalClass` constructor and `Package.loadClass`.
- Synthetic lambda body methods are now always static.
- The `class.descriptor.duplicate.package` diagnostic now only checks source headers in the enclosing package.
- The `DyvilModifierVisitor` now stores an `Attributable` and calls its `setDyvilFlags` method.
- The `EXTENSION_CLASS` class type now resolved to the `ExtensionMetadata`. #304
- The `Package.internalName` property no longer stores the trailing `/` character.
- The `Package.loadClass` now checks if the name actually matches.
- The `Package` class now only caches *external* classes.
- The `SequentialCompilerPhase` implementation now catches exceptions on a per-unit basis.
- The `Typed` interface no longer implements `ITypeConsumer`.
- The assigned value no longer uses the argument label `=` in apply assignments.
- The assigned value no longer uses the argument label `=` in subscript assignments.
- The duplicate header declaration diagnostic no longer fails for units that would need an implicit header declaration.
- This expression types are now resolved in `resolve` instead of `resolveTypes` to ensure extension classes have time to set explicit this types.
- This Expressions with explicit type now require generic type arguments.
- Updated `AttributeList` serialization to use `long` flags.
- Updated constructors for the `External{ClassParameter,Constructor,Field,Method}`, `Field` and `ClassParameter` classes.
- Updated implementations of `IContext.getAccessibleThis`.
- Updated the `AbstractHeader` and `ClassBody` and related classes to use `ClassList`.
- Updated the `AbstractHeader` class to use `getClasses()` instead of `classes`.
- Updated the `CaptureHelper` and `FieldThis` classes to use `IType` instead of `IClass`.
- Updated the `ClassBody.allProperties` and `.allMethods` methods.
- Updated the calling convention for non-`static` `extension func`s. #395
- Updated the compiler to support `long` in `DyvilModifiers`.
- Updated the various classes to use the `EXTENSION` flag.
- Updated This Expression Compilation to support primitive types.
- Updated usages of `Package.getInternalName` to append extra `/`.
- Updated usages of the `DyvilModifierVisitor` constructor.
- Updated uses of the `FUNCTIONAL` modifier constant.

## Dyvil REPL v0.25.0

- `extension func`s are no longer made `static` automatically. #395
- Implemented the `read(DataInput)` and `write(DataOutput)` methods in `REPLContext`.
- Implemented the `REPLContext.needsHeaderDeclaration` method.
- Improved command-line argument parsing in the REPL.
- Methods from Extension Classes declared in the REPL are now implicitly imported. #304
- Removed the `REPLContext.getFullName(Name)` and `.getInternalName(String)` methods.
- Updated the `:complete` command to show extension methods.
- Updated the `CompleteCommand` class to use `long` modifier flags.
- Updated the `REPLContext.getInternalName` method to adapt to signature change.
- Updated the `REPLContext` class to use the `AbstractHeader.classes` list.

## Dyvil Property Format v0.15.4

- Fixed unwanted recursion in the DPF AST `toString()` implementations.

## Dyvil GenSrc v0.9.2

- Fixed a `StackOverflowError` caused by call directives with no arguments and a block.
- Removed the `Template.setNameFromFile` method.
- Updated usages of `Package.getInternalName` in `Template.getTemplateName` to append extra `/`.
"""
