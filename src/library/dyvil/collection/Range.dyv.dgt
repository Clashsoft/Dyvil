package dyvil.collection;

import dyvil.collection.immutable.ArrayList;
import dyvil.collection.range._
import dyvil.collection.range.specialized._
import dyvil.util.ImmutableException

import java.io.Serializable
import java.lang.reflect.Array
import java.util.Iterator
import java.util.Spliterator
import java.util.Spliterators
import java.util.function.Consumer
import java.util.function.Function
import java.util.function.Predicate

@LiteralConvertible.FromTuple
@Immutable
interface Range<+T> extends Queryable<T>, Serializable
{
	@BytecodeName("empty")
	static func apply<T>() -> Range<T> = EmptyRange.instance

#import Base.dgs
#foreach PRIMITIVE_SPECS
	#if HAS_RANGE_CLASS
	@BytecodeName("closed")
	static func apply(from: PRIMITIVE, to: PRIMITIVE) -> TYPE_NAME##Range = TYPE_NAME##Range(from, to: to)
	
	@BytecodeName("halfOpen")
	static func apply(from: PRIMITIVE, explicit toExclusive: PRIMITIVE) -> TYPE_NAME##Range = TYPE_NAME##Range(from, toExclusive: toExclusive)

	#end
#end
	
	@BytecodeName("closed")
	static func apply<T extends Rangeable<T>>(from: T, to: T) -> Range<T>
		= new dyvil.collection.range.closed.ObjectRange<T>(from, to)

	@BytecodeName("halfOpen")
	static func apply<T extends Rangeable<T>>(from: T, explicit toExclusive: T) -> Range<T>
		= new dyvil.collection.range.halfopen.ObjectRange<T>(from, toExclusive)

	/**
	 * @return the first element in this range
	 */
	func first() -> T

	/**
	 * @return the last element in this range
	 */
	func last() -> T

	/**
	 * Returns the exact number of elements in this range, i.e. the number of elements that would be returned by the
	 * {@link #iterator()}.
	 *
	 * @return the number of elements in this range
	 */
	override func size() -> int

	func asHalfOpen() -> Range<T>

	func asClosed() -> Range<T>

	func isHalfOpen() -> boolean
	
	override func iterator() -> Iterator<T>
	
	override func spliterator() -> Spliterator<T>
	{
		let size = this.size
		var characteristics = Spliterator.ORDERED
		if (size >= 0)
		{
			characteristics |= Spliterator.SIZED
		}
		return Spliterators.spliterator(this.iterator(), size, characteristics)
	}

	override func contains(element: any!) -> boolean

	override func forEach(action: T -> void) -> void

	@Mutating
	override func map(mapper: Function<-T, +T>) -> void
		= throw new ImmutableException("map() on Immutable Range")

	@Mutating
	override func flatMap(mapper: Function<-T, +Iterable<+T>>) -> void
		= throw new ImmutableException("flatMap() on Immutable Range")

	@Mutating
	override func filter(predicate: Predicate<-T>) -> void
		= throw new ImmutableException("filter() on Immutable Range")
	
	override func mapped<R>(mapper: Function<-T, +R>) -> Queryable<R>
	{
		let builder = new ArrayList.Builder<R>(this.size())
		for (value <- this) builder.add(mapper(value))
		return builder.build();
	}

	override func flatMapped<R>(mapper: Function<-T, +Iterable<+R>>) -> Queryable<R>
	{
		let builder = new ArrayList.Builder<R>(this.size)
		for (value <- this) for (result <- mapper(value)) builder.add(result)
		return builder.build
	}
	
	override func filtered(predicate: Predicate<-T>) -> Queryable<T>
	{
		let builder = new ArrayList.Builder<T>(this.size)
		for (value <- this) if (predicate.test(value)) builder.add(value)
		return builder.build()
	}

	// toArray

	func toArray() -> [Object] = new [Object](this.size).{ this.copy($0, 0); $0 }

	func toArray<@Reified(.OBJECT_CLASS) type T: Object!>() -> [T]
	{
		let array = Array.newInstance(class T, this.size) as [T]
		this.copy(array, 0)
		return array
	}

	// Copying

	func copy() -> Range<T>

	func copy(to: [Object!]) -> void = this.copy(to, 0)

	func copy(to: [Object!], index: int) -> void

	// toString, equals and hashCode

	static func rangeEquals(range: Range<_>, obj: any!) -> boolean
		= obj is Range && rangeEquals(range, obj as Range)

	static func rangeEquals(range: Range<_>, other: Range<_>) -> boolean
		= range.first == other.first && range.last == other.last && range.size == other.size

	static func rangeHashCode(range: Range<_>) -> int
		= ((range.first.hashCode * 31) + range.last.hashCode) * 31 + range.size
}
