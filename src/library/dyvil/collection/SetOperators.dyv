package dyvil.collection

import dyvil.util.ImmutableException

class SetOperators
{
	// Set Operators

	infix inline func + <T>(lhs: Set<T>, rhs: T) -> Set<T> = lhs.added(rhs)

	infix inline func ++ <T>(lhs: Set<T>, rhs: Set<+T>) -> Set<T> = lhs.union(rhs)

	infix inline func - <T>(lhs: Set<T>, rhs: any) -> Set<T> = lhs.removed(rhs)

	infix inline func -- <T>(lhs: Set<T>, rhs: Set<_>) -> Set<T> = lhs.difference(rhs)

	infix inline func & <T>(lhs: Set<T>, rhs: Collection<+T>) -> Set<T> = lhs.intersection(rhs)

	infix inline func | <T>(lhs: Set<T>, rhs: Collection<+T>) -> Set<T> = lhs.union(rhs)

	infix inline func ^ <T>(lhs: Set<T>, rhs: Collection<+T>) -> Set<T> = lhs.symmetricDifference(rhs)

	// Mutable Set Operators

	infix inline func + <T>(lhs: MutableSet<T>, rhs: T) -> MutableSet<T> = lhs.added(rhs)

	infix inline func ++ <T>(lhs: MutableSet<T>, rhs: Set<+T>) -> MutableSet<T> = lhs.union(rhs)

	infix inline func - <T>(lhs: MutableSet<T>, rhs: any) -> MutableSet<T> = lhs.removed(rhs)

	infix inline func -- <T>(lhs: MutableSet<T>, rhs: Set<_>) -> MutableSet<T> = lhs.difference(rhs)

	infix inline func & <T>(lhs: MutableSet<T>, rhs: Collection<+T>) -> MutableSet<T> = lhs.intersection(rhs)

	infix inline func | <T>(lhs: MutableSet<T>, rhs: Collection<+T>) -> MutableSet<T> = lhs.union(rhs)

	infix inline func ^ <T>(lhs: MutableSet<T>, rhs: Collection<+T>) -> MutableSet<T> = lhs.symmetricDifference(rhs)

	// Immutable Set Operators

	infix inline func + <T>(lhs: ImmutableSet<T>, rhs: T) -> ImmutableSet<T> = lhs.added(rhs)

	infix inline func ++ <T>(lhs: ImmutableSet<T>, rhs: Set<+T>) -> ImmutableSet<T> = lhs.union(rhs)

	infix inline func - <T>(lhs: ImmutableSet<T>, rhs: any) -> ImmutableSet<T> = lhs.removed(rhs)

	infix inline func -- <T>(lhs: ImmutableSet<T>, rhs: Set<_>) -> ImmutableSet<T> = lhs.difference(rhs)

	infix inline func & <T>(lhs: ImmutableSet<T>, rhs: Collection<+T>) -> ImmutableSet<T> = lhs.intersection(rhs)

	infix inline func | <T>(lhs: ImmutableSet<T>, rhs: Collection<+T>) -> ImmutableSet<T> = lhs.union(rhs)

	infix inline func ^ <T>(lhs: ImmutableSet<T>, rhs: Collection<+T>) -> ImmutableSet<T> = lhs.symmetricDifference(rhs)

	// Mutating Operators

	infix inline func &= <T>(lhs: Set<T>, rhs: Collection<+T>) -> void = lhs.retainAll(rhs)

	infix inline func |= <T>(lhs: Set<T>, rhs: Collection<+T>) -> void = lhs.union(rhs)

	infix inline func ^= <T>(lhs: Set<T>, rhs: Collection<+T>) -> void = lhs.symmetricDifferenceInplace(rhs)

	@Mutating
	infix inline func &= <T>(lhs: ImmutableSet<T>, rhs: Collection<+T>) -> void
		= throw new ImmutableException("&= on Immutable Set")

	@Mutating
	infix inline func |= <T>(lhs: ImmutableSet<T>, rhs: Collection<+T>) -> void
		= throw new ImmutableException("|= on Immutable Set")

	@Mutating
	infix inline func ^= <T>(lhs: ImmutableSet<T>, rhs: Collection<+T>) -> void
		= throw new ImmutableException("^= on Immutable Set")
}
