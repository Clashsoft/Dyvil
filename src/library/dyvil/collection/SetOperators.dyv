package dyvil.collection

import dyvil.util.ImmutableException

public class SetOperators
{
	// Set Operators

	infix inline func + <T>(Set<T> set, T element) -> Set<T> = set.added(element)

	infix inline func ++ <T>(Set<T> set, Set<+T> elements) -> Set<T> = set.union(elements)

	infix inline func - <T>(Set<T> set, any element) -> Set<T> = set.removed(element)

	infix inline func -- <T>(Set<T> set, Set<_> elements) -> Set<T> = set.difference(elements)

	infix inline func & <T>(Set<T> set, Collection<+T> elements) -> Set<T> = set.intersection(elements)

	infix inline func | <T>(Set<T> set, Collection<+T> elements) -> Set<T> = set.union(elements)

	infix inline func ^ <T>(Set<T> set, Collection<+T> elements) -> Set<T> = set.symmetricDifference(elements)

	// Mutable Set Operators

	infix inline func + <T>(MutableSet<T> set, T element) -> MutableSet<T> = set.added(element)

	infix inline func ++ <T>(MutableSet<T> set, MutableSet<+T> elements) -> MutableSet<T> = set.union(elements)

	infix inline func - <T>(MutableSet<T> set, any element) -> MutableSet<T> = set.removed(element)

	infix inline func -- <T>(MutableSet<T> set, MutableSet<_> elements) -> MutableSet<T> = set.difference(elements)

	infix inline func & <T>(MutableSet<T> set, Collection<+T> elements) -> MutableSet<T> = set.intersection(elements)

	infix inline func | <T>(MutableSet<T> set, Collection<+T> elements) -> MutableSet<T> = set.union(elements)

	infix inline func ^ <T>(MutableSet<T> set, Collection<+T> elements) -> MutableSet<T> = set.symmetricDifference(elements)

	// Immutable Set Operators

	infix inline func + <T>(ImmutableSet<T> set, T element) -> ImmutableSet<T> = set.added(element)

	infix inline func ++ <T>(ImmutableSet<T> set, ImmutableSet<+T> elements) -> ImmutableSet<T> = set.union(elements)

	infix inline func - <T>(ImmutableSet<T> set, any element) -> ImmutableSet<T> = set.removed(element)

	infix inline func -- <T>(ImmutableSet<T> set, ImmutableSet<_> elements) -> ImmutableSet<T> = set.difference(elements)

	infix inline func & <T>(ImmutableSet<T> set, Collection<+T> elements) -> ImmutableSet<T> = set.intersection(elements)

	infix inline func | <T>(ImmutableSet<T> set, Collection<+T> elements) -> ImmutableSet<T> = set.union(elements)

	infix inline func ^ <T>(ImmutableSet<T> set, Collection<+T> elements) -> ImmutableSet<T> = set.symmetricDifference(elements)

	// Mutating Operators

	infix inline func &= <T>(Set<T> set, Collection<+T> elements) -> void = set.retainAll(elements)

	infix inline func |= <T>(Set<T> set, Collection<+T> elements) -> void = set.union(elements)

	infix inline func ^= <T>(Set<T> set, Collection<+T> elements) -> void = set.symmetricDifferenceInplace(elements)

	@Mutating
	infix inline func &= <T>(ImmutableSet<T> set, Collection<+T> elements) -> void
		= throw new ImmutableException("&= on Immutable Set")

	@Mutating
	infix inline func |= <T>(ImmutableSet<T> set, Collection<+T> elements) -> void
		= throw new ImmutableException("|= on Immutable Set")

	@Mutating
	infix inline func ^= <T>(ImmutableSet<T> set, Collection<+T> elements) -> void
		= throw new ImmutableException("^= on Immutable Set")
}
