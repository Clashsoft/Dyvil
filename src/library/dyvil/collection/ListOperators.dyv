package dyvil.collection

import dyvil.collection.immutable.PrependList

public class ListOperators
{
	// List Operators

	infix inline func + <T>(List<T> list, T element) -> List<T> = list.added(element)

	infix inline func ++ <T>(List<T> list, List<+T> elements) -> List<T> = list.union(elements)

	infix inline func - <T>(List<T> list, any element) -> List<T> = list.removed(element)

	infix inline func -- <T>(List<T> list, List<_> elements) -> List<T> = list.difference(elements)

	// Mutable List Operators

	infix inline func + <T>(MutableList<T> list, T element) -> MutableList<T> = list.added(element)

	infix inline func ++ <T>(MutableList<T> list, List<+T> elements) -> MutableList<T> = list.union(elements)

	infix inline func - <T>(MutableList<T> list, any element) -> MutableList<T> = list.removed(element)

	infix inline func -- <T>(MutableList<T> list, List<_> elements) -> MutableList<T> = list.difference(elements)

	// Immutable List Operators

	infix inline func :: <T>(T head, ImmutableList<T> tail) -> ImmutableList<T> = new PrependList(head, tail)

	infix inline func + <T>(ImmutableList<T> list, T element) -> ImmutableList<T> = list.added(element)

	infix inline func ++ <T>(ImmutableList<T> list, List<+T> elements) -> ImmutableList<T> = list.union(elements)

	infix inline func - <T>(ImmutableList<T> list, any element) -> ImmutableList<T> = list.removed(element)

	infix inline func -- <T>(ImmutableList<T> list, List<_> elements) -> ImmutableList<T> = list.difference(elements)
}
