package dyvil.collection

import dyvil.util.ImmutableException

final class CollectionOperators
{
	private init() {}

	infix inline func ?(lhs: Collection<_>, rhs: any) -> boolean = lhs.contains(rhs)

	// Non-Mutating Operators

	infix inline func + <T>(lhs: Collection<T>, rhs: T) -> Collection<T>
		= lhs.added(rhs)

	infix inline func ++ <T>(lhs: Collection<T>, rhs: Collection<+T>) -> Collection<T>
		= lhs.union(rhs)

	infix inline func - <T>(lhs: Collection<T>, rhs: any) -> Collection<T>
		= lhs.removed(rhs)

	infix inline func -- <T>(lhs: Collection<T>, rhs: Collection<_>) -> Collection<T>
		= lhs.difference(rhs)

	infix inline func + <T>(lhs: MutableCollection<T>, rhs: T) -> MutableCollection<T>
		= lhs.added(rhs)

	infix inline func ++ <T>(lhs: MutableCollection<T>, rhs: Collection<+T>) -> MutableCollection<T>
		= lhs.union(rhs)

	infix inline func - <T>(lhs: MutableCollection<T>, rhs: any) -> MutableCollection<T>
		= lhs.removed(rhs)

	infix inline func -- <T>(lhs: MutableCollection<T>, rhs: Collection<_>) -> MutableCollection<T>
		= lhs.difference(rhs)

	infix inline func + <T>(lhs: ImmutableCollection<T>, rhs: T) -> ImmutableCollection<T>
		= lhs.added(rhs)

	infix inline func ++ <T>(lhs: ImmutableCollection<T>, rhs: Collection<+T>) -> ImmutableCollection<T>
		= lhs.union(rhs)

	infix inline func - <T>(lhs: ImmutableCollection<T>, rhs: any) -> ImmutableCollection<T>
		= lhs.removed(rhs)

	infix inline func -- <T>(lhs: ImmutableCollection<T>, rhs: Collection<_>) -> ImmutableCollection<T>
		= lhs.difference(rhs)

	// Mutating Operators

	infix inline func += <T>(lhs: Collection<T>, rhs: T) -> void
		= lhs.add(rhs)

	infix inline func ++= <T>(lhs: Collection<T>, rhs: Collection<+T>) -> void
		= lhs.addAll(rhs)

	infix inline func -= <T>(lhs: Collection<T>, rhs: any) -> void
		= lhs.remove(rhs)

	infix inline func --= <T>(lhs: Collection<T>, rhs: Collection<_>) -> void
		= lhs.removeAll(rhs)

	@Mutating
	infix inline func += <T>(lhs: ImmutableCollection<T>, rhs: T) -> void
		= throw new ImmutableException("+= on Immutable Collection")

	@Mutating
	infix inline func ++= <T>(lhs: ImmutableCollection<T>, rhs: Collection<+T>) -> void
		= throw new ImmutableException("++= on Immutable Collection")

	@Mutating
	infix inline func -= <T>(lhs: ImmutableCollection<T>, rhs: any) -> void
		= throw new ImmutableException("-= on Immutable Collection")

	@Mutating
	infix inline func --= <T>(lhs: ImmutableCollection<T>, rhs: Collection<_>) -> void
		= throw new ImmutableException("--= on Immutable Collection")
}
