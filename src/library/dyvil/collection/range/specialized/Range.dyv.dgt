// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.collection.range.specialized

import dyvil.annotation.Immutable
import dyvil.collection.Range
import dyvil.lang.LiteralConvertible

@LiteralConvertible.FromTuple
@Immutable
interface TYPE_NAME##Range extends Range<PRIMITIVE>
{
	@BytecodeName("closed")
	override static func apply(from: PRIMITIVE, to: PRIMITIVE) -> TYPE_NAME##Range
		= new dyvil.collection.range.closed.TYPE_NAME##Range(from, to)

	@BytecodeName("halfOpen")
	override static func apply(from: PRIMITIVE, explicit toExclusive: PRIMITIVE) -> TYPE_NAME##Range
		= new dyvil.collection.range.halfopen.TYPE_NAME##Range(from, toExclusive)

	override func asClosed() -> TYPE_NAME##Range

	override func asHalfOpen() -> TYPE_NAME##Range

	func contains(value: PRIMITIVE) -> boolean

	override func contains(element: any!) -> boolean = element is Number && this.contains((element as Number).PRIMITIVE##Value())

	override func toArray() -> [WRAPPER]
	{
		let result = new [WRAPPER](this.size)
		this.copy(to: result)
		return result
	}

	func to##TYPE_NAME##Array() -> [PRIMITIVE]

	override func copy() -> TYPE_NAME##Range
}
