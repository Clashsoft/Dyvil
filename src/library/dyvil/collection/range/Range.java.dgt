// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.collection.range;

import dyvil.annotation.Immutable;
import dyvil.annotation.internal.DyvilName;
import dyvil.annotation.internal.NonNull;
import dyvil.collection.Range;
import dyvil.lang.LiteralConvertible;

@LiteralConvertible.FromTuple
@Immutable
public interface TYPE_NAME##Range extends Range<WRAPPER>
{
	@DyvilName("apply")
	static @NonNull TYPE_NAME##Range closed(PRIMITIVE from, PRIMITIVE to)
	{
		return new dyvil.collection.range.closed.TYPE_NAME##Range(from, to);
	}

	@DyvilName("apply")
	static @NonNull TYPE_NAME##Range halfOpen(PRIMITIVE from, PRIMITIVE toExclusive)
	{
		return new dyvil.collection.range.halfopen.TYPE_NAME##Range(from, toExclusive);
	}

	@Override
	@NonNull TYPE_NAME##Range asClosed();

	@Override
	@NonNull TYPE_NAME##Range asHalfOpen();

	boolean contains(PRIMITIVE value);

	@Override
	default boolean contains(Object value)
	{
		return value instanceof Number && this.contains(((Number) value).PRIMITIVE##Value());
	}

	@Override
	default @NonNull WRAPPER @NonNull [] toArray()
	{
		final WRAPPER[] result = new WRAPPER[this.size()];
		this.toArray(0, result);
		return result;
	}

	PRIMITIVE @NonNull [] to##TYPE_NAME##Array();

	@Override
	@NonNull TYPE_NAME##Range copy();
}
