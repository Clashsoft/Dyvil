#let(IS_HALF_OPEN = Boolean.parseBoolean(spec['IS_HALF_OPEN']))
#let(LESS_OP = IS_HALF_OPEN ? "<" : "<=")
#let(RANGE_OP = IS_HALF_OPEN ? "..<" : "..")

// GEN_NOTICE
// Timestamp: TIME_STAMP

#if (IS_HALF_OPEN) {
	package dyvil.collection.range.halfopen
}
#else {
	package dyvil.collection.range.closed
}

import dyvil.collection.range.Rangeable
import java.util.Iterator
import java.util.NoSuchElementException
import java.util.function.Consumer
import java.io.IOException

@LiteralConvertible.FromTuple
@Immutable
case class ObjectRange<type +T: Rangeable<T>>(
	protected @transient let start: T
	protected @transient let end: T
) implements Range<T>
{
	#if (IS_HALF_OPEN) {
		override func isHalfOpen() -> boolean = true

		override func asHalfOpen() -> Range<T> = this

		override func asClosed() -> Range<T> = new dyvil.collection.range.closed.ObjectRange<T>(this.start, this.end)
	}
	#else {
		override func isHalfOpen() -> boolean = false

		override func asHalfOpen() -> Range<T> = new dyvil.collection.range.halfopen.ObjectRange<T>(this.start, this.end)

		override func asClosed() -> Range<T> = this
	}

	override func first() -> T = this.start

	#if (IS_HALF_OPEN) {
		override func last() -> T = this.end.prev

		override func size() -> int = this.start.distanceTo(this.end)
	}
	#else {
		override func last() -> T = this.end

		override func size() -> int = this.start.distanceTo(this.end) + 1
	}

	override func iterator() -> Iterator<T> = new Iterator<T>()
	{
		var current: T = this<ObjectRange<T>>.start

		override func next() -> T
		{
			if (!this.hasNext()) throw new NoSuchElementException("End of Range")

			let c = this.current
			this.current = this.current.next
			return c
		}

		override func hasNext() -> boolean
		{
			return this.current LESS_OP this<ObjectRange<T>>.end
		}

		override func toString() -> String = "RangeIterator(\(this<ObjectRange>), current: \(this.current))"
	}

	#func(forEach(varName NAME: String, body BODY: String) -> String) {
		for (var NAME = this.start; NAME LESS_OP this.end; NAME = NAME.next) { BODY }
	}

	override func forEach(action: T -> void) -> void = #forEach("current"){action(current)}

	override func contains(element: any!)
	{
		#forEach('value') { if (element == value) return true }
		return false
	}

	override func copy() -> ObjectRange<T> = new ObjectRange<T>(this.start, this.end)

	override func copy(to: [Object!], index: int) -> void = #forEach('value') { to[index] = value; index += 1 }

	override func toString() -> String = "\(this.start) RANGE_OP \(this.end)"

	override func equals(obj: any!) -> boolean = Range.rangeEquals(this, obj)

	override func hashCode() -> int = Range.rangeHashCode(this)
}
