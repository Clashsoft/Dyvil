package dyvil.collection.iterator

import java.util.Iterator
import java.util.NoSuchElementException
import java.util.function.Predicate

case class FilterIterator<type E>(let base: Iterator<E>, let filter: Predicate<-E>) implements Iterator<E> {

	var nextAvailable: boolean
	var next: E!

	override func hasNext() -> boolean {
		if this.nextAvailable {
			return true
		}

		while this.base.hasNext() {
			let next = this.base.next()

			if this.filter.test(next) {
				this.next = next
				this.nextAvailable = true
				return true
			}
		}
		return false
	}

	override func next() -> E {
		if !this.hasNext() {
			throw new NoSuchElementException
		}

		this.nextAvailable = false
		return this.next
	}
}
