package dyvil.collection

import dyvil.util._

import java.util._
import java.util.stream._
import java.util.function._

@Deprecated(replacements: [])
interface BidiQueryable<E> extends Queryable<E>
{
	/**
	 * Creates and returns an {@link Iterator} over the elements of this query, iterating from left to right (first to
	 * last element).
	 *
	 * @return an iterator over the elements of this query
	 */
	override func iterator() -> Iterator<E>

	/**
	 * Creates and returns an {@link Iterator} over the elements of this query, iterating from right to left (last to
	 * first element).
	 *
	 * @return a reverse iterator over the elements of this query
	 */
	func reverseIterator() -> Iterator<E>

	func findFirst(predicate: Predicate<-E>) -> E? = this.find(predicate)

	func findFirstOption(predicate: Predicate<-E>) -> Option<E> = this.findOption(predicate)

	func findLast(predicate: Predicate<-E>) -> E?
	{
		for (e <- this.reverseIterator) if (predicate.test(e)) return e
		return null
	}

	func findLastOption(predicate: Predicate<-E>) -> Option<E>
	{
		for (e <- this.reverseIterator) if (predicate.test(e)) return Some(e)
		return None
	}

	// Fold

	func foldLeft<R>(initialValue: R, reducer: BiFunction<-R, -E, +R>) -> R = this.fold<R>(initialValue, reducer)

	func foldRight<R>(initialValue: R, reducer: BiFunction<-E, -R, +R>) -> R
	{
		for (e <- this.reverseIterator) initialValue = reducer(e, initialValue)
		return initialValue
	}

	// Reduce

	func reduceLeft(reducer: BiFunction<-E, -E, +E>) -> E? = this.reduce(reducer)

	func reduceLeftOption(reducer: BiFunction<-E, -E, +E>) -> Option<E> = this.reduceOption(reducer)

	func reduceRight(reducer: BiFunction<-E, -E, +E>) -> E?
	{
		if (this.isEmpty) return null

		let iterator = this.reverseIterator
		var initialValue = iterator.next

		for (e <- iterator) initialValue = reducer(e, initialValue)
		return initialValue
	}

	func reduceRightOption(reducer: BiFunction<-E, -E, +E>) -> Option<E>
	{
		if (this.isEmpty) return None
		return Some(this.reduceRight(reducer)!!)
	}
}
