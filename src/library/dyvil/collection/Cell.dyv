package dyvil.collection

public interface Cell<type +R, type +C, type +V> extends java.io.Serializable
{
	/**
	 * Returns the row stored by this cell
	 *
	 * @return the row
	 */
	func getRow() -> R

	/**
	 * Returns the column stored by this cell
	 *
	 * @return the column
	 */
	func getColumn() -> C

	/**
	 * Returns the value stored by this cell
	 *
	 * @return the value
	 */
	func getValue() -> V

	/**
	 * Converts this entry to a {@link Tuple.Of3 Tuple}.
	 *
	 * @return a tuple with this cell's row, column and value
	 */
	func toTuple() -> (R, C, V) = (this.getRow(), this.getColumn(), this.getValue())

	static func cellToString(Cell<_, _, _> cell) -> String
		= "(" + cell.getRow + ", " + cell.getColumn + ") -> " + cell.getValue

	static func cellEquals(Cell<_, _, _> cell, Object? obj) -> boolean = obj is Cell && cellEquals(cell, obj as Cell)

	static func cellEquals(Cell<_, _, _> cell1, Cell<_, _, _> cell2) -> boolean
		= cell1.getRow == cell2.getRow && cell1.getColumn == cell2.getColumn && cell1.getValue == cell2.getValue

	static func cellHashCode(Cell<_, _, _> cell) -> int
	{
		let row = cell.getRow
		let column = cell.getColumn
		let value = cell.getValue
		let keyHash = row.hashCode * 31 + column.hashCode
		return keyHash * 31 + value.hashCode
	}
}
