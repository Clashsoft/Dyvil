package dyvil.collection

import java.util.{ Collection }
import java.util.Collections
import java.util.function.{ Predicate }

@JavaName("Collections")
extension<type E> Collection<E> {
	// =============== Operators ===============

	@Mutating
	infix func += <type E>(lhs: Collection<-E>, rhs: E) -> void = lhs.add(rhs)

	@Mutating
	infix func ++= <type E>(lhs: Collection<-E>, rhs: Collection<+E>) -> void = lhs.addAll(rhs)

	// differs from remove in that it removes all occurences in Lists instead of only the first
	@Mutating
	infix func -= (lhs: Collection<_>, rhs: any!) -> void = lhs.removeAll(Collections.singleton(rhs))

	@Mutating
	infix func --= (lhs: Collection<_>, rhs: Collection<_>) -> void = lhs.removeAll(rhs)

	// =============== Properties ===============

	func isUnmodifiableView() -> boolean = this.getClass().getName().startsWith("java.util.Collections$Unmodifiable")

	func isSynchronizedView() -> boolean = this.getClass().getName().startsWith("java.util.Collections$Synchronized")

	// =============== Methods ===============

	// --------------- Predicates ---------------

	// func intersects(other: Collection<_>) -> boolean = !Collections.disjoint(this, other)

	// func isDisjoint(with other: Collection<_>) -> boolean = Collections.disjoint(this, other)

	// --------------- Mutation ---------------

	@Mutating
	func addAll(elements: [E]) -> boolean = Collections.addAll(this, elements...)

	@Mutating
	final func filter(by predicate: Predicate<-E>) -> void = this.removeIf(predicate.negate)

	// --------------- Views ---------------

	final func synchronizedView() -> Collection<E> = Collections.synchronizedCollection(this)

	final func unmodifiableView() -> Collection<E> = Collections.unmodifiableCollection(this)
}
