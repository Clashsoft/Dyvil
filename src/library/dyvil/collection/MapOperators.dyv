package dyvil.collection

public class MapOperators
{
	public infix inline func ?[K, V](Map[K, V] map, any key, any value): void = map.contains(key, value)

	public infix inline func ?[K, V](Map[K, V] map, Entry[_, _] entry): void = map.contains(entry)

	public infix inline func ?@[K, V](Map[K, V] map, any key): void = map.containsKey(key)

	public infix inline func ?:[K, V](Map[K, V] map, any value): void = map.containsValue(value)

	// Non-mutating Map Operators

	public infix inline func +[K, V](Map[K, V] map, K key, V value): Map[K, V] = map.withEntry(key, value)

	public infix inline func +[K, V](Map[K, V] map, Entry[_ <: K, _ <: V] entry): void = map.put(entry)

	public infix inline func ++[K, V](Map[K, V] map, Map[_ <: K, _ <: V] entries): void = map.putAll(entries)

	public infix inline func -[K, V](Map[K, V] map, any key, any value): void = map.remove(key, value)

	public infix inline func -[K, V](Map[K, V] map, Entry[_, _] entry): void = map.remove(entry)

	public infix inline func -@[K, V](Map[K, V] map, any key): void = map.removeKey(key)

	public infix inline func -:[K, V](Map[K, V] map, any value): void = map.removeValue(value)

	public infix inline func --[K, V](Map[K, V] map, Map[_, _] entries): void = map.removeAll(entries)

	public infix inline func --[K, V](Map[K, V] map, Collection[_] keys): void = map.removeKeys(keys)
	// Non-mutating MutableMap Operators

	public infix inline func +[K, V](MutableMap[K, V] map, K key, V value): MutableMap[K, V] = map.withEntry(key, value)

	public infix inline func +[K, V](MutableMap[K, V] map, Entry[_ <: K, _ <: V] entry): void = map.put(entry)

	public infix inline func ++[K, V](MutableMap[K, V] map, MutableMap[_ <: K, _ <: V] entries): void = map.putAll(entries)

	public infix inline func -[K, V](MutableMap[K, V] map, any key, any value): void = map.remove(key, value)

	public infix inline func -[K, V](MutableMap[K, V] map, Entry[_, _] entry): void = map.remove(entry)

	public infix inline func -@[K, V](MutableMap[K, V] map, any key): void = map.removeKey(key)

	public infix inline func -:[K, V](MutableMap[K, V] map, any value): void = map.removeValue(value)

	public infix inline func --[K, V](MutableMap[K, V] map, MutableMap[_, _] entries): void = map.removeAll(entries)

	public infix inline func --[K, V](MutableMap[K, V] map, Collection[_] keys): void = map.removeKeys(keys)

	// Non-mutating Immutable Map Operators

	public infix inline func +[K, V](ImmutableMap[K, V] map, K key, V value): ImmutableMap[K, V] = map.withEntry(key, value)

	public infix inline func +[K, V](ImmutableMap[K, V] map, Entry[_ <: K, _ <: V] entry): void = map.put(entry)

	public infix inline func ++[K, V](ImmutableMap[K, V] map, ImmutableMap[_ <: K, _ <: V] entries): void = map.putAll(entries)

	public infix inline func -[K, V](ImmutableMap[K, V] map, any key, any value): void = map.remove(key, value)

	public infix inline func -[K, V](ImmutableMap[K, V] map, Entry[_, _] entry): void = map.remove(entry)

	public infix inline func -@[K, V](ImmutableMap[K, V] map, any key): void = map.removeKey(key)

	public infix inline func -:[K, V](ImmutableMap[K, V] map, any value): void = map.removeValue(value)

	public infix inline func --[K, V](ImmutableMap[K, V] map, ImmutableMap[_, _] entries): void = map.removeAll(entries)

	public infix inline func --[K, V](ImmutableMap[K, V] map, Collection[_] keys): void = map.removeKeys(keys)


	// Mutating Operators

	public infix inline func +=[K, V](Map[K, V] map, K key, V value): void = map.put(key, value)

	public infix inline func +=[K, V](Map[K, V] map, Entry[_ <: K, _ <: V] entry): void = map.put(entry)

	public infix inline func ++=[K, V](Map[K, V] map, Map[_ <: K, _ <: V] entries): void = map.putAll(entries)

	public infix inline func -=[K, V](Map[K, V] map, any key, any value): void = map.remove(key, value)

	public infix inline func -=[K, V](Map[K, V] map, Entry[_, _] entry): void = map.remove(entry)

	public infix inline func -@=[K, V](Map[K, V] map, any key): void = map.removeKey(key)

	public infix inline func -:=[K, V](Map[K, V] map, any value): void = map.removeValue(value)

	public infix inline func --=[K, V](Map[K, V] map, Map[_, _] entries): void = map.removeAll(entries)

	public infix inline func --=[K, V](Map[K, V] map, Collection[_] keys): void = map.removeKeys(keys)

}
