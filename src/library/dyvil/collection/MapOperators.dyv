package dyvil.collection

class MapOperators
{
	infix inline func ? <K, V>(lhs: Map<K, V>, rhs: Entry<_, _>) -> void = lhs.contains(rhs)

	infix inline func ?@ <K, V>(lhs: Map<K, V>, rhs: any) -> void = lhs.containsKey(rhs)

	infix inline func ?: <K, V>(lhs: Map<K, V>, rhs: any) -> void = lhs.containsValue(rhs)

	// Non-mutating Map Operators

	infix inline func + <K, V>(lhs: Map<K, V>, rhs: Entry<+K, +V>) -> void = lhs.put(rhs)

	infix inline func ++ <K, V>(lhs: Map<K, V>, rhs: Map<+K, +V>) -> void = lhs.putAll(rhs)

	infix inline func - <K, V>(lhs: Map<K, V>, rhs: Entry<_, _>) -> void = lhs.remove(rhs)

	infix inline func -@ <K, V>(lhs: Map<K, V>, rhs: any) -> void = lhs.removeKey(rhs)

	infix inline func -: <K, V>(lhs: Map<K, V>, rhs: any) -> void = lhs.removeValue(rhs)

	infix inline func -- <K, V>(lhs: Map<K, V>, rhs: Map<_, _>) -> void = lhs.removeAll(rhs)

	infix inline func -- <K, V>(lhs: Map<K, V>, rhs: Collection<_>) -> void = lhs.removeKeys(rhs)

	// Non-mutating MutableMap Operators

	infix inline func + <K, V>(lhs: MutableMap<K, V>, rhs: Entry<+K, +V>) -> void = lhs.put(rhs)

	infix inline func ++ <K, V>(lhs: MutableMap<K, V>, rhs: Map<+K, +V>) -> void = lhs.putAll(rhs)

	infix inline func - <K, V>(lhs: MutableMap<K, V>, rhs: Entry<_, _>) -> void = lhs.remove(rhs)

	infix inline func -@ <K, V>(lhs: MutableMap<K, V>, rhs: any) -> void = lhs.removeKey(rhs)

	infix inline func -: <K, V>(lhs: MutableMap<K, V>, rhs: any) -> void = lhs.removeValue(rhs)

	infix inline func -- <K, V>(lhs: MutableMap<K, V>, rhs: Map<_, _>) -> void = lhs.removeAll(rhs)

	infix inline func -- <K, V>(lhs: MutableMap<K, V>, rhs: Collection<_>) -> void = lhs.removeKeys(rhs)

	// Non-mutating Immutable Map Operators

	infix inline func + <K, V>(lhs: ImmutableMap<K, V>, rhs: Entry<+K, +V>) -> void = lhs.put(rhs)

	infix inline func ++ <K, V>(lhs: ImmutableMap<K, V>, rhs: Map<+K, +V>) -> void = lhs.putAll(rhs)

	infix inline func - <K, V>(lhs: ImmutableMap<K, V>, rhs: Entry<_, _>) -> void = lhs.remove(rhs)

	infix inline func -@ <K, V>(lhs: ImmutableMap<K, V>, rhs: any) -> void = lhs.removeKey(rhs)

	infix inline func -: <K, V>(lhs: ImmutableMap<K, V>, rhs: any) -> void = lhs.removeValue(rhs)

	infix inline func -- <K, V>(lhs: ImmutableMap<K, V>, rhs: ImmutableMap<_, _>) -> void = lhs.removeAll(rhs)

	infix inline func -- <K, V>(lhs: ImmutableMap<K, V>, rhs: Collection<_>) -> void = lhs.removeKeys(rhs)

	// Mutating Operators

	infix inline func += <K, V>(lhs: Map<K, V>, rhs: Entry<+K, +V>) -> void = lhs.put(rhs)

	infix inline func ++= <K, V>(lhs: Map<K, V>, rhs: Map<+K, +V>) -> void = lhs.putAll(rhs)

	infix inline func -= <K, V>(lhs: Map<K, V>, rhs: Entry<_, _>) -> void = lhs.remove(rhs)

	infix inline func -@= <K, V>(lhs: Map<K, V>, rhs: any) -> void = lhs.removeKey(rhs)

	infix inline func -:= <K, V>(lhs: Map<K, V>, rhs: any) -> void = lhs.removeValue(rhs)

	infix inline func --= <K, V>(lhs: Map<K, V>, rhs: Map<_, _>) -> void = lhs.removeAll(rhs)

	infix inline func --= <K, V>(lhs: Map<K, V>, rhs: Collection<_>) -> void = lhs.removeKeys(rhs)

}
