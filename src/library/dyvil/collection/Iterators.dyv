package dyvil.collection

import java.util.Iterator
import dyvil.collection.iterator._

@JavaName("Iterators")
extension Iterator
{
	static func apply<type E>() -> Iterator<E> = EmptyIterator<E>()

	static func apply<type E>(element: E) -> Iterator<E> = SingletonIterator<E>(element)

	static func apply<type E>(elements: E...) -> Iterator<E> = ArrayIterator<E>(elements)

	// TODO convert to proper extension funcs when generic extension classes are implemented

	infix func map<type E, type R>(_ base: Iterator<+E>, by mapper: E -> R) -> Iterator<+R>
	{
		return MappingIterator(base, mapper)
	}

	infix func filter<type E>(_ base: Iterator<+E>, by filter: E -> boolean) -> Iterator<E>
	{
		return FilterIterator(base, filter)
	}

	infix func ++ <type E>(lhs: Iterator<+E>, rhs: Iterator<+E>) -> Iterator<E>
	{
		return ConcatIterator(lhs, rhs)
	}

	infix func + <type E>(lhs: E, rhs: Iterator<+E>) -> Iterator<E>
	{
		return PrependIterator(lhs, rhs)
	}

	infix func + <type E>(lhs: Iterator<+E>, rhs: E) -> Iterator<E>
	{
		return AppendIterator(lhs, rhs)
	}
}
