package dyvil.collection

/**
 * A <b>Queue</b> represents a FIFO (<b>F</b>irst <b>I</b>n, <b>F</b>irst <b>O</b>ut) mutable data structure. That means
 * that elements will be processed in the order in which they were added to the queue, so that the first element that
 * was added will be the first element to be removed, and vice-versa.
 *
 * @param <E>
 * 	the element type of the queue
 *
 * @author Clashsoft
 * @see Stack
 * @see Deque
 */
interface Queue<E> extends Queryable<E>
{
	/**
	 * Returns the last element in this queue. Unlike {@link #remove()}, this method does not remove the element from
	 * the end.
	 *
	 * @return the last element in this queue.
	 */
	func element() -> E?

	// Mutating Operations

	/**
	 * Removes all elements from this queue.
	 */
	func clear() -> void

	/**
	 * Appends the given element to the end of this queue.
	 *
	 * @param element
	 * 	the element to append
	 */
	func offer(element: E) -> void

	/**
	 * Appends all elements in the given collection of {@code elements} to the end of this queue in the order in which
	 * they appear in the collection.
	 *
	 * @param elements
	 * 	the elements to append
	 */
	func offerAll(elements: Iterable<+E>) -> void = for (e <- elements) this.offer(e)

	/**
	 * Removes and returns the last element in this queue. If this queue is empty, {@code null} is returned.
	 *
	 * @return the last element in this queue.
	 */
	func remove() -> E?

	/**
	 * Removes the given number of elements from the end of this queue, as if by calling {@link #remove()} {@code count}
	 * times.
	 *
	 * @param count
	 * 	the number of elements to remove
	 */
	func remove(count: int) -> void = for (i <- 0 ..< count) this.remove()

	/**
	 * Returns a copy of this queue that contains the same elements as this queue in the same order.
	 *
	 * @return a copy of this queue.
	 */
	func copy() -> Queue<E>
}
