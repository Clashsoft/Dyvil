package dyvil.collection.impl

import java.util.{ Iterator, NoSuchElementException }
import java.io.IOException

abstract class AbstractBitSet implements Set<int>
{
	protected const DEFAULT_CAPACITY: int = 10

	protected @transient var size: int
	protected @transient var words: [long] = unsafeInit<[long]>

	// Constructors

	public init() : this(DEFAULT_CAPACITY)

	public init(capacity: int)
	{
		this.words = new [long](dyvil.math.MathUtils.ceil(capacity / 64))
	}

	public init(elements: [int]) : this(elements.size)
	{
		for (i <- elements) this.setBit(i)
	}

	public init(iterable: Iterable<+int>) : this()
	{
		for (i <- iterable) this.setBit(i)
	}

	public init(iterable: SizedIterable<+int>) : this(iterable.size)
	{
		for (i <- iterable) this.setBit(i)
	}

	public init(bitSet: AbstractBitSet)
	{
		this.size = bitSet.size
		this.words = bitSet.words.copy()
	}

	// Utility Methods

	protected static func wordIndex(bit: int) -> int = bit _/ 64

	protected static func bitIndex(bit: int) -> int = bit % 64

	protected static func bitSet(word: long, bit: int) -> boolean = (word & 1L << bit) != 0L

	protected static func mask(bit: int) -> long = 1L << bit

	// Internal Access Methods

	protected func ensureWordCapacity(wordCount: int) -> void
	{
		let newWords = new [long](wordCount)
		System.arraycopy(this.words, 0, newWords, 0, this.words.size)
		this.words = newWords
	}

	protected func bitSet(bit: int) -> boolean
	{
		let wordIndex = wordIndex(bit)
		if (wordIndex >= this.words.size) return false

		let bitIndex = bitIndex(bit)
		let word = this.words[wordIndex]
		return bitSet(word, bitIndex)
	}

	protected func nextSetBit(start: int) -> int
	{
		for (i <- (start + 1) ..< (this.words.size * 64))
		{
			if (this.bitSet(i))
			{
				return i
			}
		}
		return -1
	}

	protected func setBit(bit: int) -> void
	{
		let wordIndex = wordIndex(bit)
		let value = mask(bitIndex(bit))

		if (wordIndex >= this.words.size)
		{
			this.ensureWordCapacity(wordIndex + 1)
			this.words[wordIndex] = value // no need to OR here, the word is definitely all-0
			this.size += 1
			return
		}

		let word = this.words[wordIndex]
		let newWord = word | value

		if (newWord != word)
		{
			this.words[wordIndex] = newWord
			this.size += 1
		}
	}

	protected func clearBit(bit: int) -> void
	{
		let wordIndex = wordIndex(bit)
		if (wordIndex >= this.words.size) return // bit is already 0

		let word = this.words[wordIndex]
		let newWord = word & ~mask(bitIndex(bit))

		if (newWord != word)
		{
			this.words[wordIndex] = newWord
			this.size -= 1
		}
	}

	// Implementation Methods

	override func size() -> int = this.size

	override func isEmpty() -> boolean = this.size == 0

	override func isSorted() -> boolean = true

	override func iterator() -> Iterator<int> = new Iterator<int>()
	{
		private var currentBit: int = this<AbstractBitSet>.nextSetBit(-1)

		override func next() -> int
		{
			let current = this.currentBit
			if (current < 0) throw new NoSuchElementException

			this.currentBit = this<AbstractBitSet>.nextSetBit(current)
			return current
		}

		override func hasNext() -> boolean = this.currentBit >= 0

		override func remove() -> void
		{
			if (this.currentBit < 0) throw new NoSuchElementException

			this<AbstractBitSet>.removeAt(this.currentBit)
			this.currentBit = this<AbstractBitSet>.nextSetBit(this.currentBit)
		}
	}

	protected abstract func removeAt(bit: int) -> void

	override func contains(element: any!) -> boolean = element match {
		case var i: int => this.bitSet(i)
		case _          => false
	}

	override func toArray(index: int, store: [Object!])
	{
		for (wordIndex <- 0 ..< this.words.size)
		{
			let word = this.words[wordIndex]
			for (bit <- 0 ..< 64)
			{
				if (bitSet(word, bit))
				{
					store[index] = wordIndex * 64 + bit
					index += 1
				}
			}
		}
	}

	func toIntArray() -> [int]
	{
		let store = new [int](this.size)
		this.toIntArray(0, store)
		return store
	}

	func toIntArray(store: [int]) -> void = this.toIntArray(0, store)

	func toIntArray(index: int, store: [int]) -> void
	{
		for (wordIndex <- 0 ..< this.words.size)
		{
			let word = this.words[wordIndex]
			for (bit <- 0 ..< 64)
			{
				if (bitSet(word, bit))
				{
					store[index] = wordIndex * 64 + bit
					index += 1
				}
			}
		}
	}

	override func emptyCopy<RE>() -> MutableSet<RE> = MutableSet<RE>()

	override func emptyCopy<RE>(capacity: int) -> MutableSet<RE> = MutableSet.withCapacity<RE>(capacity)

	override func mutableCopy() -> MutableSet<int> = new mutable.BitSet(this)

	override func immutableCopy() -> ImmutableSet<int> = new immutable.BitSet(this)

	override func immutableBuilder<RE>() -> ImmutableSet.Builder<RE>= ImmutableSet.builder<RE>

	override func immutableBuilder<RE>(capacity: int) -> ImmutableSet.Builder<RE> = ImmutableSet.builder<RE>(capacity)

	override func toJava() -> java.util.Set<int>
	{
		let hashSet = new java.util.HashSet<int>
		for (element <- this) hashSet.add(element)
		return hashSet
	}

	override func toString() -> String = Collection.collectionToString(this)

	override func equals(obj: any!) -> boolean = Set.setEquals(this, obj)

	override func hashCode() -> int = Set.setHashCode(this)

	private func writeObject(out: java.io.ObjectOutputStream) -> void throws IOException
	{
		out.defaultWriteObject()

		out.writeInt(this.size)
		out.writeInt(this.words.size)

		for (word <- this.words)
		{
			out.writeLong(word)
		}
	}

	private func readObject(in: java.io.ObjectInputStream) -> void throws IOException, ClassNotFoundException
	{
		in.defaultReadObject()

		this.size = in.readInt()
		let wordCount = in.readInt()

		this.words = new [long](wordCount)
		for (i <- 0 ..< wordCount)
		{
			this.words[i] = in.readLong()
		}
	}
}
