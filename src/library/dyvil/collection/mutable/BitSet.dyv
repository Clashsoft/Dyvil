package dyvil.collection.mutable

import dyvil.collection.impl.AbstractBitSet

public class BitSet extends AbstractBitSet implements MutableSet<int>
{
	public init()
	{
		super.init()
	}

	public init(int capacity)
	{
		super.init(capacity)
	}

	public init(int... elements)
	{
		super.init(elements...)
	}

	public init(Collection<int> elements)
	{
		super.init(elements)
	}

	public init(AbstractBitSet elements)
	{
		super.init(elements)
	}

	public override void clear()
	{
		this.size = 0
		for (int i <- 0 ..< this.words.length)
		{
			this.words[i] = 0L
		}
	}

	public override boolean add(int element)
	{
		if (this.bitSet(element)) return false

		this.setBit(element)
		return true
	}

	public override boolean remove(Object element)
	{
		if (!(element is Int)) return false

		final int bit = element as int
		if (!this.bitSet(bit)) return false

		this.clearBit(bit)
		return true
	}

	public override void removeAt(int bit) = this.clearBit(bit)

	public override void map(java.util.function.Function<-int, +int> mapper)
	{
		final [int] ints = this.toIntArray

		this.clear()
		for (int i <- ints)
		{
			this.add(mapper.apply(i))
		}
	}

	public override void flatMap(java.util.function.Function<-int, +Iterable<+int>> mapper)
	{
		final [int] ints = this.toIntArray

		this.clear()
		for (int i <- ints)
		{
			for (int newValue <- mapper.apply(i))
			{
				this.add(newValue)
			}
		}
	}

	public override MutableSet<int> copy() = this.mutableCopy

	public override ImmutableSet<int> immutable() = this.immutableCopy
}
