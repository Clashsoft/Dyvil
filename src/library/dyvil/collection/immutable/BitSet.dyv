package dyvil.collection.immutable

import dyvil.collection.impl.AbstractBitSet
import dyvil.lang.literal.{ NilConvertible, ArrayConvertible }

@Immutable
@NilConvertible
@ArrayConvertible
public class BitSet extends AbstractBitSet implements ImmutableSet<int>
{
	// Factory methods

	public static BitSet apply() = new BitSet

	public static BitSet apply(int... elements) = new BitSet(elements)

	public static BitSet from([int] array) = new BitSet(array)

	public static BitSet from(Iterable<+int> iterable) = new BitSet(iterable)

	public static BitSet from(SizedIterable<+int> iterable) = new BitSet(iterable)

	public static BitSet from(AbstractBitSet bitSet) = new BitSet(bitSet)

	// Constructors

	protected init()
	{
		super.init()
	}

	protected init(int capacity)
	{
		super.init(capacity)
	}

	public init([int] elements)
	{
		super.init(elements)
	}

	public init(Iterable<+int> iterable)
	{
		super.init(iterable)
	}

	public init(SizedIterable<+int> iterable)
	{
		super.init(iterable)
	}

	public init(AbstractBitSet bitSet)
	{
		super.init(bitSet)
	}

	// Implementation Methods

	protected override void removeAt(int bit) = throw new dyvil.util.ImmutableException("Iterator.remove() on Immutable Set")

	public override BitSet added(int element)
	{
		if (this.bitSet(element)) return this

		let copy = new BitSet(this)
		copy.setBit(element)
		return copy
	}

	public override BitSet removed(Object element)
	{
		if (!(element is Int)) return this

		final int bit = element as int
		if (!this.bitSet(bit)) return this

		let copy = new BitSet(this)
		copy.clearBit(bit)
		return copy
	}

	public override BitSet union(Collection<+int> collection)
	{
		if (collection.isEmpty) return this

		let copy = new BitSet(this)
		for (int element <- collection)
		{
			copy.setBit(element)
		}
		return copy
	}

	public override BitSet difference(Collection<_> collection)
	{
		if (collection.isEmpty || this.isEmpty) return this

		let copy = new BitSet(this)
		for (Object element <- collection)
		{
			if (element is Int)
			{
				copy.clearBit(element as int)
			}
		}
		return copy
	}

	public override BitSet intersection(Collection<+int> collection)
	{
		if (collection.isEmpty || this.isEmpty) return this

		let copy = new BitSet(this.size)
		for (int element <- collection)
		{
			if (this.bitSet(element))
			{
				copy.setBit(element)
			}
		}
		return copy
	}

	public override BitSet symmetricDifference(Collection<+int> collection)
	{
		if (collection.isEmpty) return this
		if (this.isEmpty) return new BitSet(collection)

		let copy = new BitSet
		for (int element <- collection)
		{
			if (!this.bitSet(element))
			{
				copy.setBit(element)
			}
		}

		for (int element <- this)
		{
			if (!collection.contains(element))
			{
				copy.setBit(element)
			}
		}
		return copy
	}

	public override ImmutableSet<R> mapped<R>(java.util.function.Function<-int, +R> mapper)
	{
		let builder = ImmutableSet.builder<R>
		for (int element <- this)
		{
			builder.add(mapper.apply(element))
		}
		return builder.build
	}

	public override ImmutableSet<R> flatMapped<R>(java.util.function.Function<-int, +Iterable<+R>> mapper)
	{
		let builder = ImmutableSet.builder<R>
		for (int element <- this)
		{
			for (R result <- mapper.apply(element))
			{
				builder.add(result)
			}
		}
		return builder.build
	}

	public override BitSet filtered(java.util.function.Predicate<-int> condition)
	{
		let copy = new BitSet(this.size)
		for (int element <- this)
		{
			if (condition.test(element))
			{
				copy.setBit(element)
			}
		}
		return copy
	}

    public override ImmutableSet<int> copy() = this.immutableCopy

	public override MutableSet<int> mutable() = this.mutableCopy

	public override java.util.Set<int> toJava() = java.util.Collections.unmodifiableSet(super.toJava)
}
