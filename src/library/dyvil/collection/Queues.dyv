package dyvil.collection

import java.util.{ Collection, SortedSet, Queue, Deque }
import java.util.{ ArrayDeque, PriorityQueue }

import java.util.Comparator

import java.util.Collections
import java.util.Arrays

// *************** Queue ***************

@JavaName("Queues")
extension<type E> Queue<E> {
	// =============== Static Methods ===============

	// Queues are inherently mutable, so no @Immutable return type annotations

	// Queue<Int>()
	@JavaName("empty")
	static func apply<type E>() -> Queue<E> = new ArrayDeque<E>()

	// Queue(1)
	@JavaName("of")
	static func apply<type E>(element: E) -> Queue<E> = new ArrayDeque<E>(Collections.singleton(element))

	// Queue(1, 2, 3)
	@JavaName("of")
	static func apply<type E>(elements: E...) -> Queue<E> = new ArrayDeque<E>(Arrays.asList(elements...))

	// Queue(withContentsOf: someCollection)
	@JavaName("copyOf")
	static func apply<type E>(explicit withContentsOf c: Collection<+E>) -> Queue<E> = new ArrayDeque<E>(c)
}

// *************** Deque ***************

@JavaName("Deques")
extension<type E> Deque<E> {
	// =============== Static Methods ===============

	// Deques are inherently mutable, so no @Immutable return type annotations

	// Deque<Int>()
	@JavaName("empty")
	static func apply<type E>() -> Deque<E> = new ArrayDeque<E>()

	// Deque(1)
	@JavaName("of")
	static func apply<type E>(element: E) -> Deque<E> = new ArrayDeque<E>(Collections.singleton(element))

	// Deque(1, 2, 3)
	@JavaName("of")
	static func apply<type E>(elements: E...) -> Deque<E> = new ArrayDeque<E>(Arrays.asList(elements...))

	// Deque(withContentsOf: someCollection)
	@JavaName("copyOf")
	static func apply<type E>(explicit withContentsOf c: Collection<+E>) -> Deque<E> = new ArrayDeque<E>(c)
}

// *************** ArrayDeque ***************

@JavaName("ArrayDeques")
extension ArrayDeque {
	// =============== Static Methods ===============

	// ArrayDeque<Int>()
	@JavaName("empty")
	static func apply<type E>() -> ArrayDeque<E> = new ArrayDeque<E>()

	// ArrayDeque(1)
	@JavaName("of")
	static func apply<type E>(element: E) -> ArrayDeque<E> = new ArrayDeque<E>(Collections.singleton(element))

	// ArrayDeque(1, 2, 3)
	@JavaName("of")
	static func apply<type E>(elements: E...) -> ArrayDeque<E> = new ArrayDeque<E>(Arrays.asList(elements...))

	// ArrayDeque(withContentsOf: someCollection)
	@JavaName("copyOf")
	static func apply<type E>(explicit withContentsOf c: Collection<+E>) -> ArrayDeque<E> = new ArrayDeque<E>(c)

	// ArrayDeque<Int>(capacity: 5)
	@JavaName("withCapacity")
	static func apply<type E>(explicit capacity: int) -> ArrayDeque<E> = new ArrayDeque<E>(capacity)
}

// *************** PriorityQueue ***************

@JavaName("PriorityQueues")
extension PriorityQueue {
	// =============== Static Methods ===============

	// --------------- Comparable ---------------

	// PriorityQueue<Int>()
	@JavaName("empty")
	static func apply<type E: Comparable<E>>() -> PriorityQueue<E> = new PriorityQueue<E>()

	// PriorityQueue(1)
	@JavaName("of")
	static func apply<type E: Comparable<E>>(element: E) -> PriorityQueue<E>
		= new PriorityQueue<E>(Collections.singleton(element))

	// PriorityQueue(1, 2, 3)
	@JavaName("of")
	static func apply<type E: Comparable<E>>(elements: E...) -> PriorityQueue<E>
		= new PriorityQueue<E>(Arrays.asList(elements...))

	// PriorityQueue(withContentsOf: someCollection)
	@JavaName("copyOf")
	static func apply<type E: Comparable<E>>(explicit withContentsOf collection: Collection<+E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(collection)

	// PriorityQueue(withContentsOf: someSortedSet)
	@JavaName("copyOf")
	static func apply<type E: Comparable<E>>(explicit withContentsOf sortedSet: SortedSet<+E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(sortedSet)

	// PriorityQueue(withContentsOf: somePriorityQueue)
	@JavaName("copyOf")
	static func apply<type E: Comparable<E>>(explicit withContentsOf priorityQueue: PriorityQueue<+E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(priorityQueue)

	// PriorityQueue<Int>(capacity: 5)
	@JavaName("withCapacity")
	static func apply<type E: Comparable<E>>(explicit capacity: int) -> PriorityQueue<E>
		= new PriorityQueue<E>(capacity)

	// --------------- Comparator ---------------

	// PriorityQueue(comparingWith: someComparator)
	@JavaName("empty")
	static func apply<type E>(explicit comparingWith comp: Comparator<-E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(comp)

	// PriorityQueue(1, comparingWith: someComparator)
	@JavaName("of")
	static func apply<type E>(element e: E, explicit comparingWith comp: Comparator<-E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(comp).{ $0.add(e); $0 }

	// PriorityQueue(1, 2, 3, comparingWith: someComparator)
	@JavaName("of")
	static func apply<type E>(elements: E..., explicit comparingWith comp: Comparator<-E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(comp).{ Collections.addAll($0, elements...); $0 }

	// PriorityQueue(withContentsOf: someCollection, comparingWith: someComparator)
	@JavaName("copyOf")
	static func apply<type E>(explicit withContentsOf col: Collection<+E>
	                          explicit comparingWith comp: Comparator<-E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(comp).{ $0.addAll(col); $0 }

	// PriorityQueue<Int>(capacity: 5, comparingWith: someComparator)
	@JavaName("withCapacity")
	static func apply<type E>(explicit capacity: int, explicit comparingWith comp: Comparator<-E>) -> PriorityQueue<E>
		= new PriorityQueue<E>(capacity, comp)

	// withContentsOf SortedSet and PriorityQueue are not needed
}
