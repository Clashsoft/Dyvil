package dyvil.collection

import java.util.{ Map, SortedMap, NavigableMap }
import java.util.{ HashMap, LinkedHashMap, IdentityHashMap, WeakHashMap, TreeMap, EnumMap }
import java.util.Collections
import java.util.Comparator

import dyvil.ref.ObjectRef

// *************** Map ***************

@JavaName("Maps")
extension<type K, type V> Map<K, V> {
	// =============== Static Methods ===============

	// Map<Int, String>()
	@JavaName("empty")
	static func apply<type K, type V>() -> @Immutable Map<K, V> = Collections.emptyMap<K, V>()

	// static func apply<type K, type V>(key: K, value: V) -> @Immutable Map<K, V> = Collections.singletonMap(key, value)

	// static func apply<type K, type V>(tuple: (K, V)) -> @Immutable Map<K, V> = Collections.singletonMap(tuple._1, tuple._2)

	// Map(withContentsOf: someMap)
	@JavaName("copyOf")
	static func apply<type K, type V>(withContentsOf map: Map<+K, +V>) -> @Immutable Map<K, V>
		= LinkedHashMap(withContentsOf: map).unmodifiableView

	// Map<Int, String>() { put(1, "a"); put(2, "b") }
	@JavaName("build")
	static func apply<type K, type V>(builtBy configure: Map<K, V>.() -> void) -> @Immutable Map<K, V> {
		let map = new LinkedHashMap<K, V>()
		configure(map)
		return map.unmodifiableView
	}

	// =============== Methods ===============

	// --------------- Key Subscript ---------------

	final func subscript(key: K) -> V! = this.get(key)

	@Mutating
	final func subscript_=(key: K, newValue: V) -> void = this.put(key, newValue)

	@Mutating
	final func subscript_&(key: K) -> V* = new ObjectRef<V>() {
		override func get() -> V = this<Map<K, V>>.get(key)

		override func set(value: V) -> void = this<Map<K, V>>.put(key, value)
	}

	// --------------- Views ---------------

	final func synchronizedView() -> Map<K, V> = Collections.synchronizedMap(this)

	final func unmodifiableView() -> Map<K, V> = Collections.unmodifiableMap(this)
}

// *************** SortedMap ***************

@JavaName("SortedMaps")
extension<type K, type V> SortedMap<K, V> {
	// =============== Static Methods ===============

	// SortedMap<Int, String>()
	@JavaName("empty")
	static func apply<type K, type V>() -> SortedMap<K, V> = Collections.emptySortedMap<K, V>()

	// =============== Methods ===============

	// --------------- Views ---------------

	final func synchronizedView() -> SortedMap<K, V> = Collections.synchronizedSortedMap(this)

	final func unmodifiableView() -> SortedMap<K, V> = Collections.unmodifiableSortedMap(this)
}

// *************** NavigableMap ***************

@JavaName("NavigableMaps")
extension<type K, type V> NavigableMap<K, V> {
	// =============== Static Methods ===============

	// NavigableMap<Int, String>()
	@JavaName("empty")
	static func apply<type K, type V>() -> NavigableMap<K, V> = Collections.emptyNavigableMap<K, V>()

	// =============== Methods ===============

	// --------------- Views ---------------

	final func synchronizedView() -> NavigableMap<K, V> = Collections.synchronizedNavigableMap(this)

	final func unmodifiableView() -> NavigableMap<K, V> = Collections.unmodifiableNavigableMap(this)
}

// *************** HashMap ***************

@JavaName("HashMaps")
extension HashMap {
	// =============== Static Methods ===============

	// HashMap<Int, String>()
	@JavaName("empty")
	static func apply<type K, type V>() -> HashMap<K, V> = new HashMap<K, V>()

	// HashMap(withContentsOf: someMap)
	@JavaName("copyOf")
	static func apply<type K, type V>(withContentsOf map: Map<+K, +V>) -> HashMap<K, V> = new HashMap<K, V>(map)

	// HashMap<Int, String>(capacity: 5)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int) -> HashMap<K, V> = new HashMap<K, V>(capacity)

	// HashMap<Int, String>(capacity: 5, loadFactor: 0.75)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int, loadFactor: float) -> HashMap<K, V>
		= new HashMap<K, V>(capacity, loadFactor)
}

// *************** LinkedHashMap ***************

@JavaName("LinkedHashMaps")
extension LinkedHashMap {
	// =============== Static Methods ===============

	// LinkedHashMap<Int, String>()
	@JavaName("empty")
	static func apply<type K, type V>() -> LinkedHashMap<K, V> = new LinkedHashMap<K, V>()

	// LinkedHashMap(withContentsOf: someMap)
	@JavaName("copyOf")
	static func apply<type K, type V>(withContentsOf map: Map<+K, +V>) -> LinkedHashMap<K, V>
		= new LinkedHashMap<K, V>(map)

	// LinkedHashMap<Int, String>(capacity: 5)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int) -> LinkedHashMap<K, V>
		= new LinkedHashMap<K, V>(capacity)

	// LinkedHashMap<Int, String>(capacity: 5, loadFactor: 0.75)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int, loadFactor: float) -> LinkedHashMap<K, V>
		= new LinkedHashMap<K, V>(capacity, loadFactor)

	// LinkedHashMap<Int, String>(capacity: 5, loadFactor: 0.75, accessOrder: true)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int, loadFactor: float, accessOrder: boolean) -> LinkedHashMap<K, V>
		= new LinkedHashMap<K, V>(capacity, loadFactor, accessOrder)
}

// *************** IdentityHashMap ***************

@JavaName("IdentityHashMaps")
extension IdentityHashMap {
	// =============== Static Methods ===============

	// IdentityHashMap<Int, String>()
	@JavaName("empty")
	static func apply<type K, type V>() -> IdentityHashMap<K, V> = new IdentityHashMap<K, V>()

	// IdentityHashMap<Int, String>(withContentsOf: someMap)
	@JavaName("copyOf")
	static func apply<type K, type V>(withContentsOf map: Map<+K, +V>) -> IdentityHashMap<K, V>
		= new IdentityHashMap<K, V>(map)

	// IdentityHashMap<Int, String>(capacity: 5)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int) -> IdentityHashMap<K, V>
		= new IdentityHashMap<K, V>(capacity)
}

// *************** WeakHashMap ***************

@JavaName("WeakHashMaps")
extension WeakHashMap {
	// =============== Static Methods ===============

	// WeakHashMap<Int, String>()
	@JavaName("empty")
	static func apply<type K, type V>() -> WeakHashMap<K, V> = new WeakHashMap<K, V>()

	// WeakHashMap(withContentsOf: someMap)
	@JavaName("copyOf")
	static func apply<type K, type V>(withContentsOf map: Map<+K, +V>) -> WeakHashMap<K, V> = new WeakHashMap<K, V>(map)

	// WeakHashMap<Int, String>(capacity: 5)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int) -> WeakHashMap<K, V> = new WeakHashMap<K, V>(capacity)

	// WeakHashMap<Int, String>(capacity: 5, loadFactor: 0.75)
	@JavaName("withCapacity")
	static func apply<type K, type V>(capacity: int, loadFactor: float) -> WeakHashMap<K, V>
		= new WeakHashMap<K, V>(capacity, loadFactor)
}

// *************** TreeMap ***************

@JavaName("TreeMaps")
extension TreeMap {
	// =============== Static Methods ===============

	// TreeMap<Int, String>()
	@JavaName("empty")
	static func apply<type K: Comparable<K>, type V>() -> TreeMap<K, V> = new TreeMap<K, V>()

	// TreeMap(withContentsOf: someMap)
	@JavaName("copyOf")
	static func apply<type K: Comparable<K>, type V>(withContentsOf map: Map<+K, +V>) -> TreeMap<K, V>
		= new TreeMap<K, V>(map)

	// TreeMap(withContentsOf: someSortedMap)
	@JavaName("copyOf")
	static func apply<type K: Comparable<K>, type V>(withContentsOf map: SortedMap<+K, +V>) -> TreeMap<K, V>
		= new TreeMap<K, V>(map)

	// --------------- Comparator ---------------

	// TreeMap<Int, String>(comparingBy: someComparator)
	@JavaName("empty")
	static func apply<type K, type V>(comparingBy comparator: Comparator<-K>) -> TreeMap<K, V>
		= new TreeMap<K, V>(comparator)
}

// *************** EnumMap ***************

@JavaName("EnumMaps")
extension EnumMap {
	// =============== Static Methods ===============

	// EnumMap<SomeEnum, String>(of: class SomeEnum)
	@JavaName("of")
	static func apply<type K: Enum<K>, type V>(of enumClass: Class<+K>) -> EnumMap<K, V> = new EnumMap<K, V>(enumClass)

	// EnumMap(withContentsOf: someMap)
	@JavaName("copyOf")
	static func apply<type K: Enum<K>, type V>(withContentsOf map: Map<+K, +V>) -> EnumMap<K, V>
		= new EnumMap<K, V>(map)

	// EnumMap(withContentsOf: someEnumMap)
	@JavaName("copyOf")
	static func apply<type K: Enum<K>, type V>(withContentsOf map: EnumMap<+K, +V>) -> EnumMap<K, V>
		= new EnumMap<K, V>(map)
}


