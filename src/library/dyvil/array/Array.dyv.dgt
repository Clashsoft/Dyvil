// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.array

import dyvil.collection.immutable.ArrayList

#if HAS_RANGE_CLASS
import dyvil.collection.range.closed.TYPE_NAME##Range
#endif

import dyvil.ref.TYPE_NAME##Ref
import dyvil.ref.array.TYPE_NAME##ArrayRef

import java.util.Arrays
import java.util.function._
import java.lang.reflect.Array

import static dyvil.reflect.Opcodes._

public abstract class TYPE_NAME##Array
{
	#import Base.dgs

	#define REIFIED @Reified(Reified.Type.OBJECT_CLASS)
	#if IS_OBJECT
		#define GENERIC <T>
		#define GENERIC_2 <T, REIFIED U>
		#define GENERIC_REIFIED <REIFIED T>
		#define APPLY_T apply<T>
	#else
		#define GENERIC
		#define GENERIC_2 <REIFIED U>
		#define GENERIC_REIFIED
		#define APPLY_T apply
	#end

	private init()
	{
		// no instances
	}

	#if IS_OBJECT
	public const EMPTY: [final Object!] = []
	#else
	public const EMPTY: [final PRIMITIVE] = []
	#end

	static inline func apply GENERIC_REIFIED() -> [PRIMITIVE] = []

	#if IS_OBJECT
	static inline func apply GENERIC_REIFIED(int size) -> [PRIMITIVE] = apply<T>(size, componentType: class T)

	@BytecodeName("ofType")
	static func apply GENERIC(int size, Class<T> componentType) -> [PRIMITIVE]
		= Array.newInstance(componentType, size) as [PRIMITIVE]
	#else
	static inline func apply(int size) -> [PRIMITIVE] = new [PRIMITIVE](size)
	#end

	static inline func apply GENERIC([PRIMITIVE] array) -> [PRIMITIVE] = array.copy

	#if HAS_RANGE_CLASS
	static func apply GENERIC(TYPE_NAME##Range range) -> [PRIMITIVE] = range.to##TYPE_NAME##Array()
	#endif

	static func apply GENERIC_REIFIED(int size, PRIMITIVE repeatedValue) -> [PRIMITIVE]
	{
		let array = APPLY_T(size)
		for (i <- 0 ..< size) array[i] = repeatedValue
		return array
	}

	static func apply GENERIC_REIFIED(int size, SUPPLIER valueSupplier) -> [PRIMITIVE]
	{
		let array = APPLY_T(size)

		#if SUPPLIER_CAST
		for (i <- 0 ..< size) array[i] = valueSupplier.SUPPLIER_GET() as PRIMITIVE
		#else
		for (i <- 0 ..< size) array[i] = valueSupplier.SUPPLIER_GET()
		#end

		return array
	}

	static func apply GENERIC_REIFIED(int size, INDEXED_SUPPLIER valueMapper) -> [PRIMITIVE]
	{
		let array = APPLY_T(size)

		#if INDEXED_SUPPLIER_CAST
		for (i <- 0 ..< size) array[i] = valueMapper.INDEXED_SUPPLIER_APPLY(i) as PRIMITIVE
		#else
		for (i <- 0 ..< size) array[i] = valueMapper.INDEXED_SUPPLIER_APPLY(i)
		#end

		return array
	}

	#if IS_RANGEABLE
	@BytecodeName("rangeClosed")
	static func apply GENERIC(PRIMITIVE from, PRIMITIVE to) -> [PRIMITIVE]
	{
		#if RANGE_CAST
		let array = apply((to - from + 1) as int)
		#else
		let array = apply(to - from + 1)
		#end
		var index = 0

		for (i <- from .. to) array[index++] = i
		return array
	}

	@BytecodeName("rangeOpen")
	static func range GENERIC(PRIMITIVE from, PRIMITIVE toExclusive) -> [PRIMITIVE]
	{
		#if RANGE_CAST
		let array = apply((toExclusive - from) as int)
		#else
		let array = apply(toExclusive - from)
		#end
		var index = 0

		for (i <- from ..< toExclusive) array[index++] = from
		return array
	}
	#endif

	// Basic Array Operations

	@Deprecated(replacements: [ "[PRIMITIVE].size() -> int" ])
	@Intrinsic([ LOAD_0, ARRAYLENGTH ])
	postfix func length GENERIC([PRIMITIVE] array) -> int = array.size

	@Intrinsic([ LOAD_0, ARRAYLENGTH ])
	postfix func size GENERIC([PRIMITIVE] array) -> int = array.size

	@Intrinsic([ LOAD_0, ARRAYLENGTH, EQ0 ])
	postfix func isEmpty GENERIC([PRIMITIVE] array) -> boolean = array.isEmpty

	@Intrinsic([ LOAD_0, LOAD_1, ARRAY_LOAD_INSN ])
	infix func subscript GENERIC([PRIMITIVE] array, int index) -> PRIMITIVE = array[index]

	infix func subscript GENERIC([PRIMITIVE] array, Range<int> range) -> [PRIMITIVE]
	{
		let size = range.size
		#if IS_OBJECT
		let result = apply(size, componentType: array.componentType)
		#else
		let result = apply(size)
		#end

		System.arraycopy(array, range.first, result, 0, size)
		return result
	}

	@Mutating
	@Intrinsic([ LOAD_0, LOAD_1, LOAD_2, ARRAY_STORE_INSN ])
	infix func subscript_= GENERIC([PRIMITIVE] array, int index, PRIMITIVE newValue) -> void
		= array[index] = newValue

	@Mutating
	infix func subscript_= GENERIC([PRIMITIVE] array, Range<int> range, [PRIMITIVE] newValues) -> void
		= System.arraycopy(newValues, 0, array, range.first, range.size)

	@Mutating
	infix func subscript_& GENERIC([PRIMITIVE] array, int index) -> TYPE_NAME##Ref
		= new TYPE_NAME##ArrayRef(array, index)

	infix func forEach GENERIC([PRIMITIVE] array, CONSUMER action) -> void
		= for (value <- array) action.CONSUMER_ACCEPT(value)

	#if IS_OBJECT
	// Component Types

	postfix func componentType<T>([T] array) -> Class<T> = array.getClass.getComponentType as Class<T>

	postfix func deepComponentType<T>([T] array) -> Class<_>
	{
		var ret: Class<_> = array.dynamicClass
		while (true)
		{
			var componentType = ret.getComponentType
			if (componentType == null)
			{
				break
			}
			ret = componentType
		}
		return ret
	}
	#end

	// Operators

	@Intrinsic([], compilerCode: Intrinsic.ARRAY_SPREAD)
	postfix func `...` GENERIC([PRIMITIVE] array) -> [PRIMITIVE] = array

	infix inline func == GENERIC([PRIMITIVE] lhs, [PRIMITIVE] rhs) -> boolean = Arrays.equals(lhs, rhs)

	infix inline func != GENERIC([PRIMITIVE] lhs, [PRIMITIVE] rhs) -> boolean = !Arrays.equals(lhs, rhs)

	infix func added GENERIC([PRIMITIVE] array, PRIMITIVE value) -> [PRIMITIVE]
	{
		let size = array.size
		#if IS_OBJECT
		let result = apply(size + 1, componentType: array.componentType)
		#else
		let result = apply(size + 1)
		#end
		System.arraycopy(array, 0, result, 0, size)
		result[size] = value
		return result
	}

	infix func union GENERIC([PRIMITIVE] array, [PRIMITIVE] with) -> [PRIMITIVE]
	{
		let size1 = array.size
		let size2 = with.size
		#if IS_OBJECT
		let result = apply(size1 + size2, componentType: array.componentType)
		#else
		let result = apply(size1 + size2)
		#end
		System.arraycopy(array, 0, result, 0, size1)
		System.arraycopy(with, 0, result, size1, size2)
		return result
	}

	infix func removed GENERIC([PRIMITIVE] array, PRIMITIVE value) -> [PRIMITIVE]
	{
		var size = array.size

		// Calculate number of elements in new array
		for (element <- array) if (element == value) size--

		#if IS_OBJECT
		let result = apply(size, componentType: array.componentType)
		#else
		let result = apply(size)
		#end
		var index = 0

		for (element <- array) if (element != value) result[index++] = element
		return result
	}

	infix func difference GENERIC([PRIMITIVE] array, [PRIMITIVE] from) -> [PRIMITIVE]
	{
		let size = array.size
		#if IS_OBJECT
		let result = apply(size, componentType: array.componentType)
		#else
		let result = apply(size)
		#end
		var index = 0

		for (v <- array) if (!from.contains(v)) result[index++] = v
		return result.trim(index)
	}

	infix func intersection GENERIC([PRIMITIVE] array, [PRIMITIVE] with) -> [PRIMITIVE]
	{
		let size = array.size
		#if IS_OBJECT
		let result = apply(size, componentType: array.componentType)
		#else
		let result = apply(size)
		#end
		var index = 0

		for (v <- array) if (with.contains(v)) result[index++] = v
		return result.trim(index)
	}

	#if IS_OBJECT
	// Object Arrays do not need a specialized mapped method
	#else
	infix func mapped([PRIMITIVE] array, MAPPER mapper) -> [PRIMITIVE]
	{
		let size = array.size
		let result = apply(size)

		#if MAPPER_CAST
		for (i <- 0 ..< size) result[i] = mapper.MAPPER_APPLY(array[i]) as PRIMITIVE
		#else
		for (i <- 0 ..< size) result[i] = mapper.MAPPER_APPLY(array[i])
		#end
		return result
	}
	#end

	@OverloadPriority
	infix func mapped GENERIC_2([PRIMITIVE] array, TO_MAPPER U TO_MAPPER_END mapper) -> [U]
	{
		let size = array.size
		let result = ObjectArray<U>(size)
		for (i <- 0 ..< size) result[i] = mapper.TO_MAPPER_APPLY(array[i])
		return result
	}

	#if IS_OBJECT
	// Object Arrays do not need a specialized flatMapped method
	#else
	infix func flatMapped([PRIMITIVE] array, TO_MAPPER [PRIMITIVE] TO_MAPPER_END mapper) -> [PRIMITIVE]
	{
		var size = 0
		var result = apply(array.size << 2)

		for (v <- array)
		{
			let inner = mapper.TO_MAPPER_APPLY(v)
			let newSize = inner.size

			if (size + newSize >= result.size)
			{
				result = result.copy((size + newSize) << 1)
			}

			System.arraycopy(inner, 0, result, size, newSize)
			size += newSize
		}

		return result.trim(size)
	}
	#end

	@OverloadPriority
	infix func flatMapped GENERIC_2([PRIMITIVE] array, TO_MAPPER +Iterable<+U> TO_MAPPER_END mapper) -> [U]
	{
		let list = new dyvil.collection.mutable.ArrayList<U>(array.size << 2)

		for (value <- array) list.addAll(mapper.TO_MAPPER_APPLY(value))
		return list.toArray<U>(class U)
	}

	infix func filtered GENERIC([PRIMITIVE] array, PREDICATE condition) -> [PRIMITIVE]
	{
		let size = array.size
		#if IS_OBJECT
		let result = apply(size, componentType: array.componentType)
		#else
		let result = apply(size)
		#end
		var index = 0

		for (v <- array) if (condition.PREDICATE_TEST(v)) result[index++] = v
		return result.trim(index)
	}

	infix func sorted GENERIC([PRIMITIVE] array) -> [PRIMITIVE]
	{
#if IS_BOOLEAN
		let size = array.size
		let result = new [PRIMITIVE](size)

		// Count the number of 'false' entries in the array
		var falseEntries = 0

		for (value <- array) if (!value) falseEntries++

		// Make the remaining elements of the result true
		for (i <- falseEntries ..< size) result[i] = true
		return result
#else
		let result = array.copy
		Arrays.sort(result)
		return result
#endif
	}

	// Search Operations

	infix inline func contains GENERIC([PRIMITIVE] array, PRIMITIVE value) -> boolean = indexOf(array, value, 0) >= 0

	infix inline func indexOf GENERIC([PRIMITIVE] array, PRIMITIVE value) -> int = indexOf(array, value, 0)

	infix func indexOf GENERIC([PRIMITIVE] array, PRIMITIVE value, int startIndex) -> int
	{
		while (startIndex < array.size)
		{
			if (array[startIndex] == value)
			{
				return startIndex
			}
			startIndex++
		}
		return -1
	}

	infix func lastIndexOf GENERIC([PRIMITIVE] array, PRIMITIVE value) -> int = lastIndexOf(array, value, array.size - 1)

	infix func lastIndexOf GENERIC([PRIMITIVE] array, PRIMITIVE value, int startIndex) -> int
	{
		while (startIndex >= 0)
		{
			if (array[startIndex] == value) return startIndex
			startIndex--
		}
		return -1
	}

	// Copying

	@Deprecated(replacements: [ "[PRIMITIVE].copy() -> [PRIMITIVE]" ])
	infix inline func clone GENERIC([PRIMITIVE] array) -> [PRIMITIVE] = array.copy

	infix inline func copy GENERIC([PRIMITIVE] array) -> [PRIMITIVE] = (array as Object).clone as [PRIMITIVE]

	infix func copy GENERIC([PRIMITIVE] array, int withSize) -> [PRIMITIVE]
	{
		#if IS_OBJECT
		let newArray = apply(withSize, componentType: array.componentType)
		#else
		let newArray = apply(withSize)
		#end
		System.arraycopy(array, 0, newArray, 0, array.size)
		return newArray
	}

	infix func trim GENERIC([PRIMITIVE] array, int toSize) -> [PRIMITIVE]
		= array.size == toSize ? array : array.copy(toSize)

	#if IS_OBJECT
	#else
	infix func boxed([PRIMITIVE] array) -> [WRAPPER]
	{
		let size = array.size
		let boxed = new [WRAPPER](size)

		for (i <- 0 ..< size) boxed[i] = array[i]
		return boxed
	}
	#end

	implicit infix inline func asIterable GENERIC([PRIMITIVE] array) -> Iterable<PRIMITIVE> = toList(array)

	implicit infix inline func asList GENERIC([final PRIMITIVE] array) -> ImmutableList<PRIMITIVE> = toList(array)

	infix func toList GENERIC([PRIMITIVE] array) -> ImmutableList<PRIMITIVE>
	#if IS_OBJECT
		= new ArrayList<PRIMITIVE>(array)
	#else
		= new ArrayList<PRIMITIVE>(boxed(array), trusted: true)
	#end

	// equals, hashCode and toString

	#if IS_OBJECT
	// equals

	infix inline func equals([Object!]! array, [Object!]! other) -> boolean = Arrays.equals(array, other)

	infix inline func deepEquals([Object!]! array, [Object!]! other) -> boolean = Arrays.deepEquals(array, other)

	infix func deepEquals(Object! obj, Object! other) -> boolean = [obj].deepEquals([other])

	// hashCode

	postfix inline func hashCode([Object!]! array) -> int = Arrays.hashCode(array)

	postfix inline func deepHashCode([Object!]! array) -> int = Arrays.deepHashCode(array)

	postfix func deepHashCode(Object! obj) -> int = [obj].deepHashCode
	#else
	infix inline func equals([PRIMITIVE]! array, [PRIMITIVE]! other) -> boolean = Arrays.equals(array, other)

	infix inline func hashCode([PRIMITIVE]! array) -> int = Arrays.hashCode(array)
	#end

	// toString

	infix func toString GENERIC([PRIMITIVE]! array) -> String
	{
		if (array == null) return 'null'

		let size = array!!.size
		if (size == 0) return '[]'

		let builder = new StringBuilder()
		append(array!!, size, builder)
		return builder.toString!!
	}

	infix func toString GENERIC([PRIMITIVE]! array, StringBuilder builder) -> void
	{
		if (array == null)
		{
			builder.append('null')
			return
		}

		let size = array!!.size
		if (size == 0)
		{
			builder.append('[]')
			return
		}

		append(array!!, size, builder)
	}

	private static func append GENERIC([PRIMITIVE] array, int size, StringBuilder builder) -> void
	{
		builder.append('[').append(array[0])
		for (i <- 1 ..< size) builder.append(", ").append(array[i])
		builder.append(']')
	}

	#if IS_OBJECT
	postfix func deepToString([Object!]! array) -> String
	{
		if (array == null) return 'null'

		let size = array!!.size
		if (size == 0) return '[]'

		let builder = new StringBuilder()
		deepAppend(array!!, size, builder)
		return builder.toString!!
	}

	infix func deepToString([Object!]! array, StringBuilder builder) -> void
	{
		if (array == null)
		{
			builder.append('null')
			return
		}

		let size = array!!.size
		if (size <= 0)
		{
			builder.append('[]')
			return
		}

		deepAppend(array!!, size, builder)
	}

	private static func deepAppend([Object!] array, int size, StringBuilder builder) -> void
	{
		builder.append('[')
		deepToString(array[0], builder)
		for (i <- 1 ..< size)
		{
			builder.append(', ')
			array[i].deepToString(builder)
		}
		builder.append(']')
	}

	postfix func deepToString(Object! obj) -> String
	{
		if (obj == null) return 'null'

		let objectClass = obj!!.dynamicClass
		if (!objectClass.isArray) return obj!!.toString

		#foreach PRIMITIVE_SPECS
		if (objectClass === class [PRIMITIVE])
		{
			return (obj as [PRIMITIVE]).toString
		}
		#end

		return (obj as [Object!]).deepToString
	}

	infix func deepToString(Object! obj, StringBuilder builder) -> void
	{
		if (obj == null)
		{
			builder.append('null')
			return
		}

		let objectClass = obj!!.dynamicClass
		if (!objectClass.isArray)
		{
			builder.append(obj)
			return
		}

		#foreach PRIMITIVE_SPECS
		if (objectClass === class [PRIMITIVE])
		{
			(obj as [PRIMITIVE]).toString(builder)
			return
		}
		#end

		(obj as [Object!]).deepToString(builder)
	}
	#end // IS_OBJECT
}
