// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.array

#if(HAS_RANGE_CLASS){import dyvil.collection.range.closed.#(TYPE_NAME)Range}

import dyvil.ref.#(TYPE_NAME)Ref
import dyvil.ref.array.#(TYPE_NAME)ArrayRef

import java.util.Arrays
import java.lang.reflect.Array

import static dyvil.reflect.Opcodes._

public abstract class #(TYPE_NAME)Array
{
	#import("Base.dgs")

	#define(REIFIED) {@Reified(Reified.Type.OBJECT_CLASS)}
	#if (IS_GENERIC) {
		#define(GENERIC) {<T>}
		#define(GENERIC_2) {<T, REIFIED U>}
		#define(GENERIC_REIFIED) {<REIFIED T>}
		#define(APPLY_T) {ObjectArray<T>}
		#define(APPLY_WITH_SIZE) {ObjectArray(size, of: array.elementType)}
	}
	#else {
		#define(T) {PRIMITIVE}
		#define(ERASURE) {PRIMITIVE}
		#define(GENERIC) {}
		#define(GENERIC_2) {<REIFIED U>}
		#define(GENERIC_REIFIED) {}
		#define(APPLY_T) {new [PRIMITIVE]}
		#define(APPLY_WITH_SIZE) {new [PRIMITIVE](size)}
	}

	private init() {} // no instances

	#if (IS_GENERIC) {
		public const EMPTY: [final ERASURE] = []
	}
	#else {
		public const EMPTY: [final T] = []
	}

	static inline func apply GENERIC_REIFIED() -> [T] = []

	#if (IS_GENERIC) {
		static inline func apply GENERIC_REIFIED(size: int) -> [T] = ObjectArray<T>(size, of: class T)

		@BytecodeName('ofType')
		static func apply GENERIC(size: int, of elementType: Class<T>) -> [T] = Array.newInstance(elementType, size) as [T]
	}
	#else {
		static inline func apply(size: int) -> [T] = new [T](size)
	}

	static inline func apply GENERIC(array: [T]) -> [T] = array.copy

	#if (HAS_RANGE_CLASS) {
		static func apply GENERIC(range: #(TYPE_NAME)Range) -> [T] = range.to#(TYPE_NAME)Array()
	}

	static func apply GENERIC_REIFIED(size: int, repeatedValue: T) -> [T]
	{
		let array = APPLY_T(size)
		for (i <- 0 ..< size) array[i] = repeatedValue
		return array
	}

	static func apply GENERIC_REIFIED(size: int, valueSupplier: () -> T) -> [T]
	{
		let array = APPLY_T(size)
		for (i <- 0 ..< size) array[i] = valueSupplier()
		return array
	}

	static func apply GENERIC_REIFIED(size: int, valueMapper: int -> T) -> [T]
	{
		let array = APPLY_T(size)
		for (i <- 0 ..< size) array[i] = valueMapper(i)
		return array
	}

	#if (IS_RANGEABLE) {
		@BytecodeName('rangeClosed')
		static func apply GENERIC(from: T, to: T) -> [T]
		{
			let array = APPLY_T((to - from + 1)#if (RANGE_CAST) { as int})
			var index = 0
			for (i <- from .. to) array[index++] = i
			return array
		}

		@BytecodeName('rangeOpen')
		static func range GENERIC(from: T, explicit toExclusive: T) -> [T]
		{
			let array = APPLY_T((toExclusive - from)#if (RANGE_CAST) { as int})
			var index = 0
			for (i <- from ..< toExclusive) array[index++] = from
			return array
		}
	}

	// Basic Array Operations

	@Intrinsic([ LOAD_0, ARRAYLENGTH ])
	postfix func size GENERIC(array: [T]) -> int = array.size

	@Intrinsic([ LOAD_0, ARRAYLENGTH, EQ0 ])
	postfix func isEmpty GENERIC(array: [T]) -> boolean = array.isEmpty

	@Intrinsic([ LOAD_0, LOAD_1, ARRAY_LOAD_INSN ])
	infix func subscript GENERIC(array: [T], index: int) -> T = array[index]

	@Mutating
	@Intrinsic([ LOAD_0, LOAD_1, LOAD_2, ARRAY_STORE_INSN ])
	infix func subscript_= GENERIC(array: [T], index: int, newValue: T) -> void = array[index] = newValue

	infix func subscript GENERIC(array: [T], range: Range<int>) -> [T]
	{
		let size = range.size
		let result = APPLY_WITH_SIZE
		System.arraycopy(array, range.first, result, 0, size)
		return result
	}

	@Mutating
	infix func subscript_= GENERIC(array: [T], range: Range<int>, newValues: [T]) -> void
		= System.arraycopy(newValues, 0, array, range.first, range.size)

	@Mutating
	infix func subscript_& GENERIC(array: [T], index: int) -> #(TYPE_NAME)Ref
		= new #(TYPE_NAME)ArrayRef(array, index)

	infix func forEach GENERIC(array: [T], action: T -> void) -> void
		= for (value <- array) action(value)

	#if (IS_GENERIC) {
		// Component Types

		postfix func elementType GENERIC(array: [T]) -> Class<T> = array.getClass().getComponentType() as Class<T>

		postfix func deepElementType GENERIC(array: [T]) -> Class<_>
		{
			var result: Class<_> = array.getClass()
			while (true)
			{
				let elementType = result.getComponentType()
				if (elementType == null)
				{
					break
				}
				result = elementType
			}
			return result
		}
	}

	// Operators

	@Intrinsic([], compilerCode: Intrinsic.ARRAY_SPREAD)
	postfix func `...` GENERIC(array: [T]) -> [T] = array

	#if (IS_GENERIC) {
		infix inline func == GENERIC(lhs: [T]!, rhs: [T]!) -> boolean = Arrays.deepEquals(lhs, rhs)

		infix inline func != GENERIC(lhs: [T]!, rhs: [T]!) -> boolean = !Arrays.deepEquals(lhs, rhs)
	}
	#else {
		infix inline func ==(lhs: [T]!, rhs: [T]!) -> boolean = Arrays.equals(lhs, rhs)

		infix inline func !=(lhs: [T]!, rhs: [T]!) -> boolean = !Arrays.equals(lhs, rhs)
	}

	infix func added GENERIC(array: [T], value: T) -> [T]
	{
		let size = array.size
		let result = APPLY_T(size + 1 #if (IS_GENERIC) {, of: array.elementType })
		System.arraycopy(array, 0, result, 0, size)
		result[size] = value
		return result
	}

	infix func union GENERIC(array: [T], with: [T]) -> [T]
	{
		let size1 = array.size
		let size2 = with.size
		let size = size1 + size2
		let result = APPLY_WITH_SIZE

		System.arraycopy(array, 0, result, 0, size1)
		System.arraycopy(with, 0, result, size1, size2)
		return result
	}

	infix func removed GENERIC(array: [T], value: T) -> [T]
	{
		var size = array.size

		// Calculate number of elements in new array
		for (element <- array) if (element == value) size--

		let result = APPLY_WITH_SIZE
		var index = 0

		for (element <- array) if (element != value) result[index++] = element
		return result
	}

	infix func difference GENERIC(array: [T], from: [T]) -> [T]
	{
		let size = array.size
		let result = APPLY_WITH_SIZE
		var index = 0

		for (v <- array) if (!from.contains(v)) result[index++] = v
		return result.trim(index)
	}

	infix func intersection GENERIC(array: [T], with: [T]) -> [T]
	{
		let size = array.size
		let result = APPLY_WITH_SIZE
		var index = 0

		for (v <- array) if (with.contains(v)) result[index++] = v
		return result.trim(index)
	}

	#if (IS_GENERIC /* Object Arrays do not need a specialized mapped method */ ) {}
	#else {
		infix func mappedTo#(TYPE_NAME)(array: [T], mapper: T -> T) -> [T]
		{
			let size = array.size
			let result = APPLY_T(size)
			for (i <- 0 ..< size) result[i] = mapper(array[i])
			return result
		}
	}

	@OverloadPriority
	infix func mapped GENERIC_2(array: [T], mapper: T -> U) -> [U]
	{
		let size = array.size
		let result = ObjectArray<U>(size)
		for (i <- 0 ..< size) result[i] = mapper(array[i])
		return result
	}

	#if (IS_GENERIC /* Object Arrays do not need a specialized flatMapped method */) {}
	#else {
		infix func flatMappedTo#(TYPE_NAME)(array: [T], mapper: T -> [T]) -> [T]
		{
			var size = 0
			var result = APPLY_T(array.size << 2)

			for (v <- array)
			{
				let inner = mapper(v)
				let newSize = inner.size

				if (size + newSize >= result.size)
				{
					result = result.copy((size + newSize) << 1)
				}

				System.arraycopy(inner, 0, result, size, newSize)
				size += newSize
			}

			return result.trim(size)
		}
	}

	@OverloadPriority
	infix func flatMapped GENERIC_2(array: [T], mapper: T -> Iterable<+U>) -> [U]
	{
		let list = new mutable.ArrayList<U>(array.size << 2)

		for (value <- array) list.addAll(mapper(value))
		return list.toArray<U>(class U)
	}

	infix func filtered GENERIC(array: [T], condition: T -> boolean) -> [T]
	{
		let size = array.size
		let result = APPLY_WITH_SIZE
		var index = 0

		for (v <- array) if (condition(v)) result[index++] = v
		return result.trim(index)
	}

	infix func sorted GENERIC(array: [T]) -> [T]
	{
		#if (IS_BOOLEAN) {
			let size = array.size
			let result = new [T](size)

			// Count the number of 'false' entries in the array
			var falseEntries = 0

			for (value <- array) if (!value) falseEntries++

			// Make the remaining elements of the result true
			for (i <- falseEntries ..< size) result[i] = true
			return result
		}
		#else {
			let result = array.copy
			Arrays.sort(result)
			return result
		}
	}

	// Search Operations

	infix inline func contains GENERIC(array: [T], value: T) -> boolean = array.indexOf(value, 0) >= 0

	infix inline func indexOf GENERIC(array: [T], value: T) -> int = array.indexOf(value, 0)

	infix func indexOf GENERIC(array: [T], value: T, startIndex: int) -> int
	{
		while (startIndex < array.size)
		{
			if (array[startIndex] == value) return startIndex
			startIndex++
		}
		return -1
	}

	infix func lastIndexOf GENERIC(array: [T], value: T) -> int = array.lastIndexOf(value, array.size - 1)

	infix func lastIndexOf GENERIC(array: [T], value: T, startIndex: int) -> int
	{
		while (startIndex >= 0)
		{
			if (array[startIndex] == value) return startIndex
			startIndex--
		}
		return -1
	}

	// Copying

	infix inline func copy GENERIC(array: [T]) -> [T] = (array as Object).clone() as [T]

	infix func copy GENERIC(array: [T], withSize size: int) -> [T]
	{
		let result = APPLY_WITH_SIZE
		System.arraycopy(array, 0, result, 0, Math.min(size, array.size))
		return result
	}

	infix func trim GENERIC(array: [T], toSize size: int) -> [T] = array.size <= size ? array : array.copy(size)

	#if (IS_OBJECT /* Object arrays cannot be boxed */) {}
	#else {
		infix func boxed(array: [T]) -> [WRAPPER]
		{
			let size = array.size
			let boxed = new [WRAPPER](size)

			for (i <- 0 ..< size) boxed[i] = array[i]
			return boxed
		}
	}

	implicit inline infix func asIterable GENERIC(array: [T]) -> Iterable<T> = array.toList

	implicit inline infix func asList GENERIC(array: [final T]) -> ImmutableList<T> = array.toList

	infix func toList GENERIC(array: [T]) -> ImmutableList<T> = new immutable.ArrayList<T>(#if (IS_OBJECT) {array} #else {array.boxed, trusted: true})

	// equals, hashCode and toString

	#if (IS_GENERIC) {
		inline infix func equals(array: [ERASURE]!, other: [ERASURE]!) -> boolean = Arrays.deepEquals(array, other)

		inline postfix func hashCode(array: [ERASURE]!) -> int = Arrays.deepHashCode(array)

		infix func arrayEquals(lhs: any!, rhs: any!) -> boolean = [lhs].equals([rhs])

		postfix func arrayHashCode(obj: any!) -> int = [obj].hashCode
	}
	#else {
		inline infix func equals(array: [T]!, other: [T]!) -> boolean = Arrays.equals(array, other)

		inline infix func hashCode(array: [T]!) -> int = Arrays.hashCode(array)
	}

	// toString

	infix func toString(array: [ERASURE]!) -> String
	{
		if let array = array
		{
			let size = array.size
			if (size == 0) return '[]'

			let builder = new StringBuilder
			append(array, size, builder)
			return builder.toString!!
		}
		else return 'null'
	}

	infix func toString(array: [ERASURE]!, builder: StringBuilder) -> void
	{
		if let array = array
		{
			let size = array.size
			if (size == 0)
			{
				builder.append('[]')
				return
			}

			append(array, size, builder)
		}
		else
		{
			builder.append('null')
		}
	}

	private static func append(array: [ERASURE], size: int, builder: StringBuilder) -> void
	{
		#if (IS_GENERIC) {
			builder.append('[')
			array[0].arrayToString(builder)
			for (i <- 1 ..< size)
			{
				builder.append(', ')
				array[i].arrayToString(builder)
			}
			builder.append(']')
		}
		#else {
			builder.append('[').append(array[0])
			for (i <- 1 ..< size) builder.append(', ').append(array[i])
			builder.append(']')
		}
	}

	#if (IS_GENERIC) {
		postfix func arrayToString(obj: ERASURE) -> String
		{
			if (obj == null) return 'null'

			let objectClass = obj!!.dynamicClass
			if (!objectClass.isArray) return obj!!.toString

			#for (spec <- PRIMITIVE_SPECS) {#import(spec)
				if (objectClass === class [PRIMITIVE]) return (obj as [PRIMITIVE]).toString
			}

			return (obj as [ERASURE]).toString
		}

		infix func arrayToString(obj: ERASURE, builder: StringBuilder) -> void
		{
			if (obj == null)
			{
				builder.append('null')
				return
			}

			let objectClass = obj!!.dynamicClass
			if (!objectClass.isArray)
			{
				builder.append(obj)
				return
			}

			#for (spec <- PRIMITIVE_SPECS) {
				#import(spec)
				if (objectClass === class [PRIMITIVE]) { (obj as [PRIMITIVE]).toString(builder); return }
			}

			(obj as [ERASURE]).toString(builder)
		}
	}
}
