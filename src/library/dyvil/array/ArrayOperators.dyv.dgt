// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.array

abstract class ArrayOperators
{
	private init()
	{
		// no instances
	}

	// Generic Object array operators

	inline infix func in <T>(value: T, array: [T]) -> boolean = array.contains(value)

	inline infix func ? <T>(lhs: [T], rhs: T) -> boolean = lhs.contains(rhs)

	inline infix func + <T>(lhs: [T], rhs: T) -> [T] = lhs.added(rhs)

	inline infix func + <T>(lhs: T, rhs: [T]) -> [T] = rhs.added(lhs)

	inline infix func ++ <T>(lhs: [T], rhs: [T]) -> [T] = lhs.union(rhs)

	inline infix func - <T>(lhs: [T], rhs: T) -> [T] = lhs.removed(rhs)

	inline infix func -- <T>(lhs: [T], rhs: [T]) -> [T] = lhs.difference(rhs)

	// Primitive array operators
	#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
		#let(PRIMITIVE = spec['PRIMITIVE'])

		// TYPE_NAME array operators

		inline infix func in(value: PRIMITIVE, array: [PRIMITIVE]) -> boolean = array.contains(value)

		inline infix func ? (lhs: [PRIMITIVE], rhs: PRIMITIVE) -> boolean = lhs.contains(rhs)

		inline infix func + (lhs: [PRIMITIVE], rhs: PRIMITIVE) -> [PRIMITIVE] = lhs.added(rhs)

		inline infix func + (lhs: PRIMITIVE, rhs: [PRIMITIVE]) -> [PRIMITIVE] = rhs.added(lhs)

		inline infix func ++ (lhs: [PRIMITIVE], rhs: [PRIMITIVE]) -> [PRIMITIVE] = lhs.union(rhs)

		inline infix func - (lhs: [PRIMITIVE], rhs: PRIMITIVE) -> [PRIMITIVE] = lhs.removed(rhs)

		inline infix func -- (lhs: [PRIMITIVE], rhs: [PRIMITIVE]) -> [PRIMITIVE] = lhs.difference(rhs)
	}
}
