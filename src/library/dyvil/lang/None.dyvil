package dyvil.lang;

import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import dyvil.lang.literal.NilConvertible;

@NilConvertible
public final object None implements Option
{	
	public static None apply() = instance
	
	public override Object !() = throw new NoSuchElementException("None");
	
	public override boolean ?() = false
	
	public override void ifPresent(Consumer consumer) {}
	
	public override Option filter(Predicate predicate) = this
	
	public override Option map(Function mapper) = this
	
	public override Option flatMap(Function mapper) = this
	
	public override Object orElse(Object other) = other
	
	public override Object orElse(Supplier other) = other.get
	
	public override String toString() = "None"
	
	public override boolean equals(Object obj) = obj == this
	
	public override int hashCode() = 0
}
