package dyvil.lang

using   dyvil.reflect.Opcodes._
import  dyvil.collection.range.specialized.DoubleRange

public abstract class DoubleExtensions
{
	private init() {}

	// Double Operators

	@Intrinsic([ LOAD_0 ])
	prefix func +(double value) -> double = value

	@Intrinsic([ LOAD_0, DNEG ])
	prefix func -(double value) -> double = -value

	@Intrinsic([ LOAD_0, LOAD_1, DCMPEQ ])
	infix func ==(double lhs, double rhs) -> boolean = lhs == rhs

	@Intrinsic([ LOAD_0, LOAD_1, DCMPNE ])
	infix func !=(double lhs, double rhs) -> boolean = lhs != rhs

	@Intrinsic([ LOAD_0, LOAD_1, DCMPLT ])
	infix func <(double lhs, double rhs) -> boolean = lhs < rhs

	@Intrinsic([ LOAD_0, LOAD_1, DCMPLE ])
	infix func <=(double lhs, double rhs) -> boolean = lhs <= rhs

	@Intrinsic([ LOAD_0, LOAD_1, DCMPGT ])
	infix func >(double lhs, double rhs) -> boolean = lhs > rhs

	@Intrinsic([ LOAD_0, LOAD_1, DCMPGE ])
	infix func >=(double lhs, double rhs) -> boolean = lhs >= rhs

	@Intrinsic([ LOAD_0, LOAD_1, DADD ])
	infix func +(double lhs, double rhs) -> double = lhs + rhs

	@Intrinsic([ LOAD_0, LOAD_1, DSUB ])
	infix func -(double lhs, double rhs) -> double = lhs - rhs

	@Intrinsic([ LOAD_0, LOAD_1, DMUL ])
	infix func *(double lhs, double rhs) -> double = lhs * rhs

	@Intrinsic([ LOAD_0, LOAD_1, INVOKESTATIC, 0, 1, 2], strings: [ "java/lang/Math", "pow", "(DD)D" ])
	infix func **(double lhs, double rhs) -> double = Math.pow(lhs, rhs)

	@Intrinsic([ LOAD_0, LOAD_1, DDIV ])
	infix func /(double lhs, double rhs) -> double = lhs / rhs

	@Intrinsic([ LOAD_0, LOAD_1, DREM ])
	infix func %(double lhs, double rhs) -> double = lhs % rhs

	infix func ..(double start, double end) -> DoubleRange = DoubleRange(start, to: end)

	infix func ..<(double start, double end) -> DoubleRange = DoubleRange(start, toExclusive: end)
}
