package dyvil.lang

using   dyvil.reflect.Opcodes._

public abstract class Booleans
{
	private init() {}

	// Boolean Operators

	@Intrinsic([], compilerCode: Intrinsic.BOOLEAN_NOT)
	prefix func !(boolean v) -> boolean = !v

	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	infix func ==(boolean lhs, boolean rhs) -> boolean = lhs == rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPNE ])
	infix func !=(boolean lhs, boolean rhs) -> boolean = lhs != rhs

	@Intrinsic([ LOAD_0, LOAD_1, IAND ])
	infix func &(boolean lhs, boolean rhs) -> boolean = lhs & rhs

	@Intrinsic([], compilerCode: Intrinsic.BOOLEAN_AND)
	infix func &&(lhs: boolean, rhs: boolean) -> boolean = lhs && rhs

	@Intrinsic([ LOAD_0, LOAD_1, IOR ])
	infix func |(boolean lhs, boolean rhs) -> boolean = lhs | rhs

	@Intrinsic([], compilerCode: Intrinsic.BOOLEAN_OR)
	infix func ||(lhs: boolean, rhs: boolean) -> boolean = lhs || rhs

	@Deprecated(replacements: [ "boolean.!=(boolean) -> boolean" ])
	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	infix func ^(boolean lhs, boolean rhs) -> boolean = lhs != rhs

	@Intrinsic([ LOAD_0, BNOT, LOAD_1, IOR ])
	infix func ==>(boolean lhs, boolean rhs) -> boolean = !lhs || rhs

	@Intrinsic([ LOAD_0, LOAD_1, BNOT, IOR ])
	infix func <==(boolean lhs, boolean rhs) -> boolean = lhs || !rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	infix func <=>(boolean lhs, boolean rhs) -> boolean = lhs == rhs
}
