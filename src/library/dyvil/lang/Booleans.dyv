package dyvil.lang

using   dyvil.reflect.Opcodes._

public abstract class Booleans
{
	private init() {}

	// Unary Operators

	@Intrinsic([], compilerCode: Intrinsic.BOOLEAN_NOT)
	prefix func !(rhs: boolean) -> boolean = !rhs

	// Relational Operators

	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	infix func ==(lhs: boolean, rhs: boolean) -> boolean = lhs == rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPNE ])
	infix func !=(lhs: boolean, rhs: boolean) -> boolean = lhs != rhs

	// Boolean Operators

	@Intrinsic([ LOAD_0, LOAD_1, IAND ])
	infix func &(lhs: boolean, rhs: boolean) -> boolean = lhs & rhs

	@Intrinsic([], compilerCode: Intrinsic.BOOLEAN_AND)
	infix func &&(lhs: boolean, rhs: boolean) -> boolean = lhs && rhs

	@Intrinsic([ LOAD_0, LOAD_1, IOR ])
	infix func |(lhs: boolean, rhs: boolean) -> boolean = lhs | rhs

	@Intrinsic([], compilerCode: Intrinsic.BOOLEAN_OR)
	infix func ||(lhs: boolean, rhs: boolean) -> boolean = lhs || rhs

	@Deprecated(replacements: [ "!= (boolean, boolean): boolean" ])
	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	infix func ^(lhs: boolean, rhs: boolean) -> boolean = lhs != rhs

	@Intrinsic([ LOAD_0, BNOT, LOAD_1, IOR ])
	infix func ==>(lhs: boolean, rhs: boolean) -> boolean = !lhs || rhs

	@Intrinsic([ LOAD_0, LOAD_1, BNOT, IOR ])
	infix func <==(lhs: boolean, rhs: boolean) -> boolean = lhs || !rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	infix func <=>(lhs: boolean, rhs: boolean) -> boolean = lhs == rhs
}
