package dyvil.lang

using   dyvil.reflect.Opcodes._
import  dyvil.collection.range.specialized.LongRange

public abstract class Longs
{
	private init() {}

	// Long Operators

	@Intrinsic([ LOAD_0 ])
	prefix func +(rhs: long) -> long = rhs

	@Intrinsic([ LOAD_0, LNEG ])
	prefix func -(rhs: long) -> long = -rhs

	@Intrinsic([ LOAD_0, LNOT ])
	prefix func ~(rhs: long) -> long = ~rhs

	@Intrinsic([ LOAD_0, LOAD_1, LCMPEQ ])
	infix func ==(lhs: long, rhs: long) -> boolean = lhs == rhs

	@Intrinsic([ LOAD_0, LOAD_1, LCMPNE ])
	infix func !=(lhs: long, rhs: long) -> boolean = lhs != rhs

	@Intrinsic([ LOAD_0, LOAD_1, LCMPLT ])
	infix func <(lhs: long, rhs: long) -> boolean = lhs < rhs

	@Intrinsic([ LOAD_0, LOAD_1, LCMPLE ])
	infix func <=(lhs: long, rhs: long) -> boolean = lhs <= rhs

	@Intrinsic([ LOAD_0, LOAD_1, LCMPGT ])
	infix func >(lhs: long, rhs: long) -> boolean = lhs > rhs

	@Intrinsic([ LOAD_0, LOAD_1, LCMPGE ])
	infix func >=(lhs: long, rhs: long) -> boolean = lhs >= rhs

	@Intrinsic([ LOAD_0, LOAD_1, LADD ])
	infix func +(lhs: long, rhs: long) -> long = lhs + rhs

	@Intrinsic([ LOAD_0, LOAD_1, LSUB ])
	infix func -(lhs: long, rhs: long) -> long = lhs - rhs

	@Intrinsic([ LOAD_0, LOAD_1, LMUL ])
	infix func *(lhs: long, rhs: long) -> long = lhs * rhs

	infix func **(lhs: long, rhs: int) -> long = dyvil.math.PowImpl.pow(lhs, rhs)

	@Intrinsic([ LOAD_0, L2D, LOAD_1, L2D, DDIV ])
	infix func /(lhs: long, rhs: long) -> double = lhs / rhs

	@Intrinsic([ LOAD_0, LOAD_1, LREM ])
	infix func %(lhs: long, rhs: long) -> long = lhs % rhs

	infix func /%(lhs: long, rhs: long) -> (long, long) = (lhs \ rhs, lhs % rhs)

	@Intrinsic([ LOAD_0, LOAD_1, LDIV ])
	infix func \(lhs: long, rhs: long) -> long = lhs \ rhs

	@Intrinsic([ LOAD_0, LOAD_1, LAND ])
	infix func &(lhs: long, rhs: long) -> long = lhs & rhs

	@Intrinsic([ LOAD_0, LOAD_1, LOR ])
	infix func |(lhs: long, rhs: long) -> long = lhs | rhs

	@Intrinsic([ LOAD_0, LOAD_1, LXOR ])
	infix func ^(lhs: long, rhs: long) -> long = lhs ^ rhs

	// Shift Operators

	@Intrinsic([ LOAD_0, LOAD_1, LSHL ])
	infix func <<(lhs: long, rhs: int) -> long = lhs << rhs

	@Intrinsic([ LOAD_0, LOAD_1, LSHR ])
	infix func >>(lhs: long, rhs: int) -> long = lhs >> rhs

	@Intrinsic([ LOAD_0, LOAD_1, LUSHR ])
	infix func >>>(lhs: long, rhs: int) -> long = lhs >>> rhs

	// Range Operators

	infix func ..(lhs: long, rhs: long) -> LongRange = LongRange(lhs, to: rhs)

	infix func ..<(lhs: long, rhs: long) -> LongRange = LongRange(lhs, toExclusive: rhs)
}
