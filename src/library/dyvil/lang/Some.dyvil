package dyvil.lang;

import java.util.Objects;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import dyvil.lang.literal.TupleConvertible;

@TupleConvertible
public final case class Some[+T](T value) implements Option[T]
{
	public override T !() = this.value
	
	public override boolean ?() = true
	
	public override void ifPresent(Consumer[_ >: T] consumer) = consumer.accept(this.value);
	
	public override Option[T] filter(Predicate[_ >: T] predicate) = if (predicate.test(this.value)) this else None;
	
	public override Option[U] map[U](Function[_ >: T, _ <: U] mapper) = new Some(mapper.apply(this.value));
	
	public override Option[U] flatMap[U](Function[_ >: T, Option[U]] mapper) = Objects.requireNonNull(mapper.apply(this.value));
	
	public override T orElse(T other) = this.value
	
	public override T orElse(Supplier[_ <: T] other) = this.value
}
