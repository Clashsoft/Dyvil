package dyvil.lang

import const dyvil.reflect.Opcodes._

final class Types
{
	private init() {}

	// Value to Type / Class Conversions

	postfix func staticClass<@Reified(.ANY_CLASS) type T: Object>(value: T) -> Class<T> = class T

	postfix func staticType<@Reified(.TYPE) type T: Object>(value: T) -> Type<T> = type T

	@Intrinsic([ LOAD_0, INVOKEVIRTUAL, 0, 1, 2 ], strings: [ "java/lang/Object", "getClass", "()Ljava/lang/Class;" ])
	postfix func dynamicClass<type T: Object>(value: T) -> Class<+T> = value.getClass as Class<+T>

	// Class Extensions

	@BytecodeName("arrayTypeOf")
	static func arrayType<@Reified(.ANY_CLASS) type T: any>() -> Class<[T]> = class<[T]>

	@OverloadPriority
	postfix func arrayType<type T: any>(componentType: Class<T>) -> Class<_>
	{
		let builder = new StringBuilder().append '['

		if (componentType.isPrimitive)
		{
			dyvil.reflect.types.PrimitiveType(componentType).appendSignature(builder)
		}
		else if (componentType.isArray)
		{
			builder.append(componentType.getName)
		}
		else
		{
			builder.append('L').append(componentType.getName).append(';')
		}

		return Class.forName(builder.toString, false, componentType.getClassLoader)
	}

	@BytecodeName("objectArrayType")
	postfix func arrayType<type T: Object>(componentType: Class<T>) -> Class<[T]>
	{
		let className = componentType.isArray ? "[\(componentType.getName)" : "[L\(componentType.getName);"
		return Class.forName(className, false, componentType.getClassLoader) as Class<[T]>
	}
}
