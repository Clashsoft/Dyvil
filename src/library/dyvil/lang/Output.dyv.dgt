// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.lang

import dyvil.util.AutoPrinter
import java.io.PrintStream

import const java.lang.System.out
import func dyvil.array.ObjectArray.deepToString

abstract class Output
{
	private init() {} // no instances

	// C++ style output

	public const ENDL: String = System.lineSeparator

	infix inline func <<(stream: PrintStream, value: any) -> PrintStream = stream.{ print value; $0 }

	// println functions

	static inline func println() -> void = out.println()

	// print functions

#foreach Base-Boolean.dgs, Base-Char.dgs, Base-Int.dgs, Base-Long.dgs, Base-Float.dgs, Base-Double.dgs
	static inline func print(value: PRIMITIVE) -> void = out.println(value)

#end
	static inline func print(closure: AutoPrinter.() -> void) -> void = closure(AutoPrinter)

	static inline func print(value: String) -> void = out.println(value)

	static inline func print(value: any!) -> void = out.println(value)

	static inline func print(value: any!, explicit terminator: String) -> void
	{
		out.print(value)
		out.print(terminator)
	}

#import Base.dgs
#foreach PRIMITIVE_SPECS
	static inline func print(array: [PRIMITIVE]) -> void = out.println(array.toString)

#end
	static inline func print(array: [Object!]) -> void = out.println(array.deepToString)

	// print(All) functions

#define DEFAULT_SEPARATOR ' '
#define DEFAULT_TERMINATOR ENDL

	@BytecodeName("printAll")
	static inline func print(values: Object! ...) -> void
	{
		print(values..., separator: DEFAULT_SEPARATOR, terminator: DEFAULT_TERMINATOR)
	}

	@BytecodeName("printAllWithSeparator")
	static inline func print(values: Object! ..., explicit separator: String) -> void
	{
		print(values..., separator: separator, terminator: DEFAULT_TERMINATOR)
	}

	@BytecodeName("printAllWithTerminator")
	static inline func print(values: Object! ..., explicit terminator: String) -> void
	{
		print(values..., separator: DEFAULT_SEPARATOR, terminator: terminator)
	}

	@BytecodeName("printAll")
	static func print(values: Object! ..., explicit separator: String, explicit terminator: String) -> void
	{
		if !values.isEmpty
		{
			out.print(values[0].deepToString)
			for i <- 1 ..< values.size
			{
				out.print(separator)
				out.print(values[i].deepToString)
			}
		}

		out.print(terminator)
	}
}
