// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.lang

import const java.lang.System.out
import func dyvil.array.ObjectArray.arrayToString

abstract class Output
{
	// =============== Contructors ===============

	private init() {} // no instances

	// =============== Methods ===============

	// --------------- println ---------------

	static func println() -> void inline = out.println()

	// --------------- print ---------------

	#for (spec <- LibraryGenConstants.BASIC_SPECS) {
		#let(PRIMITIVE = spec['PRIMITIVE'])

		static func print(value: PRIMITIVE) -> void inline = out.println(value)
	}

	static func print(value: String) -> void inline = out.println(value)

	static func print(value: any!) -> void inline = out.println(value)

	#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
		#let(PRIMITIVE = spec['PRIMITIVE'])

		static func print(array: [PRIMITIVE]) -> void inline = out.println(array.toString)
	}

	static func print(array: [Object!]) -> void inline = out.println(array.toString)

	static func print(value: any!, explicit terminator: String) inline -> void
	{
		out.print(value)
		out.print(terminator)
	}

	// --------------- print(All) ---------------

	@BytecodeName("printAll")
	static func print(values: any! ...) -> void
	{
		printAllImpl(values, ' ')
		println
	}

	@BytecodeName("printAllWithSeparator")
	static func print(values: any! ..., explicit separator: String) -> void
	{
		printAllImpl(values, separator)
		println
	}

	@BytecodeName("printAllWithTerminator")
	static func print(values: any! ..., explicit terminator: String) -> void
	{
		printAllImpl(values, ' ')
		print terminator
	}

	@BytecodeName("printAll")
	static func print(values: any! ..., explicit separator: String, explicit terminator: String) -> void
	{
		printAllImpl(values, separator)
		print terminator
	}

	private static func printAllImpl(values: [any!], separator: String) -> void = if !values.isEmpty
	{
		out.print(values[0].arrayToString)
		for i <- 1 ..< values.size
		{
			out.print(separator)
			out.print(values[i].arrayToString)
		}
	}
}
