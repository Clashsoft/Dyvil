package dyvil.lang

using   dyvil.reflect.Opcodes._
import  dyvil.collection.range.specialized.IntRange

public abstract class IntExtensions
{
	private init() {}

	// Int Operators

	@Intrinsic([ LOAD_0 ])
	prefix func +(int value) -> int = value

	@Intrinsic([ LOAD_0, INEG ])
	prefix func -(int value) -> int = -value

	@Intrinsic([ LOAD_0, INOT ])
    prefix func ~(int value) -> int = ~value

	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	infix func ==(int lhs, int rhs) -> boolean = lhs == rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPNE ])
	infix func !=(int lhs, int rhs) -> boolean = lhs != rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPLT ])
	infix func <(int lhs, int rhs) -> boolean = lhs < rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPLE ])
	infix func <=(int lhs, int rhs) -> boolean = lhs <= rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPGT ])
	infix func >(int lhs, int rhs) -> boolean = lhs > rhs

	@Intrinsic([ LOAD_0, LOAD_1, ICMPGE ])
	infix func >=(int lhs, int rhs) -> boolean = lhs >= rhs

	@Intrinsic([ LOAD_0, LOAD_1, IADD ])
	infix func +(int lhs, int rhs) -> int = lhs + rhs

	@Intrinsic([ LOAD_0, LOAD_1, ISUB ])
	infix func -(int lhs, int rhs) -> int = lhs - rhs

	@Intrinsic([ LOAD_0, LOAD_1, IMUL ])
	infix func *(int lhs, int rhs) -> int = lhs * rhs

	infix func **(int lhs, int rhs) -> long = dyvil.math.PowImpl.pow(lhs, rhs)

	@Intrinsic([ LOAD_0, I2F, LOAD_1, I2F, FDIV ])
	infix func /(int lhs, int rhs) -> float = lhs / rhs

	@Intrinsic([ LOAD_0, LOAD_1, IREM ])
	infix func %(int lhs, int rhs) -> int = lhs % rhs

	@Intrinsic([ LOAD_0, LOAD_1, IDIV ])
	infix func \(int lhs, int rhs) -> int = lhs \ rhs

	@Intrinsic([ LOAD_0, LOAD_1, IAND ])
	infix func &(int lhs, int rhs) -> int = lhs & rhs

	@Intrinsic([ LOAD_0, LOAD_1, IOR ])
	infix func |(int lhs, int rhs) -> int = lhs | rhs

	@Intrinsic([ LOAD_0, LOAD_1, IXOR ])
	infix func ^(int lhs, int rhs) -> int = lhs ^ rhs

	@Intrinsic([ LOAD_0, LOAD_1, ISHL ])
	infix func <<(int lhs, int rhs) -> int = lhs << rhs

	@Intrinsic([ LOAD_0, LOAD_1, ISHR ])
	infix func >>(int lhs, int rhs) -> int = lhs >> rhs

	@Intrinsic([ LOAD_0, LOAD_1, IUSHR ])
	infix func >>>(int lhs, int rhs) -> int = lhs >>> rhs

	infix func ..(int start, int end) -> IntRange = IntRange(start, to: end)

	infix func ..<(int start, int end) -> IntRange = IntRange(start, toExclusive: end)
}
