package dyvil.lang

abstract class LiteralConvertible
{
	private init() {}

	// Primitive Literals
	@interface FromBoolean (let methodName: String = "apply")
	@interface FromChar    (let methodName: String = "apply")
	@interface FromInt     (let methodName: String = "apply")
	@interface FromLong    (let methodName: String = "apply")
	@interface FromFloat   (let methodName: String = "apply")
	@interface FromDouble  (let methodName: String = "apply")

	// String Literals
	@interface FromString              (let methodName: String = "apply")
	@interface FromStringInterpolation (let methodName: String = "apply")

	// Compound Literals
	@interface FromColonOperator (let methodName: String = "apply")
	@interface FromTuple         (let methodName: String = "apply")
	@interface FromArray         (let methodName: String = "apply")
	@interface FromMap           (let methodName: String = "apply")

	// Special Literals
	@interface FromClass (let methodName: String = "apply")
	@interface FromType  (let methodName: String = "apply")
}
