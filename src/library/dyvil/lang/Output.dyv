package dyvil.lang

import dyvil.util.AutoPrinter
import java.io.PrintStream

import const java.lang.System.out

public abstract class Output
{
	private init()
	{
		// no instances
	}

	// C++ style output

	public static final String ENDL = System.lineSeparator

	public infix inline func <<(PrintStream stream, any value): PrintStream = stream.{ print value; $0 }

	// print functions

	public static inline func println(AutoPrinter.() -> void closure): void = closure(AutoPrinter)

	public static inline void println() = out.println()

	public static inline void println(boolean v) = out.println(v)

	// byte and short specializations are omitted

	public static inline void println(char v) = out.println(v)

	public static inline void println(int v) = out.println(v)

	public static inline void println(long v) = out.println(v)

	public static inline void println(float v) = out.println(v)

	public static inline void println(double v) = out.println(v)

	public static inline void println(String s) = out.println(s)

	public static inline void println(Object o) = out.println(o)

	public static inline void println(boolean... v) = out.println(v.toString)

	public static inline void println(byte... v) = out.println(v.toString)

	public static inline void println(short... v) = out.println(v.toString)

	public static inline void println(char... v) = out.println(v.toString)

	public static inline void println(int... v) = out.println(v.toString)

	public static inline void println(long... v) = out.println(v.toString)

	public static inline void println(float... v) = out.println(v.toString)

	public static inline void println(double... v) = out.println(v.toString)

	public static inline void println(Object... v) = out.println(v.toString)
}
