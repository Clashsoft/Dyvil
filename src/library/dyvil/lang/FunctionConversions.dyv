package dyvil.lang

import	java.util.concurrent.Callable

using	dyvil.reflect.Opcodes._

public final class FunctionConversions
{
	private init() {}

	// Functions

	@Intrinsic([ LOAD_0 ])
	public static => R function[R](=> R f) = f

	@Intrinsic([ LOAD_0 ])
	public static P1 => R function1[P1, R](P1 => R f) = f

	@Intrinsic([ LOAD_0 ])
	public static (P1, P2) => R function2[P1, P2, R]((P1, P2) => R f) = f

	@Intrinsic([ LOAD_0 ])
	public static (P1, P2, P3) => R function3[P1, P2, P3, R]((P1, P2, P3) => R f) = f

	// Function Conversions

	public static Runnable runnable(=> void f) = => f()

	public static Callable[T] callable[T](=> T f) = => f()

	public static Thread thread(=> void f) = new Thread() {
		public override void run() = f()
	}
}
