// GEN_NOTICE
// Timestamp: TIME_STAMP
package dyvil.lang

import dyvil.reflect.Opcodes.LOAD_0

public abstract class References
{
	private init() {}

	@Intrinsic([ LOAD_0 ])
	static func & <T>(rhs: T^) -> T* = rhs

	// Primitive Reference Operators
	#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
		#let(PRIMITIVE = spec['PRIMITIVE'])

		@Intrinsic([ LOAD_0 ])
		static func &(rhs: PRIMITIVE^) -> PRIMITIVE* = rhs
	}

	// Primitive Increment Operators
	#for (spec <- LibraryGenConstants.PRIMITIVE_SPECS) {
		#let(PRIMITIVE = spec['PRIMITIVE'])
		#if (PRIMITIVE != 'boolean') {
			#let(CAST = Boolean.parseBoolean(spec['IS_SUBRANGE']) ? "as " ++ PRIMITIVE : "")

			// PRIMITIVE

			@Intrinsic([], compilerCode: Intrinsic.PRE_INCREMENT)
			@BytecodeName("incPre")
			prefix func ++(rhs: PRIMITIVE^) -> PRIMITIVE { let v = (*rhs + 1) CAST; *rhs = v; v }

			@Intrinsic([], compilerCode: Intrinsic.POST_INCREMENT)
			@BytecodeName("incPost")
			postfix func ++(rhs: PRIMITIVE^) -> PRIMITIVE { let v = *rhs; *rhs = (v + 1) CAST; v }

			@Intrinsic([], compilerCode: Intrinsic.PRE_DECREMENT)
			@BytecodeName("decPre")
			prefix func --(rhs: PRIMITIVE^) -> PRIMITIVE { let v = (*rhs - 1) CAST; *rhs = v; v }

			@Intrinsic([], compilerCode: Intrinsic.POST_DECREMENT)
			@BytecodeName("decPost")
			postfix func --(rhs: PRIMITIVE^) -> PRIMITIVE { let v = *rhs; *rhs = (v - 1) CAST; v }
		}
	}
}
