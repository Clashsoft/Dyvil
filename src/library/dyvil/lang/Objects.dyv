package dyvil.lang

import const dyvil.reflect.Opcodes._

final class Objects
{
	private init() {}

	// Class and Type conversions and utilities

	@Intrinsic([ LOAD_0 ])
	static func cast<T>(value: any) -> T = value as T

	@Intrinsic([ LOAD_0 ])
	static func convert<T>(value: T) -> T = value

	// Useful globals

	inline static func run<R>(f: -> R) -> R = f()

	inline infix func run<T, R>(self: T, f: T.() -> R) = f(self)

	inline infix func use<T>(self: T, f: T.() -> void) -> T { f self; self }

	inline static func with<T, R>(receiver: T, f: T -> R) -> R = f(receiver)

	@Intrinsic([ LOAD_0 ])
	static func implicitly<type T>(implicit value: T) -> T = value

	// Errors and Stubs

	inline static func error(message: String) -> none = throw new Error(message)

	inline static func notImplemented() -> none = throw new UnsupportedOperationException("Not Implemented!")

	inline static func unsupported() -> none = throw new UnsupportedOperationException

	// Structural Equality (equals)

	static func equals(lhs: any!, rhs: any!) -> boolean = lhs === rhs || lhs !== null && lhs!!.equals(rhs)

	@Intrinsic([ LOAD_0, LOAD_1, INVOKEVIRTUAL, 0, 1, 2 ]
	  strings: [ "java/lang/Object", "equals", "(Ljava/lang/Object;)Z" ])
	infix func == <type T: any>(lhs: T, rhs: T?) -> boolean = lhs.equals(rhs)

	// Structural Inequality (!equals)

	@Intrinsic([ LOAD_0, LOAD_1, INVOKEVIRTUAL, 0, 1, 2, BNOT ]
	  strings: [ "java/lang/Object", "equals", "(Ljava/lang/Object;)Z" ])
	infix func != <type T: any>(lhs: T, rhs: T?) -> boolean = !lhs.equals(rhs)

	// Reference Equality

	@Intrinsic([ LOAD_0, LOAD_1, ACMPEQ ])
	infix func ===(lhs: any!, rhs: any!) -> boolean = lhs === rhs

	@OverloadPriority
	@JavaName("$eq$eq$eq_null")
	@Intrinsic([ LOAD_0, IS_NULL ])
	infix func ===(lhs: any!, rhs: null) -> boolean = lhs === null

	@OverloadPriority
	@JavaName("null_$eq$eq$eq")
	@Intrinsic([ LOAD_1, IS_NULL ])
	infix func ===(lhs: null, rhs: any!) -> boolean = rhs === null

	// Reference Inequality

	@Intrinsic([ LOAD_0, LOAD_1, ACMPNE ])
	infix func !==(lhs: any!, rhs: any!) -> boolean = lhs !== rhs

	@OverloadPriority
	@JavaName("$bang$eq$eq_null")
	@Intrinsic([ LOAD_0, IS_NONNULL ])
	infix func !==(lhs: any!, rhs: null) -> boolean = lhs !== null

	@OverloadPriority
	@JavaName("null_$bang$eq$eq")
	@Intrinsic([ LOAD_1, IS_NONNULL ])
	infix func !==(lhs: null, rhs: any!) -> boolean = rhs !== null

	// Comparable

	infix inline func < <T>(lhs: Comparable<T>, rhs: T) -> boolean = lhs.compareTo(rhs) < 0

	infix inline func <= <T>(lhs: Comparable<T>, rhs: T) -> boolean = lhs.compareTo(rhs) <= 0

	infix inline func > <T>(lhs: Comparable<T>, rhs: T) -> boolean = lhs.compareTo(rhs) > 0

	infix inline func >= <T>(lhs: Comparable<T>, rhs: T) -> boolean = lhs.compareTo(rhs) >= 0
}
