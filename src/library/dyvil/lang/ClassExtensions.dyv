package dyvil.lang

import dyvilx.LangModel
import const dyvil.reflect.Opcodes._
import const dyvil.annotation.Reified.Type._

public abstract class ClassExtensions
{
	private init()
	{
		// no instances
	}

	// Value to Type / Class Conversions

	public postfix func staticClass<@Reified(ANY_CLASS) T>(T value): Class<T> = class T

	public postfix func staticType<@Reified(TYPE) T>(T value): Type<T> = type T

	@Intrinsic([ LOAD_0, INVOKEVIRTUAL, 0, 1, 2 ]
	  strings: [ "java/lang/Object", "getClass", "()Ljava/lang/Class;" ])
	public postfix func dynamicClass<T>(T value): Class<+T> = value.getClass as Class<+T>

	// Class Extensions

	public static func arrayType<@Reified(OBJECT_CLASS) T>(): Class<[T]> = arrayType<T>(class T)

	@BytecodeName("arrayTypeOf")
	public postfix func arrayType<T>(Class<T> componentType): Class<_>
	{
		let builder = new StringBuilder().append '['

		if (componentType.isPrimitive)
		{
			dyvilx.lang.model.`type`.PrimitiveType(componentType).appendSignature(builder)
		}
		else if (componentType.isArray)
		{
			builder.append(componentType.getName)
		}
		else
		{
			builder.append('L').append(componentType.getName).append(';')
		}

		return Class.forName(builder.toString, false, componentType.getClassLoader)
	}
}
