package dyvil.lang

using   dyvil.reflect.Opcodes._
import  dyvil.collection.range.FloatRange

public abstract class FloatExtensions
{
	private init() {}

	// Float Operators

	@Intrinsic([ LOAD_0 ])
	public prefix func +(float value): float = value

	@Intrinsic([ LOAD_0, FNEG ])
	public prefix func -(float value): float = -value

	@Intrinsic([ LOAD_0, LOAD_1, FCMPEQ ])
	public infix func ==(float v1, float v2): boolean = v1 == v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPNE ])
	public infix func !=(float v1, float v2): boolean = v1 != v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPLT ])
	public infix func <(float v1, float v2): boolean = v1 < v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPLE ])
	public infix func <=(float v1, float v2): boolean = v1 <= v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPGT ])
	public infix func >(float v1, float v2): boolean = v1 > v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPGE ])
	public infix func >=(float v1, float v2): boolean = v1 >= v2

	@Intrinsic([ LOAD_0, LOAD_1, FADD ])
	public infix func +(float v1, float v2): float = v1 + v2

	@Intrinsic([ LOAD_0, LOAD_1, FSUB ])
	public infix func -(float v1, float v2): float = v1 - v2

	@Intrinsic([ LOAD_0, LOAD_1, FMUL ])
	public infix func *(float v1, float v2): float = v1 * v2

	@Intrinsic([ LOAD_0, F2D, LOAD_1, F2D, INVOKESTATIC, 0, 1, 2, D2F], strings: [ "java/lang/Math", "pow", "(DD)D" ])
	public infix func **(float v1, float v2): double = Math.pow(v1, v2)

	@Intrinsic([ LOAD_0, LOAD_1, FDIV ])
	public infix func /(float v1, float v2): float = v1 / v2

	@Intrinsic([ LOAD_0, LOAD_1, FREM ])
	public infix func %(float v1, float v2): float = v1 % v2

	public infix func ..(float start, float end): FloatRange = FloatRange(start, to: end)

	public infix func ..<(float start, float end): FloatRange = FloatRange(start, toExclusive: end)
}
