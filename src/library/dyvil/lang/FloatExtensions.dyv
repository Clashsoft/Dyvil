package dyvil.lang

using   dyvil.reflect.Opcodes._
import  dyvil.collection.range.specialized.FloatRange

public abstract class FloatExtensions
{
	private init() {}

	// Float Operators

	@Intrinsic([ LOAD_0 ])
	prefix func +(float value) -> float = value

	@Intrinsic([ LOAD_0, FNEG ])
	prefix func -(float value) -> float = -value

	@Intrinsic([ LOAD_0, LOAD_1, FCMPEQ ])
	infix func ==(float lhs, float rhs) -> boolean = lhs == rhs

	@Intrinsic([ LOAD_0, LOAD_1, FCMPNE ])
	infix func !=(float lhs, float rhs) -> boolean = lhs != rhs

	@Intrinsic([ LOAD_0, LOAD_1, FCMPLT ])
	infix func <(float lhs, float rhs) -> boolean = lhs < rhs

	@Intrinsic([ LOAD_0, LOAD_1, FCMPLE ])
	infix func <=(float lhs, float rhs) -> boolean = lhs <= rhs

	@Intrinsic([ LOAD_0, LOAD_1, FCMPGT ])
	infix func >(float lhs, float rhs) -> boolean = lhs > rhs

	@Intrinsic([ LOAD_0, LOAD_1, FCMPGE ])
	infix func >=(float lhs, float rhs) -> boolean = lhs >= rhs

	@Intrinsic([ LOAD_0, LOAD_1, FADD ])
	infix func +(float lhs, float rhs) -> float = lhs + rhs

	@Intrinsic([ LOAD_0, LOAD_1, FSUB ])
	infix func -(float lhs, float rhs) -> float = lhs - rhs

	@Intrinsic([ LOAD_0, LOAD_1, FMUL ])
	infix func *(float lhs, float rhs) -> float = lhs * rhs

	@Intrinsic([ LOAD_0, F2D, LOAD_1, F2D, INVOKESTATIC, 0, 1, 2, D2F], strings: [ "java/lang/Math", "pow", "(DD)D" ])
	infix func **(float lhs, float rhs) -> double = Math.pow(lhs, rhs)

	@Intrinsic([ LOAD_0, LOAD_1, FDIV ])
	infix func /(float lhs, float rhs) -> float = lhs / rhs

	@Intrinsic([ LOAD_0, LOAD_1, FREM ])
	infix func %(float lhs, float rhs) -> float = lhs % rhs

	infix func ..(float start, float end) -> FloatRange = FloatRange(start, to: end)

	infix func ..<(float start, float end) -> FloatRange = FloatRange(start, toExclusive: end)
}
