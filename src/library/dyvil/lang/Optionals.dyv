package dyvil.lang

import const dyvil.reflect.Opcodes._

final class Optionals
{
	private init() {} // no instances

	// Wrapping

	@Intrinsic([ LOAD_0 ])
	static func Optional<T>(value: T) -> T? = value

	// Chaining

	@Intrinsic([], compilerCode: Intrinsic.OPTIONAL_CHAIN)
	postfix func ? <T>(lhs: T?) -> T = lhs!!

	// Unwrapping

	/*
	 * The Optional Unwrap Operator
	 *
	 * Attempts to unwrap an optional value. If the given parameter has the value `null` at runtime, a
	 * `NullPointerException` is thrown.
	 */
	@Intrinsic([], compilerCode: Intrinsic.OPTIONAL_UNWRAP)
	postfix func ! <T>(lhs: T?) -> T = lhs!

	/**
	 * Checks if the given optional value is null and throws a NullPointerException in that case.
	 */
	@Intrinsic([ LOAD_0, INVOKEVIRTUAL, 0, 1, 2, POP ]
	  strings: [ "java/lang/Object", "getClass", "()Ljava/lang/Class;" ])
	static func unwrapNullCheck<T>(optional: T?) -> void { optional!!.getClass }

	/**
	 * The Unsafe Unwrap Operator
	 *
	 * See `unsafeUnwrap` for details
	 */
	@Intrinsic([], compilerCode: Intrinsic.FORCE_UNWRAP)
	postfix func !! <T>(lhs: T?) -> T = unsafeUnwrap<T>(lhs)

	/**
	 * Unwraps an optional value in an unsafe manner, i.e. without a null check. Use this only if you are sure that
	 * parameter is never actually null.
	 */
	@Intrinsic([ LOAD_0 ])
	postfix func unsafeUnwrap<T>(optional: T?) -> T = optional!!

	/**
	 * Returns the `null` value, but with the possibly non-null type `T`. This is an unsafe operation that should
	 * only be used for non-null fields that are guaranteed to be initialized in a constructor, initializer block or,
	 * for static fields, in a static initializer block.
	 */
	@Intrinsic([ ACONST_NULL ])
	static func unsafeInit<T>() -> T = unsafeInit<T>

	// Nullable Coalescing

	/**
	 * The Nullable Coalescing Operator
	 *
	 * Returns the left-hand argument if it is not `null` at runtime, and the right-hand argument otherwise.
	 */
	@Intrinsic([], compilerCode: Intrinsic.NULL_COALESCING)
	infix func ?? <T, U> (lhs: T?, rhs: U) -> T|U = lhs ?? rhs

	// Hash Code

	postfix func hashCode<T: Object>(optional: T?) -> int = optional?.hashCode ?? 0
}
