package dyvil.lang

import const dyvil.reflect.Opcodes._

final class Optionals
{
	private init() {} // no instances

	@Intrinsic([ LOAD_0 ])
	static func Optional<type T: any>(value: T) -> T? = value

	/**
	 * Returns the `null` value, but with the possibly non-null type `T`. This is an unsafe operation that should
	 * only be used for non-null fields that are guaranteed to be initialized in a constructor, initializer block or,
	 * for static fields, in a static initializer block.
	 */
	@Intrinsic([ ACONST_NULL ])
	static func unsafeInit<type T: Object>() -> T = unsafeInit<T>

	/**
	 * The Optional Chain Operator
	 */
	@Intrinsic([], compilerCode: Intrinsic.OPTIONAL_CHAIN)
	postfix func ? <type T: any>(lhs: T?) -> T = lhs!!

	@OverloadPriority(-1)
	@Deprecated('The optional chain operator should not be used with a non-optional left-hand operand')
	@JavaName('$qmark_1')
	@Intrinsic([ LOAD_0 ])
	postfix func ? <type T: any>(lhs: T) -> T = lhs

	/*
	 * The Optional Unwrap Operator
	 *
	 * Attempts to unwrap an optional value. If the given parameter has the value `null` at runtime, a
	 * `NullPointerException` is thrown.
	 */
	@Intrinsic([], compilerCode: Intrinsic.OPTIONAL_UNWRAP)
	postfix func ! <type T: any>(lhs: T?) -> T = lhs!

	@OverloadPriority(-1)
	@Deprecated('The optional unwrap operator should not be used with a non-optional left-hand operand')
	@JavaName('$bang_1')
	@Intrinsic([ LOAD_0 ])
	postfix func ! <type T: any>(lhs: T) -> T = lhs

	/**
	 * The Unsafe Unwrap Operator
	 *
	 * Unwraps an optional value in an unsafe manner, i.e. without a null check. Use this only if you are sure that
	 * parameter is never actually null.
	 */
	@Intrinsic([], compilerCode: Intrinsic.FORCE_UNWRAP)
	postfix func !! <type T: any>(lhs: T?) -> T = lhs!!

	@OverloadPriority(-1)
	@Deprecated('The optional force unwrap operator should not be used with a non-optional left-hand operand')
	@JavaName('$bang$bang_1')
	@Intrinsic([ LOAD_0 ])
	postfix func !! <type T: any>(lhs: T) -> T = lhs

	/**
	 * The Null Coalescing Operator
	 *
	 * Returns the left-hand argument if it is not `null` at runtime, and the right-hand argument otherwise.
	 */
	@Intrinsic([], compilerCode: Intrinsic.NULL_COALESCING)
	infix func ?? <type T: any, type U>(lhs: T?, rhs: U) -> T|U = lhs ?? rhs

	@OverloadPriority(-1)
	@Deprecated('The null coalescing operator should not be used with a non-optional left-hand operand')
	@JavaName('$qmark$qmark_1')
	@Intrinsic([ LOAD_0 ])
	infix func ?? <type T: any, type U>(lhs: T, rhs: U) -> T = lhs

	// --------------- Equality ---------------

	@Intrinsic([ LOAD_0, LOAD_1, INVOKESTATIC, 0, 1, 2 ]
	  strings: [ "dyvil/lang/Objects", "equals", "(Ljava/lang/Object;Ljava/lang/Object;)Z" ])
	infix func == <type T: any>(lhs: T?, rhs: T?) -> boolean = equals(lhs, rhs)

	@Intrinsic([ LOAD_0, LOAD_1, INVOKESTATIC, 0, 1, 2, BNOT ]
	  strings: [ "dyvil/lang/Objects", "equals", "(Ljava/lang/Object;Ljava/lang/Object;)Z" ])
	infix func != <type T: any>(lhs: T?, rhs: T?) -> boolean = !equals(lhs, rhs)

	// Equality with null operands

	@OverloadPriority
	@JavaName("$eq$eq_null")
	@Intrinsic([ LOAD_0, IS_NULL ])
	infix func ==(lhs: any!, rhs: null) -> boolean = lhs == null

	@OverloadPriority
	@JavaName("null_$eq$eq")
	@Intrinsic([ LOAD_1, IS_NULL ])
	infix func ==(lhs: null, rhs: any!) -> boolean = rhs == null

	@OverloadPriority
	@JavaName("$bang$eq_null")
	@Intrinsic([ LOAD_0, IS_NONNULL ])
	infix func !=(lhs: any!, rhs: null) -> boolean = lhs != null

	@OverloadPriority
	@JavaName("null_$bang$eq")
	@Intrinsic([ LOAD_1, IS_NONNULL ])
	infix func !=(lhs: null, rhs: any!) -> boolean = rhs != null

	// --------------- Hash Code ---------------

	postfix func hashCode<type T: any>(optional: T?) -> int = optional?.hashCode ?? 0
}
