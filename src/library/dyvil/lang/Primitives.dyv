package dyvil.lang

using	dyvil.reflect.Opcodes._

public final class Primitives
{
	private static final [int] LOAD_CALL = [ LOAD_0, INVOKESTATIC, 0, 1, 2 ]
	
	// Wrapper and Unwrapper Methods

	@Intrinsic(value: [ INVOKESTATIC, 0, 1, 2 ], strings : [ "dyvil/lang/Void", "apply", "()Ldyvil/lang/Void;" ])
	public static Void Void() = Void()

	@Intrinsic([ /* NOOP */ ])
	public static void toVoid(Void value) = ()
	
	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;" ])
	public static Boolean Boolean(boolean value) = Boolean(value)

	public static boolean toBoolean(Boolean value) = if (value == null) false else value.booleanValue

	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Byte", "valueOf", "(B)Ljava/lang/Byte;" ])
    public static Byte Byte(byte value) = Byte(value)

	public static byte toByte(Byte value) = if (value == null) 0 else value.byteValue

	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Short", "valueOf", "(S)Ljava/lang/Short;" ])
	public static Short Short(short value) = Short(value)

	public static short toShort(Short value) = if (value == null) 0 else value.shortValue

	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Character", "valueOf", "(C)Ljava/lang/Character;" ])
	public static Char Char(char value) = Char(value)

	public static char toChar(Char value) = if (value == null) 0 else value.charValue

	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Integer", "valueOf", "(I)Ljava/lang/Integer;" ])
	public static Int Int(int value) = Int(value)

	public static int toInt(Int value) = if (value == null) 0 else value.intValue

	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Long", "valueOf", "(J)Ljava/lang/Long;" ])
	public static Long Long(long value) = Long(value)

	public static long toLong(Long value) = if (value == null) 0 else value.longValue
	
	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Float", "valueOf", "(F)Ljava/lang/Float;" ])
	public static Float Float(float value) = Float(value)

	public static float toFloat(Float value) = if (value == null) 0 else value.floatValue

	@Intrinsic(value: LOAD_CALL, strings : [ "java/lang/Double", "valueOf", "(D)Ljava/lang/Double;" ])
	public static Double Double(double value) = Double(value)

	public static double toDouble(Double value) = if (value == null) 0 else value.doubleValue
	
	// Boolean Operators
	
	@Intrinsic([ LOAD_0, BNOT ])
	public static boolean operator !(boolean v) = !v
	
	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	public infix boolean operator ==(boolean v1, boolean v2) = v1 == v2
	
	@Intrinsic([ LOAD_0, LOAD_1, ICMPNE ])
	public infix boolean operator !=(boolean v1, boolean v2) = v1 != v2
	
	@Intrinsic([ LOAD_0, LOAD_1, IAND ])
	public infix boolean operator &(boolean v1, boolean v2) = v1 && v2
	
	@Intrinsic([ LOAD_0, LOAD_1, IOR ])
	public infix boolean operator |(boolean v1, boolean v2) = v1 || v2
	
	@Intrinsic([ LOAD_0, LOAD_1, IXOR ])
	public infix boolean operator ^(boolean v1, boolean v2) = v1 ^ v2
	
	@Intrinsic([ LOAD_0, BNOT, LOAD_1, IOR ])
	public infix boolean operator ==>(boolean v1, boolean v2) = !v1 || v2
	
	@Intrinsic([ LOAD_0, LOAD_1, BNOT, IOR ])
	public infix boolean operator <==(boolean v1, boolean v2) = v1 || !v2
	
	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	public infix boolean operator <=>(boolean v1, boolean v2) = v1 == v2

	// Boolean Methods
	
	public infix int compareTo(boolean b1, boolean b2) = if (b1 == b2) 0 else if (b1) 1 else -1

	public postfix String toString(boolean value) = if (value) "true" else "false"

	public postfix int hashCode(boolean value) = if (value) 1231 else 1237

	public infix boolean equals(boolean b1, boolean b2) = b1 == b2

	// Int Operators

	@Intrinsic([ LOAD_0, INEG ])
	public static int operator -(int value) = -value

	@Intrinsic([ LOAD_0, INOT ])
    public static int operator ~(int value) = ~value

	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	public infix boolean operator ==(int v1, int v2) = v1 == v2

	@Intrinsic([ LOAD_0, LOAD_1, ICMPNE ])
	public infix boolean operator !=(int v1, int v2) = v1 != v2

	@Intrinsic([ LOAD_0, LOAD_1, ICMPLT ])
	public infix boolean operator <(int v1, int v2) = v1 < v2

	@Intrinsic([ LOAD_0, LOAD_1, ICMPLE ])
	public infix boolean operator <=(int v1, int v2) = v1 <= v2

	@Intrinsic([ LOAD_0, LOAD_1, ICMPGT ])
	public infix boolean operator >(int v1, int v2) = v1 > v2

	@Intrinsic([ LOAD_0, LOAD_1, ICMPGE ])
	public infix boolean operator >=(int v1, int v2) = v1 >= v2

	@Intrinsic([ LOAD_0, LOAD_1, IADD ])
	public infix int operator +(int v1, int v2) = v1 + v2

	@Intrinsic([ LOAD_0, LOAD_1, ISUB ])
	public infix int operator -(int v1, int v2) = v1 - v2

	@Intrinsic([ LOAD_0, LOAD_1, IMUL ])
	public infix int operator *(int v1, int v2) = v1 * v2

	@Intrinsic([ LOAD_0, I2F, LOAD_1, I2F, FDIV ])
	public infix float operator /(int v1, int v2) = v1 / v2

	@Intrinsic([ LOAD_0, LOAD_1, IREM ])
	public infix int operator %(int v1, int v2) = v1 % v2

	@Intrinsic([ LOAD_0, LOAD_1, IDIV ])
	public infix int operator \(int v1, int v2) = v1 \ v2

	@Intrinsic([ LOAD_0, LOAD_1, IAND ])
	public infix int operator &(int v1, int v2) = v1 & v2

	@Intrinsic([ LOAD_0, LOAD_1, IOR ])
	public infix int operator |(int v1, int v2) = v1 | v2

	@Intrinsic([ LOAD_0, LOAD_1, IXOR ])
	public infix int operator ^(int v1, int v2) = v1 ^ v2

	@Intrinsic([ LOAD_0, LOAD_1, ISHL ])
	public infix int operator <<(int v1, int v2) = v1 << v2

	@Intrinsic([ LOAD_0, LOAD_1, ISHR ])
	public infix int operator >>(int v1, int v2) = v1 >> v2

	@Intrinsic([ LOAD_0, LOAD_1, IUSHR ])
	public infix int operator >>>(int v1, int v2) = v1 >>> v2

	// Int Methods

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toString", "(I)Ljava/lang/String;" ])
	public infix String toString(int value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toBinaryString", "(I)Ljava/lang/String;" ])
	public infix String toBinaryString(int value) = value.toBinaryString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toHexString", "(I)Ljava/lang/String;" ])
	public infix String toHexString(int value) = value.toHexString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toOctalString", "(I)Ljava/lang/String;" ])
	public infix String toOctalString(int value) = value.toOctalString

	public infix String toString(int value, int radix) =
		radix match {
			case 2: return value.toBinaryString
			case 8: return value.toOctalString
			case 10: return value.toString
			case 16: return value.toHexString
			case _ : return java.lang.Integer.toString(value, radix);
		}

	@Intrinsic([ LOAD_0, LOAD_1, ICMPEQ ])
	public infix boolean equals(int i1, int i2) = i1 == i2

	@Intrinsic([ LOAD_0 ])
	public infix int hashCode(int v) = v

	// Char Methods

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/String", "valueOf", "(C)Ljava/lang/String;" ])
	public infix String toString(char c) = String.valueOf(c)

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Integer", "toString", "(I)Ljava/lang/String;" ])
	public infix String toDecimalString(char c) = c.toDecimalString

	// Long Operators

	@Intrinsic([ LOAD_0, LNEG ])
	public static long operator -(long value) = -value

	@Intrinsic([ LOAD_0, LNOT ])
	public static long operator ~(long value) = ~value

	@Intrinsic([ LOAD_0, LOAD_1, LCMPEQ ])
	public infix boolean operator ==(long v1, long v2) = v1 == v2

	@Intrinsic([ LOAD_0, LOAD_1, LCMPNE ])
	public infix boolean operator !=(long v1, long v2) = v1 != v2

	@Intrinsic([ LOAD_0, LOAD_1, LCMPLT ])
	public infix boolean operator <(long v1, long v2) = v1 < v2

	@Intrinsic([ LOAD_0, LOAD_1, LCMPLE ])
	public infix boolean operator <=(long v1, long v2) = v1 <= v2

	@Intrinsic([ LOAD_0, LOAD_1, LCMPGT ])
	public infix boolean operator >(long v1, long v2) = v1 > v2

	@Intrinsic([ LOAD_0, LOAD_1, LCMPGE ])
	public infix boolean operator >=(long v1, long v2) = v1 >= v2

	@Intrinsic([ LOAD_0, LOAD_1, LADD ])
	public infix long operator +(long v1, long v2) = v1 + v2

	@Intrinsic([ LOAD_0, LOAD_1, LSUB ])
	public infix long operator -(long v1, long v2) = v1 - v2

	@Intrinsic([ LOAD_0, LOAD_1, LMUL ])
	public infix long operator *(long v1, long v2) = v1 * v2

	@Intrinsic([ LOAD_0, L2D, LOAD_1, L2D, DDIV ])
	public infix double operator /(long v1, long v2) = v1 / v2

	@Intrinsic([ LOAD_0, LOAD_1, LREM ])
	public infix long operator %(long v1, long v2) = v1 % v2

	@Intrinsic([ LOAD_0, LOAD_1, LDIV ])
	public infix long operator \(long v1, long v2) = v1 \ v2

	@Intrinsic([ LOAD_0, LOAD_1, LAND ])
	public infix long operator &(long v1, long v2) = v1 & v2

	@Intrinsic([ LOAD_0, LOAD_1, LOR ])
	public infix long operator |(long v1, long v2) = v1 | v2

	@Intrinsic([ LOAD_0, LOAD_1, LXOR ])
	public infix long operator ^(long v1, long v2) = v1 ^ v2

	@Intrinsic([ LOAD_0, LOAD_1, L2I, LSHL ])
	public infix long operator <<(long v1, long v2) = v1 << v2

	@Intrinsic([ LOAD_0, LOAD_1, L2I, LSHR ])
	public infix long operator >>(long v1, long v2) = v1 >> v2

	@Intrinsic([ LOAD_0, LOAD_1, L2I, LUSHR ])
	public infix long operator >>>(long v1, long v2) = v1 >>> v2

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toString", "(J)Ljava/lang/String;" ])
	public infix String toString(long value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toHexString", "(J)Ljava/lang/String;" ])
	public infix String toHexString(long value) = value.toHexString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toBinaryString", "(J)Ljava/lang/String;" ])
	public infix String toBinaryString(long value) = value.toBinaryString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Long", "toOctalString", "(J)Ljava/lang/String;" ])
	public infix String toOctalString(long value) = value.toOctalString

	public infix String toString(long value, int radix) =
		radix match {
			case 2: return value.toBinaryString
			case 8: return value.toOctalString
			case 10: return value.toString
			case 16: return value.toHexString
			case _ : return java.lang.Long.toString(value, radix);
		}

	@Intrinsic([ LOAD_0, LOAD_1, LCMPEQ ])
	public postfix boolean equals(long l1, long l2) = l1 == l2

	@Intrinsic([ LOAD_0, DUP2, BIPUSH, 32, LUSHR, LXOR, L2I ])
	public postfix int hashCode(long value) = value.hashCode

	// Float Operators

	@Intrinsic([ LOAD_0, FNEG ])
	public static float operator -(float value) = -value

	@Intrinsic([ LOAD_0, LOAD_1, FCMPEQ ])
	public infix boolean operator ==(float v1, float v2) = v1 == v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPNE ])
	public infix boolean operator !=(float v1, float v2) = v1 != v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPLT ])
	public infix boolean operator <(float v1, float v2) = v1 < v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPLE ])
	public infix boolean operator <=(float v1, float v2) = v1 <= v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPGT ])
	public infix boolean operator >(float v1, float v2) = v1 > v2

	@Intrinsic([ LOAD_0, LOAD_1, FCMPGE ])
	public infix boolean operator >=(float v1, float v2) = v1 >= v2

	@Intrinsic([ LOAD_0, LOAD_1, FADD ])
	public infix float operator +(float v1, float v2) = v1 + v2

	@Intrinsic([ LOAD_0, LOAD_1, FSUB ])
	public infix float operator -(float v1, float v2) = v1 - v2

	@Intrinsic([ LOAD_0, LOAD_1, FMUL ])
	public infix float operator *(float v1, float v2) = v1 * v2

	@Intrinsic([ LOAD_0, LOAD_1, FDIV ])
	public infix float operator /(float v1, float v2) = v1 / v2

	@Intrinsic([ LOAD_0, LOAD_1, FREM ])
	public infix float operator %(float v1, float v2) = v1 % v2

	// Float Methods

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Float", "toString", "(F)Ljava/lang/String;" ])
	public postfix String toString(float value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Float", "toHexString", "(F)Ljava/lang/String;" ])
	public postfix String toHexString(float value) = value.toHexString

	@Intrinsic([ LOAD_0, LOAD_1, FCMPEQ ])
    public infix boolean equals(float v1, float v2) = v1 == v2

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Float", "hashCode", "(F)I" ])
	public postfix int hashCode(float value) = value.hashCode

	// Double Operators

	@Intrinsic([ LOAD_0, DNEG ])
	public static double operator -(double value) = -value
	
	@Intrinsic([ LOAD_0, LOAD_1, DCMPEQ ])
	public infix boolean operator ==(double v1, double v2) = v1 == v2

	@Intrinsic([ LOAD_0, LOAD_1, DCMPNE ])
	public infix boolean operator !=(double v1, double v2) = v1 != v2

	@Intrinsic([ LOAD_0, LOAD_1, DCMPLT ])
	public infix boolean operator <(double v1, double v2) = v1 < v2

	@Intrinsic([ LOAD_0, LOAD_1, DCMPLE ])
	public infix boolean operator <=(double v1, double v2) = v1 <= v2

	@Intrinsic([ LOAD_0, LOAD_1, DCMPGT ])
	public infix boolean operator >(double v1, double v2) = v1 > v2

	@Intrinsic([ LOAD_0, LOAD_1, DCMPGE ])
	public infix boolean operator >=(double v1, double v2) = v1 >= v2

	@Intrinsic([ LOAD_0, LOAD_1, DADD ])
	public infix double operator +(double v1, double v2) = v1 + v2

	@Intrinsic([ LOAD_0, LOAD_1, DSUB ])
	public infix double operator -(double v1, double v2) = v1 - v2

	@Intrinsic([ LOAD_0, LOAD_1, DMUL ])
	public infix double operator *(double v1, double v2) = v1 * v2

	@Intrinsic([ LOAD_0, LOAD_1, DDIV ])
	public infix double operator /(double v1, double v2) = v1 / v2

	@Intrinsic([ LOAD_0, LOAD_1, DREM ])
	public infix double operator %(double v1, double v2) = v1 % v2

	// Double Methods

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Double", "toString", "(D)Ljava/lang/String;" ])
	public postfix String toString(double value) = value.toString

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Double", "toHexString", "(D)Ljava/lang/String;" ])
	public postfix String toHexString(double value) = value.toHexString

	@Intrinsic([ LOAD_0, LOAD_1, DCMPEQ ])
	public infix boolean equals(double v1, double v2) = v1 == v2

	@Intrinsic(value: LOAD_CALL, strings: [ "java/lang/Double", "hashCode", "(D)I" ])
	public postfix int hashCode(double value) = value.hashCode
}
