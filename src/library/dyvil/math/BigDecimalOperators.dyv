package dyvil.math

import java.math.BigDecimal

public class BigDecimalOperators
{
	infix implicit inline func toBigDecimal(int i) ->    BigDecimal = BigDecimal.valueOf(i as long)
	infix implicit inline func toBigDecimal(long i) ->   BigDecimal = BigDecimal.valueOf(i)
	infix implicit inline func toBigDecimal(float i) ->  BigDecimal = BigDecimal.valueOf(i as double)
	infix implicit inline func toBigDecimal(double i) -> BigDecimal = BigDecimal.valueOf(i)
	infix implicit inline func toBigDecimal(java.math.BigInteger i) -> BigDecimal = new BigDecimal(i)

	static inline func +(BigDecimal a) -> BigDecimal = a
	static inline func -(BigDecimal a) -> BigDecimal = a.negate()

	infix inline func +(BigDecimal a, BigDecimal b) -> BigDecimal = a.add(b)
	infix inline func -(BigDecimal a, BigDecimal b) -> BigDecimal = a.subtract(b)
	infix inline func *(BigDecimal a, BigDecimal b) -> BigDecimal = a.multiply(b)
	infix inline func /(BigDecimal a, BigDecimal b) -> BigDecimal = a.divide(b)
	infix inline func %(BigDecimal a, BigDecimal b) -> BigDecimal = a.remainder(b)

	infix inline func **(BigDecimal a, int b) -> BigDecimal = a.pow(b)
	infix func **(BigDecimal a, double b) -> BigDecimal = PowImpl.pow(a, b)
	infix func **(BigDecimal a, BigDecimal b) -> BigDecimal = PowImpl.pow(a, b)
}
