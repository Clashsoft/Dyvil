package dyvil.math

import java.math.{ BigDecimal, BigInteger }

public abstract class BigDecimalOperators
{
	private init() {}

	postfix implicit inline func toBigDecimal(i: int)        -> BigDecimal = BigDecimal.valueOf(i as long)
	postfix implicit inline func toBigDecimal(i: long)       -> BigDecimal = BigDecimal.valueOf(i)
	postfix implicit inline func toBigDecimal(i: float)      -> BigDecimal = BigDecimal.valueOf(i)
	postfix implicit inline func toBigDecimal(i: double)     -> BigDecimal = BigDecimal.valueOf(i)
	postfix implicit inline func toBigDecimal(i: BigInteger) -> BigDecimal = new BigDecimal(i)

	prefix inline func + (rhs: BigDecimal) -> BigDecimal = rhs
	prefix inline func - (rhs: BigDecimal) -> BigDecimal = rhs.negate()

	infix  inline func + (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.add(rhs)
	infix  inline func - (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.subtract(rhs)
	infix  inline func * (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.multiply(rhs)
	infix  inline func / (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.divide(rhs)
	infix  inline func % (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.remainder(rhs)

	infix  inline func **(lhs: BigDecimal, rhs: int)        -> BigDecimal = lhs.pow(rhs)
	infix         func **(lhs: BigDecimal, rhs: double)     -> BigDecimal = PowImpl.pow(lhs, rhs)
	infix         func **(lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = PowImpl.pow(lhs, rhs)
}
