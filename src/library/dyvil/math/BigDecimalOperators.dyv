package dyvil.math

import java.math.{ BigDecimal, BigInteger }

abstract class BigDecimalOperators
{
	private init() {}

	inline static extension func apply(this: BigDecimal, _ i: long) -> BigDecimal = BigDecimal.valueOf(i)
	inline static extension func apply(this: BigDecimal, _ d: double) -> BigDecimal = BigDecimal.valueOf(d)
	inline static extension func apply(this: BigDecimal, _ b: BigInteger) -> BigDecimal = new BigDecimal(b)
	inline static extension func apply(this: BigDecimal, _ s: String) -> BigDecimal = new BigDecimal(s)

	implicit inline postfix func toBigDecimal(_ l: long) -> BigDecimal = BigDecimal.valueOf(l)
	implicit inline postfix func toBigDecimal(_ d: double) -> BigDecimal = BigDecimal.valueOf(d)
	implicit inline postfix func toBigDecimal(_ b: BigInteger) -> BigDecimal = new BigDecimal(b)

	// Additive Operators

	inline prefix func + (rhs: BigDecimal) -> BigDecimal = rhs

	inline infix func + (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.add(rhs)

	inline prefix func - (rhs: BigDecimal) -> BigDecimal = rhs.negate()

	inline infix func - (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.subtract(rhs)

	// Multiplicative Operators

	inline infix func * (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.multiply(rhs)

	inline infix func / (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.divide(rhs, .HALF_EVEN)

	inline infix func % (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = lhs.remainder(rhs)

	inline infix func **(lhs: BigDecimal, rhs: int) -> BigDecimal = PowImpl.pow(lhs, rhs)

	infix func **(lhs: BigDecimal, rhs: double) -> BigDecimal = PowImpl.pow(lhs, rhs)

	infix func **(lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal = PowImpl.pow(lhs, rhs)
}
