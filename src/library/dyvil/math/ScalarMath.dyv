package dyvil.math

interface ScalarMath<T>
{
	// Constants

	static func _0 -> T

	static func _1 -> T

	// Unary Operators

	prefix func +(rhs: T) -> T = rhs

	prefix func -(rhs: T) -> T // = _0 - rhs

	postfix func inverse(lhs: T) -> T // = _1 / lhs

	// Additive Operators

	infix func +(lhs: T, rhs: T) -> T

	infix func -(lhs: T, rhs: T) -> T // = lhs + -rhs

	// Multiplicative Operators

	infix func *(lhs: T, rhs: T) -> T

	infix func /(lhs: T, rhs: T) -> T // = lhs * rhs.inverse

	// Implementations

	static object Double implements ScalarMath<double>
	{
		override static func _0() -> double = 0

		override static func _1() -> double = 1

		override prefix func -(rhs: double) -> double = -rhs

		override postfix func inverse(lhs: double) -> double = 1 / lhs

		override infix func +(lhs: double, rhs: double) -> double = lhs + rhs

		override infix func -(lhs: double, rhs: double) -> double = lhs - rhs

		override infix func *(lhs: double, rhs: double) -> double = lhs * rhs

		override infix func /(lhs: double, rhs: double) -> double = lhs / rhs
	}
}
