package dyvil.math

import java.math.BigInteger

public class BigIntegerOperators
{
	infix implicit inline func toBigInteger(int i) ->    BigInteger = BigInteger.valueOf(i as long)
	infix implicit inline func toBigInteger(long i) ->   BigInteger = BigInteger.valueOf(i)

	static inline func +(BigInteger a) -> BigInteger = a
	static inline func -(BigInteger a) -> BigInteger = a.negate()
	static inline func ~(BigInteger a) -> BigInteger = a.xor(BigInteger.valueOf(-1))

	infix inline func +(BigInteger a, BigInteger b) -> BigInteger = a.add(b)
	infix inline func -(BigInteger a, BigInteger b) -> BigInteger = a.subtract(b)
	infix inline func *(BigInteger a, BigInteger b) -> BigInteger = a.multiply(b)
	infix inline func /(BigInteger a, BigInteger b) -> BigInteger = a.divide(b)
	infix inline func %(BigInteger a, BigInteger b) -> BigInteger = a.remainder(b)
	infix inline func **(BigInteger a, int b) -> BigInteger = a.pow(b)

	infix inline func &(BigInteger a, BigInteger b) -> BigInteger = a.and(b)
	infix inline func |(BigInteger a, BigInteger b) -> BigInteger = a.or(b)
	infix inline func ^(BigInteger a, BigInteger b) -> BigInteger = a.xor(b)
	infix inline func <<(BigInteger a, int b)      : BigInteger = a.shiftLeft(b)
	infix inline func >>(BigInteger a, int b)      : BigInteger = a.shiftRight(b)
}
