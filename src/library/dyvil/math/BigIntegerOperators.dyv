package dyvil.math

import java.math.BigInteger

public abstract class BigIntegerOperators
{
	private init() {}

	postfix implicit inline func toBigInteger(i: int) ->    BigInteger = BigInteger.valueOf(i as long)
	postfix implicit inline func toBigInteger(i: long) ->   BigInteger = BigInteger.valueOf(i)

	prefix inline func + (rhs: BigInteger) -> BigInteger = rhs
	prefix inline func - (rhs: BigInteger) -> BigInteger = rhs.negate()
	prefix inline func ~ (rhs: BigInteger) -> BigInteger = rhs.xor(BigInteger.valueOf(-1))

	infix  inline func + (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.add(rhs)
	infix  inline func - (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.subtract(rhs)
	infix  inline func * (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.multiply(rhs)
	infix  inline func / (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.divide(rhs)
	infix  inline func % (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.remainder(rhs)
	infix  inline func **(lhs: BigInteger, rhs: int)        -> BigInteger = lhs.pow(rhs)

	infix  inline func & (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.and(rhs)
	infix  inline func | (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.or(rhs)
	infix  inline func ^ (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.xor(rhs)
	infix  inline func <<(lhs: BigInteger, rhs: int)        -> BigInteger = lhs.shiftLeft(rhs)
	infix  inline func >>(lhs: BigInteger, rhs: int)        -> BigInteger = lhs.shiftRight(rhs)
}
