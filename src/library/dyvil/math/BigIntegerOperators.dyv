package dyvil.math

import java.math.{ BigInteger, BigDecimal }

abstract class BigIntegerOperators
{
	private init() {}

	inline static func apply(this: BigInteger, _ l: long) -> BigInteger = BigInteger.valueOf(l)
	inline static func apply(this: BigInteger, _ s: String) -> BigInteger = new BigInteger(s)

	implicit inline postfix func toBigInteger(_ l: long) -> BigInteger = BigInteger.valueOf(l)

	// Additive Operators

	inline prefix func + (rhs: BigInteger) -> BigInteger = rhs

	inline infix func + (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.add(rhs)

	inline prefix func - (rhs: BigInteger) -> BigInteger = rhs.negate()

	inline infix func - (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.subtract(rhs)

	// Multiplicative Operators

	inline infix func * (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.multiply(rhs)

	infix func / (lhs: BigInteger, rhs: BigInteger) -> BigDecimal = new BigDecimal(lhs).divide(new BigDecimal(rhs))

	inline infix func _/ (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.divide(rhs)

	inline infix func % (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.remainder(rhs)

	infix func /% (lhs: BigInteger, rhs: BigInteger) -> (BigInteger, BigInteger)
	{
		let a = lhs.divideAndRemainder(rhs)
		return (a[0], a[1])
	}

	inline infix func ** (lhs: BigInteger, rhs: int) -> BigInteger = lhs.pow(rhs)

	// Bitwise Operators

	prefix func ~ (rhs: BigInteger) -> BigInteger = rhs.xor(BigInteger.valueOf(-1))

	inline infix func & (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.and(rhs)

	inline infix func | (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.or(rhs)

	inline infix func ^ (lhs: BigInteger, rhs: BigInteger) -> BigInteger = lhs.xor(rhs)

	inline infix func <<(lhs: BigInteger, rhs: int) -> BigInteger = lhs.shiftLeft(rhs)

	inline infix func >>(lhs: BigInteger, rhs: int) -> BigInteger = lhs.shiftRight(rhs)
}
