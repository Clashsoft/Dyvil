// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.math

using dyvil.Math

@BytecodeName("MathUtils")
extension Math
{
	// --------------- min ---------------

	#for (spec <- LibraryGenConstants.MAIN_SPECS) {
		#let(T = spec['PRIMITIVE'])
		#let(WRAPPER = spec['WRAPPER'])
		#let(FLOATING_POINT = Boolean.parseBoolean(spec['IS_FLOATING_POINT']))

		static func min(_ a: T, _ b: T, _ c: T) -> T = min(a, min(b, c))

		static func min(_ values: T...) -> T
		{
			var min = #if (FLOATING_POINT) {WRAPPER.POSITIVE_INFINITY} #else {WRAPPER.MAX_VALUE}

			for (v <- values) if (v < min) min = v
			return min
		}

		static func min(_ array: [T]) -> T inline @BytecodeName("min$_array") = min(array...)
	}

	// --------------- max ---------------

	#for (spec <- LibraryGenConstants.MAIN_SPECS) {
		#let(T = spec['PRIMITIVE'])
		#let(WRAPPER = spec['WRAPPER'])
		#let(FLOATING_POINT = Boolean.parseBoolean(spec['IS_FLOATING_POINT']))

		static func max(_ a: T, _ b: T, _ c: T) -> T = max(a, max(b, c))

		static func max(_ values: T...) -> T
		{
			var max = #if (FLOATING_POINT) {WRAPPER.NEGATIVE_INFINITY} #else {WRAPPER.MIN_VALUE}

			for (v <- values) if (v > max) max = v
			return max
		}


		static func max(_ array: [T]) -> T inline @BytecodeName("max$_array") = max(array...)
	}

	// --------------- sum ---------------

	#for (spec <- LibraryGenConstants.MAIN_SPECS) {
		#let(T = spec['PRIMITIVE'])

		static func sum(_ values: [T]) -> T
		{
			var sum: T = 0
			for (v <- values) sum += v
			return sum
		}
	}

	static func sum<T>(_ values: [T], implicit group: GroupAdd<T>) -> T = sum(values.asIterable(), group)

	static func sum<T>(_ values: Iterable<T>, implicit group: GroupAdd<T>) -> T
	{
		var sum = group._0
		for (k <- values) sum += k
		return sum
	}

	static func sum<R, T>(_ values: Iterable<R>, _ f: R -> T, implicit group: GroupAdd<T>) -> T
	{
		var sum = group._0
		for (k <- values) sum += f(k)
		return sum
	}

	// --------------- product ---------------

	#for (spec <- LibraryGenConstants.MAIN_SPECS) {
		#let(T = spec['PRIMITIVE'])

		static func product(_ values: [T]) -> T
		{
			var product: T = 1
			for (v <- values) product *= v
			return product
		}
	}

	static func product<T>(_ values: [T], implicit group: GroupMultiply<T>) -> T = product(values as Iterable<T>, group)

	static func product<T>(_ values: Iterable<T>, implicit group: GroupMultiply<T>) -> T
	{
		var product = group._1
		for (k <- values) product *= k
		return product
	}

	static func product<R, T>(_ values: Iterable<R>, _ f: R -> T, implicit group: GroupMultiply<T>) -> T
	{
		var product = group._1
		for (k <- values) product *= f(k)
		return product
	}

	// --------------- average ---------------

	#for (spec <- LibraryGenConstants.MAIN_SPECS) {
		#let(T = spec['PRIMITIVE'])

		static func average(_ values: [T]) -> double = sum(values) / (values.size as double)
	}

	// --------------- clamp ---------------

	#for (spec <- LibraryGenConstants.MAIN_SPECS) {
		#let(T = spec['PRIMITIVE'])

		static func clamp(value: T, min: T, max: T) -> T
		{
			if (value < min) return min
			if (value > max) return max
			return value
		}
	}

	// --------------- interpolate ---------------

	#for (spec <- LibraryGenConstants.FLOATING_POINT_SPECS) {
		#let(T = spec['PRIMITIVE'])

		static func interpolate(factor: T, min: T, max: T) -> T
		{
			if (factor <= 0) return min
			if (factor >= 1) return max
			return min + factor * (max - min)
		}
	}

	// --------------- floor ---------------

	static func floor(_ f: float) -> int
	{
		let i = f as int
		return f < i ? i - 1 : i
	}

	static func floor(_ d: double) -> long
	{
		let l = d as long
		return d < l ? l - 1 : l
	}

	// --------------- ceil ---------------

	static func ceil(_ f: float) -> int
	{
		let i = f as int
		return f > i ? i + 1 : i
	}

	static func ceil(_ d: double) -> long
	{
		let l = d as long
		return d > l ? l + 1 : l
	}

	// --------------- powers of two ---------------

	static func nextPowerOf2(_ v: int) -> int
	{
		var j = v - 1
		j |= j >> 1
		j |= j >> 2
		j |= j >> 4
		j |= j >> 8
		j |= j >> 16
		return j + 1
	}

	static func isPowerOf2(_ v: int) -> boolean = (v & -v) == v

	static func log2(_ v: int) -> int = isPowerOf2(v) ? DeBruijn[v] : DeBruijn[nextPowerOf2(v)] - 1
}

package private class DeBruijn
{
	private const deBruijnBits: [int] = [ 0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31,
		27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9 ]

	package private static func subscript(v: int) -> int = deBruijnBits[(v * 125613361L >> 27) as int & 0x1F]
}

