package dyvil.math

import java.math.BigInteger

type BigInt = BigInteger

@BytecodeName("BigIntegers$BigIntegerSyntax")
extension BigInt
{
	// =============== Static Methods ===============

	static func apply(_ l: long) implicit -> BigInt inline = BigInt.valueOf(l)

	static func apply(_ s: String) -> BigInt inline = new BigInt(s)

	// =============== Operators ===============

	// --------------- Unary Operators ---------------

	prefix func + (rhs: BigInt) -> BigInt inline = rhs

	prefix func - (rhs: BigInt) -> BigInt inline = rhs.negate()

	// --------------- Additive Operators ---------------

	infix func + (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.add(rhs)

	infix func - (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.subtract(rhs)

	// --------------- Multiplicative Operators ---------------

	infix func * (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.multiply(rhs)

	infix func / (lhs: BigInt, rhs: BigInt) -> java.math.BigDecimal = new java.math.BigDecimal(lhs).divide(new java.math.BigDecimal(rhs))

	infix func _/ (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.divide(rhs)

	infix func % (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.remainder(rhs)

	infix func /% (lhs: BigInt, rhs: BigInt) -> (BigInt, BigInt) = lhs.divideAndRemainder(rhs).{ ($0[0], $0[1]) }

	infix func ** (lhs: BigInt, rhs: int) -> BigInt inline = lhs.pow(rhs)

	// --------------- Bitwise Operators ---------------

	prefix func ~ (rhs: BigInt) -> BigInt = rhs.xor(BigInt.valueOf(-1))

	infix func & (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.and(rhs)

	infix func | (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.or(rhs)

	infix func ^ (lhs: BigInt, rhs: BigInt) -> BigInt inline = lhs.xor(rhs)

	infix func << (lhs: BigInt, rhs: int) -> BigInt inline = lhs.shiftLeft(rhs)

	infix func >> (lhs: BigInt, rhs: int) -> BigInt inline = lhs.shiftRight(rhs)
}

@BytecodeName("BigIntegers$LongSyntax")
extension long
{
	func toBigInt() -> BigInt inline = BigInt(this)
}
