package dyvil.math

public header BigDecimals

import java.math.BigDecimal

@JavaName("BigDecimals$BigDecimalSyntax")
extension BigDecimal
{
	// =============== Static Methods ===============

	static func apply(_ i: long) implicit -> BigDecimal inline = BigDecimal.valueOf(i)

	static func apply(_ d: double) implicit -> BigDecimal inline = BigDecimal.valueOf(d)

	static func apply(_ b: java.math.BigInteger) implicit -> BigDecimal inline = new BigDecimal(b)

	static func apply(_ s: String) -> BigDecimal inline = new BigDecimal(s)

	// =============== Operators ===============

	// --------------- Unary Operators ---------------

	prefix func + (rhs: BigDecimal) -> BigDecimal inline = rhs

	prefix func - (rhs: BigDecimal) -> BigDecimal inline = rhs.negate()

	// --------------- Additive Operators ---------------

	infix func + (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal inline = lhs.add(rhs)

	infix func - (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal inline = lhs.subtract(rhs)

	// --------------- Multiplicative Operators ---------------

	infix func * (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal inline = lhs.multiply(rhs)

	infix func / (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal inline = lhs.divide(rhs, .HALF_EVEN)

	infix func % (lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal inline = lhs.remainder(rhs)

	infix func **(lhs: BigDecimal, rhs: int) -> BigDecimal inline = PowImpl.pow(lhs, rhs)

	infix func **(lhs: BigDecimal, rhs: double) -> BigDecimal inline = PowImpl.pow(lhs, rhs)

	infix func **(lhs: BigDecimal, rhs: BigDecimal) -> BigDecimal inline = PowImpl.pow(lhs, rhs)
}

@JavaName("BigDecimals$LongSyntax")
extension long
{
	func toBigDecimal() -> BigDecimal inline = BigDecimal(this)
}

@JavaName("BigDecimals$DoubleSyntax")
extension double
{
	func toBigDecimal() -> BigDecimal inline = BigDecimal(this)
}

@JavaName("BigDecimals$BigIntegerSyntax")
extension java.math.BigInteger
{
	func toBigDecimal() -> BigDecimal inline = BigDecimal(this)
}
