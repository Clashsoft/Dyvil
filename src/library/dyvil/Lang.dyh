package dyvil

// Base imports for language features
import	dyvil.lang._

// Useful classes
import	dyvil.collection._
import	dyvil.io.Console
import	dyvil.random.Random
import	dyvil.function.PartialFunction
import	dyvil.util.{ Option, None, Some }
import	dyvil.util.Version

// Import Tuple2 and Tuple3 with more user-friendly names
import	dyvil.tuple.{ Tuple2 => Pair, Tuple3 => Triple }

// Import useful annotation classes
import	dyvil.annotation.Intrinsic
import	dyvil.annotation.{ Deprecated, Experimental, UsageInfo }
import	dyvil.annotation.{
							Native		=> native,
							Transient	=> transient,
							Volatile	=> volatile,
							Immutable	=> immutable,
							Mutating	=> mutating,
							Reified		=> reified
						 }

import	java.lang._

// Import the methods from former Predef classes
using	dyvil.lang.{
					Primitives._
					LanguageCommons._
					LanguageFeatures._
					ObjectExtensions._
					StringExtensions._
					FunctionConversions._
				   }

// Primitive type aliases
type	Void	= dyvil.lang.Void
type	Byte	= java.lang.Byte
type	Short	= java.lang.Short
type	Char	= java.lang.Character
type	Int		= java.lang.Integer
type	Long	= java.lang.Long
type	Float	= java.lang.Float
type	Double	= java.lang.Double

// Print Operators
prefix	operator print		{ precedence 1 }
prefix	operator println	{ precedence 1 }

// Assert Operator
prefix	operator assert		{ precedence 1 }

// Postfix Operators
postfix	operator ++
postfix	operator --

// Prefix Operators
prefix	operator +
prefix	operator -
prefix	operator ~
prefix	operator !

// Boolean and Bitwise Operators
infix	operator ||		{ left, 100 }
infix	operator &&		{ left, 200 }
infix	operator |		{ left, 300 }
infix	operator ^		{ left, 400 }
infix	operator &		{ left, 500 }

// Equality and Identity Operators
infix	operator ==		{ left, 600Â }
infix	operator !=		{ left, 600 }
infix	operator ===	{ left, 600 }
infix	operator !==	{ left, 600 }

// Numeric Comparison Operators
infix	operator <		{ left, 700 }
infix	operator <=		{ left, 700 }
infix	operator >		{ left, 700 }
infix	operator >=		{ left, 700 }

// Additive Operators
infix	operator +		{ left, 800 }
infix	operator -		{ left, 800 }

// Multiplicative Operators
infix	operator *		{ left, 900 }
infix	operator /		{ left, 900 }
infix	operator \		{ left, 900 }
infix	operator %		{ left, 900 }

// Shift Operators
infix	operator <<		{ none, 1000 }
infix	operator >>		{ none, 1000 }
infix	operator >>>	{ none, 1000 }

// Arrow Operators
infix	operator ->		{ left, 2000 }
infix	operator <-		{ right, 2000 }

// Range Operator
infix	operator .. 	{ none, 3000 }
infix	operator ..<	{ none, 3000 }
// infix operator >.. { none, 3000 }
// infix operator >.< { none, 3000 }
