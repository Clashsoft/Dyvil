package dyvil.reflect;


public interface Modifiers
{
	// Access Modifiers
	
	public static final int	PACKAGE					= 0x00000000;
	public static final int	PUBLIC					= 0x00000001;
	public static final int	PRIVATE					= 0x00000002;
	public static final int	PROTECTED				= 0x00000004;
	
	/**
	 * Dyvil derived access modifier.
	 */
	public static final int	DERIVED					= PRIVATE | PROTECTED;
	public static final int	STATIC					= 0x00000008;
	public static final int	FINAL					= 0x00000010;
	
	/**
	 * Dyvil constant modifier. This modifier is just a shortcut for
	 * {@code static final}.
	 */
	public static final int	CONST					= STATIC | FINAL;
	public static final int	SYNCHRONIZED			= 0x00000020;
	public static final int	VOLATILE				= 0x00000040;
	public static final int	BRIDGE					= 0x00000040;
	public static final int	TRANSIENT				= 0x00000080;
	public static final int	VARARGS					= 0x00000080;
	public static final int	NATIVE					= 0x00000100;
	public static final int	INTERFACE_CLASS			= 0x00000200;
	public static final int	ABSTRACT				= 0x00000400;
	
	/**
	 * Strictfp modifier. This is used for classes and methods and marks that
	 * floating point numbers (floats and doubles) have to be handled specially.
	 */
	public static final int	STRICT					= 0x00000800;
	
	/**
	 * Synthetic modifier. This is used for fields and methods that are not
	 * present in the source code and generated by the compiler.
	 */
	public static final int	SYNTHETIC				= 0x00001000;
	
	// TODO Annotation Types
	public static final int	ANNOTATION				= 0x00002000;
	
	// TODO Enums
	public static final int	ENUM					= 0x00004000;
	public static final int	MANDATED				= 0x00008000;
	
	// Field Modifiers
	
	/**
	 * Dyvil lazy modifier. If a field is marked with this modifier, it will be
	 * evaluated every time it is demanded and is thus not saved in the memory.
	 * This behavior can be compared with a method without parameters.
	 */
	public static final int	LAZY					= 0x00010000 | STATIC | FINAL;
	
	// Type Modifiers
	
	/**
	 * Dyvil object modifier. If a class is marked with this modifier, it is a
	 * singleton object class.
	 */
	public static final int	OBJECT_CLASS			= 0x00010000;
	
	/**
	 * Dyvil case modifier. If a class is marked with this modifier, it is a
	 * case class.
	 */
	public static final int	CASE_CLASS				= 0x00020000;
	
	/**
	 * Dyvil functional modifier. This modifier is a shortcut for the @FunctionalInterface
	 * annotation
	 */
	public static final int	FUNCTIONAL				= 0x00040000;
	
	// Method Modifiers
	
	/**
	 * Dyvil inline modifier. If a method is marked with this modifier, it will
	 * be inlined by the compiler to reduce method call overhead.
	 */
	// TODO inline Implementation
	public static final int	INLINE					= 0x00010000;
	
	/**
	 * Dyvil infix modifier. If a method is marked with this modifier, it is a
	 * method that can be called on any Object and virtually has the instance as
	 * the first parameter. An infix method is always static.
	 * 
	 * @see
	 */
	public static final int	INFIX					= 0x00020000 | STATIC;
	
	public static final int	PREFIX					= 0x00040000;
	
	/**
	 * Dyvil override modifier. This modifier is a shortcut for the @Override
	 * annotation.
	 */
	public static final int	OVERRIDE				= 0x00080000;
	
	// Parameter Modifiers
	
	/**
	 * Dyvil ref modifier. This is used to mark that a parameter is
	 * Call-By-Reference. If a parameter doesn't have this flag, it is
	 * Call-By-Value.
	 */
	// TODO byref Implementation
	public static final int	BYREF					= 0x00040000;
	
	// Member Modifiers
	
	/**
	 * Dyvil sealed modifier. This is used to mark that a class, method or field
	 * is only visible from inside the current library / project.
	 */
	public static final int	SEALED					= 0x00100000;
	
	/**
	 * Dyvil deprecated modifier. This modifier is a shortcut for the @Deprecated
	 * annotation.
	 */
	public static final int	DEPRECATED				= 0x00200000;
	
	public static final int	CLASS_TYPE_MODIFIERS	= INTERFACE_CLASS | ANNOTATION | ENUM | OBJECT_CLASS;
	public static final int	ACCESS_MODIFIERS		= PUBLIC | PROTECTED | PRIVATE | DEPRECATED | SEALED;
	public static final int	MEMBER_MODIFIERS		= ACCESS_MODIFIERS | DEPRECATED | STATIC | FINAL | SYNTHETIC;
	public static final int	CLASS_MODIFIERS			= MEMBER_MODIFIERS | ABSTRACT | STRICT | CASE_CLASS | FUNCTIONAL;
	public static final int	FIELD_MODIFIERS			= MEMBER_MODIFIERS | TRANSIENT | VOLATILE | LAZY;
	public static final int	METHOD_MODIFIERS		= MEMBER_MODIFIERS | SYNCHRONIZED | NATIVE | STRICT | INLINE | INFIX | PREFIX | DEPRECATED | BRIDGE
															| VARARGS | MANDATED;
	public static final int	PARAMETER_MODIFIERS		= FINAL | BYREF;
	
}
