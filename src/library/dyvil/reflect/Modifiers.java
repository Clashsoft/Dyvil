package dyvil.reflect;

import dyvil.annotation.*;

/**
 * The <b>Modifiers</b> interface declares all (visible and invisible) modifiers
 * that can be used <i>Dyvil</i> source code and that can appear in class files.
 * Note that only modifiers less than {@code 0xFFFF} will actually appear in the
 * Bytecode, other modifiers such as the ones added by <i>Dyvil</i> will be
 * converted to annotations.
 * 
 * @author Clashsoft
 * @version 1.0
 */
public interface Modifiers
{
	// Access Modifiers
	
	/**
	 * Default (package) access modifier.
	 */
	public static final int	PACKAGE					= 0x00000000;
	
	/**
	 * {@code public} access modifier.
	 */
	public static final int	PUBLIC					= 0x00000001;
	
	/**
	 * {@code private} access modifier.
	 */
	public static final int	PRIVATE					= 0x00000002;
	
	/**
	 * {@code protected} access modifier.
	 */
	public static final int	PROTECTED				= 0x00000004;
	
	/**
	 * <i>Dyvil</i> {@code derived} access modifier. A member declared as
	 * {@code derived} can only be accessed from the class it is a member of or
	 * subclasses. Unlike {@code protected}, it cannot be accessed from within
	 * the same package.
	 */
	public static final int	DERIVED					= PRIVATE | PROTECTED;
	
	/**
	 * {@code static} modifier.
	 */
	public static final int	STATIC					= 0x00000008;
	
	/**
	 * {@code final} modifier.
	 */
	public static final int	FINAL					= 0x00000010;
	
	/**
	 * <i>Dyvil</i> {@code const} modifier. This modifier is just a shortcut for
	 * {@code static final} and should be used to declare constants.
	 */
	public static final int	CONST					= STATIC | FINAL;
	
	/**
	 * {@code synchronized} modifier.
	 */
	public static final int	SYNCHRONIZED			= 0x00000020;
	
	/**
	 * {@code volatile} modifier.
	 */
	public static final int	VOLATILE				= 0x00000040;
	
	/**
	 * Modifier used to declare a method to be a <i>bridge</i> method, i.e. a
	 * method generated by the compiler to support generic formal parameters.
	 */
	public static final int	BRIDGE					= 0x00000040;
	
	/**
	 * {@code transient} modifier.
	 */
	public static final int	TRANSIENT				= 0x00000080;
	
	/**
	 * Modifier used to declare that the last parameter of a method is a
	 * <i>varargs</i> parameter.
	 */
	public static final int	VARARGS					= 0x00000080;
	
	/**
	 * {@code native} modifier.
	 */
	public static final int	NATIVE					= 0x00000100;
	
	/**
	 * {@code abstract} modifier.
	 */
	public static final int	ABSTRACT				= 0x00000400;
	
	/**
	 * Modifier used to declare that a class is an {@code interface}.
	 */
	public static final int	INTERFACE_CLASS			= 0x00000200 | ABSTRACT;
	
	/**
	 * {@code stricfp} modifier.
	 */
	public static final int	STRICT					= 0x00000800;
	
	/**
	 * Modifier used for fields and methods that are not present in the source
	 * code and generated by the compiler.
	 */
	public static final int	SYNTHETIC				= 0x00001000;
	
	/**
	 * Modifier used to declare a class to be an annotation ({@code @interface}
	 * ).
	 */
	public static final int	ANNOTATION				= 0x00002000;
	
	/**
	 * Modifier used to declare a class to be an {@code enum} class.
	 */
	public static final int	ENUM					= 0x00004000;
	
	/**
	 * Modifier used for constructors and fields of anonymous classes.
	 */
	public static final int	MANDATED				= 0x00008000;
	
	// Type Modifiers
	
	/**
	 * <i>Dyvil</i> {@code object} modifier. If a class is marked with this
	 * modifier, it is a singleton object class. This modifier will be converted
	 * to the {@link object} annotation.
	 */
	public static final int	OBJECT_CLASS			= 0x00010000;
	
	/**
	 * <i>Dyvil</i> {@code object} modifier. If a class is marked with this
	 * modifier, it is a case class. This modifier not be visible in the
	 * bytecode.
	 */
	public static final int	CASE_CLASS				= 0x00020000;
	
	/**
	 * <i>Dyvil</i> {@code functional} modifier. This modifier is a shortcut for
	 * the {@link FunctionalInterface} annotation.
	 */
	public static final int	FUNCTIONAL				= 0x00040000;
	
	// Method Modifiers
	
	/**
	 * <i>Dyvil</i> {@code inline} modifier. If a method is marked with this
	 * modifier, it will be inlined by the compiler to reduce method call
	 * overhead. This modifier will be converted to the {@link inline}
	 * annotation.
	 */
	public static final int	INLINE					= 0x00010000;
	
	/**
	 * <i>Dyvil</i> {@code infix} modifier. If a method is marked with this
	 * modifier, it is a method that can be called on any Object and virtually
	 * has the instance as the first parameter. An infix method is always
	 * static. This modifier will be converted to the {@link infix} annotation.
	 */
	public static final int	INFIX					= 0x00020000 | STATIC;
	
	/**
	 * <i>Dyvil</i> {@code prefix} modifier. If a method is marked with this
	 * modifier, it is a method that can be called on any Object and virtually
	 * uses the first (and only) parameter as the instance. This modifier will
	 * be converted to the {@link prefix} annotation.
	 */
	public static final int	PREFIX					= 0x00040000;
	
	/**
	 * <i>Dyvil</i> {@code override} modifier. This modifier is a shortcut for
	 * the {@link Override} annotation.
	 */
	public static final int	OVERRIDE				= 0x00080000;
	
	// Field Modifiers
	
	/**
	 * <i>Dyvil</i> {@code lazy} modifier. The {@code lazy} modifier can be
	 * applied on fields, variables and parameters and has a different behavior
	 * on each different type. This modifier will be converted to the
	 * {@link lazy} annotation.
	 */
	public static final int	LAZY					= 0x00010000;
	
	// Parameter Modifiers
	
	// LAZY
	
	/**
	 * <i>Dyvil</i> {@code var} modifier. This is used to mark that a parameter
	 * is Call-By-Reference. If a parameter doesn't have this flag, it behaves
	 * like a normal formal parameter. This modifier will be converted to the
	 * {@link var} annotation.
	 */
	public static final int	VAR						= 0x00040000;
	
	// Member Modifiers
	
	/**
	 * <i>Dyvil</i> {@code sealed} modifier. This is used to mark that a class,
	 * method or field is only visible from inside the current library /
	 * project. This modifier will be converted to the {@link sealed}
	 * annotation.
	 */
	public static final int	SEALED					= 0x00100000;
	
	/**
	 * <i>Dyvil</i> {@code deprecated} modifier. This modifier is a shortcut for
	 * the {@link Deprecated} annotation.
	 */
	public static final int	DEPRECATED				= 0x00200000;
	
	/**
	 * The modifiers that can be used to declare the class type (i.e.,
	 * {@code class}, {@code interface}, {@code enum}, {@code object} or
	 * {@code annotation} / {@code @interface})
	 */
	public static final int	CLASS_TYPE_MODIFIERS	= INTERFACE_CLASS | ANNOTATION | ENUM | OBJECT_CLASS;
	
	/**
	 * The access modifiers.
	 */
	public static final int	ACCESS_MODIFIERS		= PUBLIC | PROTECTED | PRIVATE | DEPRECATED | SEALED;
	
	/**
	 * The modifiers that can be used on any member.
	 */
	public static final int	MEMBER_MODIFIERS		= ACCESS_MODIFIERS | DEPRECATED | STATIC | FINAL | SYNTHETIC;
	
	/**
	 * The modifiers that can be used on classes.
	 */
	public static final int	CLASS_MODIFIERS			= MEMBER_MODIFIERS | ABSTRACT | STRICT | CASE_CLASS | FUNCTIONAL;
	
	/**
	 * The modifiers that can be used on fields.
	 */
	public static final int	FIELD_MODIFIERS			= MEMBER_MODIFIERS | TRANSIENT | VOLATILE | LAZY;
	
	/**
	 * The modifiers that can be used on methods.
	 */
	public static final int	METHOD_MODIFIERS		= MEMBER_MODIFIERS | SYNCHRONIZED | NATIVE | STRICT | INLINE | INFIX | PREFIX | DEPRECATED | BRIDGE
															| VARARGS | MANDATED;
	
	/**
	 * The modifiers that can be used on parameters.
	 */
	public static final int	PARAMETER_MODIFIERS		= FINAL | LAZY | VAR;
}
