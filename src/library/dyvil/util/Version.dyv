package dyvil.util

import java.io.Serializable
import java.util.regex.Pattern

/**
 * The **Version** class represents a {@link Comparable comparable} model for the
 * [Semantic Versioning](https://semver.org) format.
 */
@LiteralConvertible.FromString
@LiteralConvertible.FromTuple
@Immutable
final class Version
(
	let major: int
	let minor: int
	let patch: int
	let prerelease: String?
	let build: String?
)
implements Comparable<Version>, Serializable
{
	enum Element
	{
		case MAJOR
		case MINOR
		case PATCH
		case PRERELEASE
		case BUILD
	}

	const serialVersionUID: long = 2514051844985966173L

	const INFO_FORMAT: String = "[\\dA-Za-z\\-]+(?:\\.[\\dA-Za-z\\-]+)*"
	const INFO_PATTERN: Pattern = Pattern.compile(INFO_FORMAT)

	const FORMAT: String = "^v?(\\d+)\\.(\\d+)\\.(\\d+)(?:-(" ++ INFO_FORMAT ++ "))?(?:\\+(" ++ INFO_FORMAT ++ "))?$"
	const PATTERN: Pattern = Pattern.compile(FORMAT)

	static func apply(major: int, minor: int, patch: int) -> Version = Version(major, minor, patch, null, null)

	static func apply(major: int, minor: int, patch: int, prerelease: String? = null, build: String? = null) -> Version
	{
		if (major < 0) throw new IllegalArgumentException("\(Element.MAJOR) must not be negative")
		if (minor < 0) throw new IllegalArgumentException("\(Element.MINOR) must not be negative")
		if (patch < 0) throw new IllegalArgumentException("\(Element.PATCH) must not be negative")
		if (prerelease != null && !INFO_PATTERN.matcher(prerelease).find())
		{
			throw new IllegalArgumentException("\(Element.PRERELEASE) '\(prerelease)' does not match format '\(INFO_FORMAT)'")
		}
		if (build != null && !INFO_PATTERN.matcher(build).find())
		{
			throw new IllegalArgumentException("\(Element.BUILD) '\(build)' does not match format '\(INFO_FORMAT)'")
		}
		return new Version(major, minor, patch, prerelease, build)
	}

	static func apply(version: String) -> Version
	{
		let matcher = PATTERN.matcher(version)
		if (!matcher.matches()) throw new IllegalArgumentException("'\(version)' does not match format '\(FORMAT)'")

		let major = Integer.parseInt(matcher.group(1))
		let minor = Integer.parseInt(matcher.group(2))
		let patch = Integer.parseInt(matcher.group(3))
		let prerelease = matcher.group(4)
		let build = matcher.group(5)
		return new Version(major, minor, patch, prerelease, build)
	}

	func releaseInfo() -> String? = this.prerelease

	func buildInfo() -> String? = this.build

	func isInDevelopment() -> boolean = this.major == 0

	func isStable() -> boolean = this.major > 0

	func next(element: Element) -> Version = element match
	{
		case .MAJOR => return new Version(this.major + 1, 0, 0, null, null)
		case .MINOR => return new Version(this.major, this.minor + 1, 0, null, null)
		case .PATCH => return new Version(this.major, this.minor, this.patch + 1, null, null)
		case _ => throw new IllegalArgumentException('Only major, minor or patch can be incremented')
	}

	override func toString() -> String = new StringBuilder().{
		append(this.major).append('.').append(this.minor).append('.').append(this.patch) // major.minor.patch
		if (this.prerelease != null) append('-').append(this.prerelease) // -prerelease
		if (this.build != null) append('+').append(this.build) // +build
		toString!
	}

	override func equals(obj: any!) -> boolean = this === obj || obj is Version && this.equals(obj as Version)

	func equals(that: Version) -> boolean = this === that || this.major == that.major && this.minor == that.minor && this.patch == that.patch && this.prerelease == that.prerelease

	override func hashCode() -> int
	{
		let prime = 31
		var result = 1
		result = prime * result + this.major
		result = prime * result + this.minor
		result = prime * result + this.patch
		result = prime * result + (this.prerelease?.hashCode() ?? 0)
		return result
	}

	override func compareTo(o: Version) -> int
	{
		var cmp = this.major - o.major
		if (cmp != 0) return cmp

		cmp = this.minor - o.minor
		if (cmp != 0) return cmp

		cmp = this.patch - o.patch
		if (cmp != 0) return cmp

		if (this.prerelease == null)
		{
			return o.prerelease != null ? -1 : 0
		}
		else if (o.prerelease == null)
		{
			return 1
		}
		return this.prerelease!!.compareTo(o.prerelease!!)
	}
}
