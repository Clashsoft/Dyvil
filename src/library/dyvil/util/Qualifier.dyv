package dyvil.util

class Qualifier
{
	public const INSTANCE = new Qualifier

	//           Symbol Name  | Symbol          =  Mnemonic // Proposed Mnemonic
	public const AMPERSAND     /* & */ : String = "amp"     // amp
    public const ASTERISK      /* * */ : String = "times"   // ast
    public const AT            /* @ */ : String = "at"      // at
    public const BACKSLASH     /* \ */ : String = "bslash"  // bsl
    public const BAR           /* | */ : String = "bar"     // bar
    public const CARET         /* ^ */ : String = "up"      // crt
    public const COLON         /* : */ : String = "colon"   // cln
    public const DOT           /* . */ : String = "dot"     // dot
    public const EQ            /* = */ : String = "eq"      // eq
    public const EXCLAMATION   /* ! */ : String = "bang"    // xcl
    public const GREATER       /* > */ : String = "gt"      // gt
    public const HASH          /* # */ : String = "hash"    // hsh
    public const LESS          /* < */ : String = "lt"      // lt
    public const MINUS         /* - */ : String = "minus"   // mns
    public const PERCENT       /* % */ : String = "percent" // per
    public const PLUS          /* + */ : String = "plus"    // pls
    public const QUESTION_MARK /* ? */ : String = "qmark"   // qmk
    public const SLASH         /* / */ : String = "div"     // sls
    public const TILDE         /* ~ */ : String = "tilde"   // tld

	func replaceString(s: String) -> int = s match
	{
		case AMPERSAND     => '&'
		case ASTERISK      => '*'
		case AT            => '@'
		case BACKSLASH     => '\\'
		case BAR           => '|'
		case CARET         => '^'
		case COLON         => ':'
		case DOT           => '.'
		case EQ            => '='
		case EXCLAMATION   => '!'
		case GREATER       => '>'
		case HASH          => '#'
		case LESS          => '<'
		case MINUS         => '-'
		case PERCENT       => '%'
		case PLUS          => '+'
		case QUESTION_MARK => '?'
		case SLASH         => '/'
		case TILDE         => '~'
		case _             => 0
	}

	func replaceCodePoint(c: int) -> String? = c match
	{
		case '&'  => AMPERSAND
		case '*'  => ASTERISK
		case '@'  => AT
		case '\\' => BACKSLASH
		case '|'  => BAR
		case '^'  => CARET
		case ':'  => COLON
		case '.'  => DOT
		case '='  => EQ
		case '!'  => EXCLAMATION
		case '>'  => GREATER
		case '#'  => HASH
		case '<'  => LESS
		case '-'  => MINUS
		case '%'  => PERCENT
		case '+'  => PLUS
		case '?'  => QUESTION_MARK
		case '/'  => SLASH
		case '~'  => TILDE
		case _    => null
	}

	static func qualify(string: String) -> String = qualify(string, INSTANCE)

	static func qualify(string: String, qualifier: Qualifier) -> String
	{
		let length = string.length
		let builder = new StringBuilder(length)
		var i = 0

		while (i < length)
		{
			let codePoint = string.codePointAt(i)
			let replacement = qualifier.replaceCodePoint(codePoint)

			if (replacement != null)
			{
				builder.append('$').append(replacement)
			}
			else
			{
				builder.appendCodePoint(codePoint)
			}

			i += Character.charCount(codePoint)
		}

		return builder.toString()
	}

	static func unqualify(string: String) -> String = unqualify(string, INSTANCE)

	static func unqualify(string: String, qualifier: Qualifier) -> String
	{
		var appendStart = string.indexOf('$')
		if (appendStart < 0)
		{
			// no $ in string - don't apply any replacements
			return string
		}

		let len = string.length
		let builder = new StringBuilder(len)

		// append all characters before the first $
		builder.append(string, 0, appendStart)
		var searchIndex = appendStart

		while (searchIndex < len)
		{
			let cashIndex = string.indexOf('$', searchIndex)
			if (cashIndex < 0) break

			let startIndex = cashIndex + 1
			let endIndex = symbolEndIndex(string, startIndex, len)
			searchIndex = endIndex

			if (startIndex == endIndex)
			{
				// $$ or $_
				continue
			}

			let key = string.substring(startIndex, endIndex)
			let replacement = qualifier.replaceString(key)

			if (replacement > 0)
			{
				builder.append(string, appendStart, cashIndex)
				builder.appendCodePoint(replacement)
				appendStart = endIndex
			}
		}

		builder.append(string, appendStart, len)
		return builder.toString()
	}

	private static func symbolEndIndex(string: String, start: int, end: int) -> int
	{
		while (start < end)
		{
			match string.charAt(start)
			{
				case '$' | '_' => return start
				case _ => start++
			}
		}
		return end
	}
}
