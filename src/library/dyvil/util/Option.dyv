package dyvil.util

import java.io.Serializable

@LiteralConvertible.FromTuple
@Immutable
public interface Option<T> extends Serializable
{
	static func of<T>(value: T?) -> Option<T> = value == null ? None : new Some<T>(value)

	static func apply<T>() -> Option<T> = None

	static func apply<T>(value: T) -> Option<T> = new Some<T>(value)

	// Instance Methods

	func get() -> T

	func isPresent() -> boolean

	func forEach(action: T -> void) -> void

	func filter(predicate: T -> boolean) -> Option<T>

	func map<U>(mapper: T -> U) -> Option<U>

	func flatMap<U>(mapper: T -> Option<U>) -> Option<U>

	func orElse<U>(value: U) -> T|U

	@OverloadPriority
	func orElse<U>(supplier: -> U) -> T|U

	// Operators

	postfix inline func ! <T>(lhs: Option<T>) -> T = lhs.get

	infix inline func ?? <T, U>(lhs: Option<T>, rhs: -> U) -> T|U = lhs.orElse(rhs)
}
