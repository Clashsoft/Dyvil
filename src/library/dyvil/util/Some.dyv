package dyvil.util

@Immutable
@LiteralConvertible.FromTuple
public case class Some<T>(let value: T) implements Option<T>
{
	static final func unapply<T>(option: Option<T>!) -> Tuple<T>? = option is Some ? unapply(option as Some<T>) : null

	override func get() -> T = this.value

	override func isPresent() -> boolean = true

	override func forEach(action: T -> void) -> void = action(this.value)

	override func filter(predicate: T -> boolean) -> Option<T> = predicate(this.value) ? this : None

	override func map<U>(mapper: T -> U) -> Option<U> = Some(mapper(this.value))

	override func flatMap<U>(mapper: T -> Option<U>) -> Option<U> = mapper(this.value)

	override func orElse<U>(value: U) -> T = this.value

	@OverloadPriority
	override func orElse<U>(supplier: -> U) -> T = this.value
}
