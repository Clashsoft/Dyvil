package dyvil.random

interface Random
{
	static func apply() -> Random = new JavaRandom()

	static func apply(seed: long) -> Random = new JavaRandom(seed)

	func next(bits: int) -> int

	func nextBoolean() -> boolean = this.next(1) > 0

	func nextBoolean(f: float) -> boolean = this.nextFloat() < f

	func nextByte() -> byte = this.next(7) as byte

	func nextByte(max: byte) -> byte = this.nextInt(max) as byte

	func nextByte(min: byte, max: byte) -> byte = (min + this.nextInt(max - min + 1)) as byte

	func nextShort() -> short = this.next(15) as short

	func nextShort(max: short) -> short = this.nextInt(max) as short

	func nextShort(min: short, max: short) -> short = (min + this.nextInt(max - min + 1)) as short

	func nextChar() -> char = this.next(16) as char

	func nextChar(max: char) -> char = this.nextInt(max) as char

	func nextChar(min: char, max: char) -> char = (min + this.nextInt(max - min + 1)) as char

	func nextInt() -> int = this.next(31)

	func nextInt(max: int) -> int
	{
		var r = this.next(31)
		let m = max - 1
		if ((max & m) == 0)
		{
			return (max * (r as long) >> 31) as int
		}

		var u = r
		while (u - (r = u % max) + m < 0)
		{
			u = this.next(31)
		}
		return r
	}

	func nextInt(min: int, max: int) -> int = min + this.nextInt(max - min + 1)

	func nextInt(f: float) -> int = (f + (this.nextFloat() < f ? 0 : 1)) as int

	func nextLong() -> long = ((this.next(32) as long) << 32) + this.next(32)

	func nextLong(max: long) -> long
	{
		var r = this.nextLong()
		let m = max - 1
		if ((max & m) == 0L)
		{
			return r & m
		}

		var u = r >>> 1
		while (u + m - (r = u % max) < 0L)
		{
			u = this.nextLong() >>> 1
		}
		return r
	}

	func nextLong(min: long, max: long) -> long = min + this.nextLong(max - min + 1)

	func nextFloat() -> float = this.next(24) / (1 << 24)

	func nextFloat(max: float) -> float = this.nextFloat() * max

	func nextFloat(min: float, max: float) -> float = min + this.nextFloat() * (max - min)

	func nextDouble() -> double = (((this.next(26) as long) << 27) + this.next(27)) / (1L << 52)

	func nextDouble(max: double) -> double = this.nextDouble() * max

	func nextDouble(min: double, max: double) -> double = min + this.nextDouble() * (max - min)

	func nextGaussian() -> double
}
