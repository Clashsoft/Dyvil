package dyvil.tuple

abstract class Tuple
{
	private init() {} // no instances

	// Wrapper class for a Tuple of more than MAX_ARITY entries, stored in an array
	case class OfN(private let data: any! ...)
	{
		func subscript(n: int) -> any! = this.data[n]

		override func toString() -> String
		{
			let buf = new StringBuilder
			this.data.toString(buf)
			buf.setCharAt(0, '(')
			buf.setCharAt(buf.length - 1, ')')
			return buf.toString!!
		}
	}

	case class Of1<type +T1>(public let _1: T1)
	{
		func unapply() -> Of1<T1> = this

		override func toString() -> String = "Tuple(\(this._1))"
	}

	case class Of2<type +T1, type +T2>
	(
		public let _1: T1
		public let _2: T2
	) implements Entry<T1, T2>
	{
		func unapply() -> (T1, T2) = this

		override func getKey() -> T1 = this._1

		override func getValue() -> T2 = this._2

		override func toString() -> String = "(\(this._1), \(this._2))"

		override func equals(obj: any!) -> boolean = Entry.entryEquals(this, obj)

		override func hashCode() -> int = Entry.entryHashCode(this)
	}

	case class Of3<type +T1, type +T2, type +T3>
	(
		public let _1: T1
		public let _2: T2
		public let _3: T3
	) implements Cell<T1, T2, T3>
	{
		func unapply() -> (T1, T2, T3) = this

		override func getRow() -> T1 = this._1

		override func getColumn() -> T2 = this._2

		override func getValue() -> T3 = this._3

		override func toString() -> String = "(\(this._1), \(this._2), \(this._3))"

		override func equals(obj: any!) -> boolean = Cell.cellEquals(this, obj)

		override func hashCode() -> int = Cell.cellHashCode(this)
	}

#import Base.dgs
#for ARITY; 4; MAX_ARITY

	@Immutable
	case class Of##ARITY <
	#for INDEX; 1; ARITY
		type +T##INDEX
	#end
	> (
	#for INDEX; 1; ARITY
			public let _##INDEX: T##INDEX
	#end
	)
	{
		func unapply() -> (
	#for INDEX; 1; ARITY
			T##INDEX,
	#end
		) = this

		override func toString() -> String = new StringBuilder()
			.append('(').append(this._1)
	#for INDEX; 2; ARITY
			.append(', ').append(this._##INDEX)
	#end
			.append(')').toString!!
	}
#end
}
