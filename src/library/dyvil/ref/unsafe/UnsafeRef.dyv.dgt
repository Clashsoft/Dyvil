// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.ref.unsafe

import dyvil.ref.#(TYPE_NAME)Ref
import dyvil.reflect.ReflectUtils.UNSAFE

import java.lang.reflect.Field

#if (IS_OBJECT) {
	class UnsafeObjectRef<type T>(
		protected let base: Object!
		protected let offset: long
	) implements ObjectRef<T>
}
#else {
	class Unsafe#(TYPE_NAME)Ref(
		protected let base: Object!
		protected let offset: long
	) implements #(TYPE_NAME)Ref
}
{
	public init(staticField: Field)
	{
		this.init(UNSAFE.staticFieldBase(staticField), UNSAFE.staticFieldOffset(staticField))
	}

	public init(receiver: Object!, field: Field)
	{
		this.init(receiver, UNSAFE.objectFieldOffset(field))
	}

	#if (IS_OBJECT) {
		override func get() -> T = UNSAFE.getObject(this.base, this.offset) as T
	}
	#else {
		override func get() -> PRIMITIVE = UNSAFE.get#(TYPE_NAME)(this.base, this.offset)
	}

	override func set(value: PRIMITIVE) -> void = UNSAFE.put#(TYPE_NAME)(this.base, this.offset, value)
}
