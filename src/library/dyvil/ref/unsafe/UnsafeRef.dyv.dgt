// GEN_NOTICE
// Timestamp: TIME_STAMP

package dyvil.ref.unsafe

import dyvil.ref.TYPE_NAME##Ref
import dyvil.reflect.ReflectUtils

import java.lang.reflect.Field

#if IS_OBJECT
class Unsafe##TYPE_NAME##Ref<type T>(
	protected let base: Object!
	protected let offset: long
) implements TYPE_NAME##Ref<T>
#else
class Unsafe##TYPE_NAME##Ref(
	protected let base: Object!
	protected let offset: long
) implements TYPE_NAME##Ref
#end
{
	public init(staticField: Field)
	{
		this.init(ReflectUtils.UNSAFE.staticFieldBase(staticField), ReflectUtils.UNSAFE.staticFieldOffset(staticField))
	}

	public init(receiver: Object!, field: Field)
	{
		this.init(receiver, ReflectUtils.UNSAFE.objectFieldOffset(field))
	}

#if IS_OBJECT
	override func get() -> T = ReflectUtils.UNSAFE.get##TYPE_NAME(this.base, this.offset) as T
#else
	override func get() -> PRIMITIVE = ReflectUtils.UNSAFE.get##TYPE_NAME(this.base, this.offset)
#end

	override func set(value: PRIMITIVE) -> void = ReflectUtils.UNSAFE.put##TYPE_NAME(this.base, this.offset, value)
}
