package dyvil.ref.unsafe;

import dyvil.ref.$refClassName$;
import dyvil.reflect.ReflectUtils;

import java.lang.reflect.Field;

public final class $className$ implements $refClassName$
{
	private final Object base;
	private final long   offset;

	public $className$(Field staticField)
	{
		this.base = ReflectUtils.UNSAFE.staticFieldBase(staticField);
		this.offset = ReflectUtils.UNSAFE.staticFieldOffset(staticField);
	}

	public $className$(Object instance, Field field)
	{
		this.base = instance;
		this.offset = ReflectUtils.UNSAFE.objectFieldOffset(field);
	}

	public $className$(Object base, long offset)
	{
		this.base = base;
		this.offset = offset;
	}

	@Override
	public $primitive$ get()
	{
		return ReflectUtils.UNSAFE.get$accessType$(this.base, this.offset);
	}

	@Override
	public void set($primitive$ value)
	{
		ReflectUtils.UNSAFE.put$accessType$(this.base, this.offset, value);
	}
}
