package dyvil.annotation

import java.lang.annotation._

/**
 * Annotation for <b>intrinsic</b> methods using JVM instructions for method invocation. Instead of a {@code INVOKE}
 * instruction, the compiler inserts the opcodes specified by {@link #value()}. This annotation is primarily used for
 * methods that have a very common implementation such that simple inlining performed by the compiler is not efficient
 * enough, since it has to store all parameters to the inlined call into local variables first.
 * <p>
 * The <b>Intrinsic</b> annotation is also designed to work with {@code if} or {@code while} statements and conditional
 * jumps. Jump instructions that would require a Label as parameter can be part of the {@link #value() opcode array} ,
 * and the <i>Dyvil Compiler</i> will automatically insert the Labels after the opcode.
 */
@Target([ .METHOD ])
@Retention(.CLASS)
@interface Intrinsic(
	let value: [int]
	let strings: [String] = []
	let compilerCode: int = 0
)
{
	// Compiler-Codes
	const STRING_CONCAT : int = 1
	const BOOLEAN_NOT   : int = 2
	const BOOLEAN_AND   : int = 3
	const BOOLEAN_OR    : int = 4
	const ARRAY_SPREAD  : int = 6

	const OPTIONAL_UNWRAP : int = 32
	const FORCE_UNWRAP    : int = 33
	const OPTIONAL_CHAIN  : int = 34
	const NULL_COALESCING : int = 35
}
