package dyvil.annotation

import java.lang.annotation._

/**
 * Marks a mutating method, i.e. a method that mutates the members of a mutable type. If a method annotated as {@code
 * mutating} is called on any instance of the {@link Immutable} interface, the compiler should report the error
 * specified by {@link #value()}.
 */
@Target([ ElementType.METHOD ])
@Retention(RetentionPolicy.RUNTIME)
public @interface Mutating(
	/**
	 * Returns the error to be reported by the compiler when a mutating method is called on an immutable callee.
	 * <p>
	 * The compiler will automatically replace special tokens in the returned string. These tokens include: <ul>
	 * <li>{@code method} - The name of the method <li>{@code type} - The type of the callee </ul>
	 *
	 * @return the error to be reported by the compiler
	 */
	String value = VALUE_DEFAULT)
{
	const let VALUE_DEFAULT: String = "Invalid invocation of mutating method {method} on immutable type {type}"
}
