
# Headers

header.separator=invalid header declaration - ';' expected
header.declaration.identifier=invalid header declaration - identifier expected
header.declaration.duplicate=duplicate header declaration
header.class=invalid class declaration - class declarations are not allowed in header files
header.element.invalid=invalid header element - unexpected token '%s'

# Type Aliases

typealias.type=invalid type alias - 'type' expected
typealias.identifier=invalid type alias - identifier expected
typealias.equals=invalid type alias - '=' expected

# Package Declarations

package.package=invalid package declaration - 'package' expected
package.identifier=invalid package declaration - identifier expected
package.dot=invalid package declaration - '.' or ';' expected

# Import Declarations

import.identifier=invalid import declaration - identifier expected
import.dot=invalid import declaration - '.' or ';' expected
import.alias.identifier=invalid import alias - identifier expected
import.multi.comma=invalid import list - ',' expected
import.multi.close_brace=invalid multi-import - '}' expected
import.wildcard.java=Java-style wildcard imports are discouraged; replace this token with '._'

# Operators

operator.type.invalid=invalid operator - 'infix', 'prefix' or 'postfix' expected
operator.identifier=invalid operator - identifier expected
operator.identifier2=invalid operator - secondary identifier expected
operator.identifier.not_symbol=letter identifiers as operator names are deprecated
operator.operator=invalid operator - 'operator' expected

operator.prefix.associativity=invalid prefix operator - prefix operators cannot define an associativity
operator.prefix.precedence=invalid prefix operator - prefix operators cannot define a precedence
operator.postfix.associativity=invalid postfix operator - postfix operators cannot define an associativity
operator.postfix.precedence=invalid postfix operator - postfix operators cannot define a precedence
operator.ternary.associativity=invalid ternary operator - ternary operators cannot define an associativity
operator.separator=invalid operator - '{' or ';' expected

operator.property.invalid=invalid operator property - unexpected token '%s'
operator.property.comma=invalid operator property list - ',' expected
operator.property.precedence=invalid operator precedence - integer expected
operator.property.associativity=invalid operator associativity - 'left', 'none' or 'right' expected

# Annotations

annotation.name=invalid annotation - identifier expected
annotation.parenthesis=invalid annotation - ')' expected

# --------------- Classes ---------------

class.identifier=invalid class declaration - identifier expected
class.identifier.invalid=invalid class name '%s' (%s) - class names can only contain '_' or alphanumeric characters
class.parameters.close_paren=invalid class parameter list - ')' expected
class.extends.close_paren=invalid super class argument list - ')' expected
class.interface.implements=invalid interface inheritance - interfaces cannot 'implement' other interfaces; use 'extends' instead
class.body.separator=invalid class declaration - '{' or ';' expected
class.body.open_brace=invalid class body - '{' expected
class.body.close_brace=invalid class body - '}' expected
class.body.declaration.end=invalid member declaration - ';' or '}' expected
class.anonymous.body.end=invalid anonymous class body - '}' expected

# --------------- Members ---------------

member.type=invalid member declaration - type expected
member.declarator=invalid member declaration - declarator, modifier or annotation expected
member.identifier=invalid member declaration - identifier expected

# Constructors

initializer.call.type=invalid initializer call - 'this' or 'super' expected
initializer.call.open_paren=invalid initializer call - '(' expected
initializer.call.close_paren=invalid initializer call - ')' expected

constructor.call.close_paren=invalid constructor call - ')' expected
constructor.parameters.open_paren=invalid constructor parameter list - '(' expected
constructor.parameters.close_paren=invalid constructor parameter list - ')' expected

# Fields

field.identifier=invalid field declaration - identifier expected
field.separator=invalid field declaration - ';', '=' or '{' expected
field.enum.invalid=invalid enum constant declaration - enum constants can only be declared in enum classes

# Methods

method.identifier=invalid method declaration - identifier expected
method.parameters.close_paren=invalid method parameter list - ')' expected
method.declaration.separator=invalid method declaration - ';', '=', '(', '[', '{' or 'throws' expected
method.body.separator=invalid method declaration - ';', '=', '{' or 'throws' expected
method.throws.comma=invalid exception list - ',' expected
method.type.colon.deprecated=using ':' for method type ascription is deprecated; replace this token with '->'

method.call.close_paren=invalid argument list - ')' expected
method.call.generic.close_angle=invalid type argument list - '>' expected
method.subscript.close_bracket=invalid subscript arguments - ']' expected

# Parameters

parameter.identifier=invalid parameter - identifier expected
parameter.separator=invalid parameter list - ',' or ')' expected
parameter.this_type.invalid=invalid this type - explicit this types are not allowed in this context

argument_list.separator=invalid argument list - ',' expected

# Generic Type Arguments

generic.close_angle=invalid method type parameter list - '>' expected

# Properties

property.separator=invalid property declaration - ':', ';' or '{' expected
property.tag=invalid property tag - 'init', 'get' or 'set' expected
property.setter.identifier=invalid property setter - identifier expected
property.setter.close_paren=invalid property setter - ')' expected

# --------------- Types ---------------

type.expected=invalid token '%s' - type expected
type.invalid=invalid type - unexpected token '%s'
type.tuple.close_paren=invalid tuple type - ')' expected
type.tuple.lambda_arrow=invalid function type - '->' expected
type.array.close_bracket=invalid array type - ']' expected
type.generic.close_angle=invalid generic type - '>' expected
type.list.comma=invalid type list - ',' expected
type.array.java=Java-style array types are discouraged; use '[<type>]' instead of '<type>[]'

# Type Parameters

type_parameter.identifier=invalid type parameter - identifier expected
type_parameter.bound.invalid=invalid type parameter bound - ':', 'extends' or 'super' expected
type_parameter.list.comma=invalid type parameter list - ',' expected

# --------------- Expressions ---------------

expression.expected=invalid token '%s' - expression expected
expression.invalid=invalid expression - unexpected token '%s'

expression.list.comma=invalid expression list - ',' expected

expression.infix.before=invalid infix operator - expression expected before this token
expression.infix.after=invalid infix operator - expression expected after this token
expression.access.invalid=invalid access - unexpected token '%s'
expression.access.dot.invalid=invalid dot access - identifier or '{' expected

expression.else=invalid expression - 'else' is not allowed here
expression.catch=invalid expression - 'catch' is not allowed here
expression.finally=invalid expression - 'finally' is not allowed here

# This and Super

this.close_angle=invalid this expression - '>' expected
super.close_angle=invalid super expression - '>' expected

# Type and Class Operators

classoperator.close_paren=invalid class operator - ')' expected
classoperator.close_angle=invalid class operator - '>' expected
typeoperator.close_paren=invalid type operator - ')' expected
typeoperator.close_angle=invalid type operator - '>' expected

# String Interpolations

stringinterpolation.expression=invalid string interpolation - expression expected
stringinterpolation.part=invalid string interpolation - string part expected

# Tuples and Lambdas

tuple.close_paren=invalid tuple expression - ')' expected

lambda.close_paren=invalid lambda expression - ')' expected
lambda.arrow=invalid lambda expression - '=>' expected

# Arrays and Maps

array.open_bracket=invalid array literal - '[' expected
array.separator=invalid array literal - ',' expected

map.separator=invalid map literal - ',' expected
map.colon=invalid map literal - ':' expected

# Match Expressions

match.match_keyword=invalid match expression - 'match' expected
match.brace_case=invalid match expression - '{' or 'case' expected
match.case=invalid match expression - 'case' or '}' expected
match.case.action=invalid match case - ':', '=>' or '{' expected
match.case.end=invalid match case - ';' expected

# Throw Statements

throw.expression=invalid throw statement - expression expected

# --------------- Statements ---------------

statement.single.deprecated.fix=suppress this warning by adding '{' and '}' around the body

# Statement Lists

statement_list.open_brace=invalid statement list - '{' expected
statement_list.close_brace=invalid statement list - '}' expected
statement_list.semicolon=invalid statement list - ';' expected
statement_list.label.name=invalid label - identifier expected
statement_list.label.separator=invalid label - ':' expected
statement_list.lambda.arrow=invalid statement list - '=>' expected
statement_list.lambda.close_paren=invalid statement list - ')' expected

variable.identifier=invalid variable declaration - identifier or '_' expected

# If Statements

if.keyword=invalid if statement - 'if' expected
if.open_paren=invalid if statement - '(' expected
if.close_paren=invalid if statement - ')' expected
if.binding.assignment=invalid binding if statement - '=' expected
if.single.deprecated=single-statement if branches are deprecated
else.single.deprecated=single-statement else branches are deprecated

# While and Repeat Loops

while.keyword=invalid while loop - 'while' expected
while.single.deprecated=single-statement while loops are deprecated

repeat.keyword=invalid repeat loop - 'repeat' expected
repeat.single.deprecated=single-statement repeat loops are deprecated

# For Loops

for.keyword=invalid for loop - 'for' expected
for.variable.separator=invalid for loop - '<-' expected after variable
for.close_paren=invalid for loop - ')' expected
for.single.deprecated=single-statement for loops are deprecated

# Synchronized Blocks

synchronized.keyword=invalid synchronized block - 'synchronized' expected
synchronized.single.deprecated=single-statement synchronized blocks are deprecated

# Try Statements

try.catch.close_paren=invalid catch block - ')' expected"

# --------------- Patterns ---------------

pattern.expected=invalid token '%s' - pattern expected
pattern.enum.identifier=invalid enum pattern - identifier expected
pattern.tuple.close_paren=invalid tuple pattern - ')' expected
pattern.case_class.close_paren=invalid case class pattern - ')' expected
pattern.number.negative=invalid number literal pattern - number expected after '-'
pattern.list.comma=invalid pattern list - ',' expected
