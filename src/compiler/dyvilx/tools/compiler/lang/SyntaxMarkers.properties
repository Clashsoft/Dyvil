
# Headers

header.declaration.duplicate=Duplicate Header Declaration
header.element=Invalid Header Declaration - 'class' expected
header.element.invalid=Invalid Header Element - Invalid %s

# Type Aliases

typealias.type=Invalid Type Alias - 'type' expected
typealias.identifier=Invalid Type Alias - Identifier expected
typealias.equals=Invalid Type Alias - '=' expected

# Package Declarations

package.package=Invalid Package Declaration - 'package' expected
package.identifier=Invalid Package Declaration - Identifier expected
package.dot=Invalid Package Declaration - '.' or ';' expected

# Import Declarations

import.identifier=Invalid Import Declaration - Identifier expected
import.dot=Invalid Import Declaration - '.' or ';' expected
import.alias.identifier=Invalid Import Alias - Identifier expected
import.multi.comma=Invalid Import List - ',' expected
import.multi.close_brace=Invalid Multi-Import - '}' expected
import.wildcard.java=Java-Style Wildcard Imports are discouraged; replace this token with '._'

# Operators

operator.type.invalid=Invalid Operator - 'infix', 'prefix' or 'postfix' expected
operator.identifier=Invalid Operator - Identifier expected
operator.identifier.not_symbol=Letter Identifiers as Operator Names are deprecated
operator.operator=Invalid Operator - 'operator' expected

operator.prefix.associativity=Invalid Prefix Operator - Prefix Operators cannot define an associativity
operator.prefix.precedence=Invalid Prefix Operator - Prefix Operators cannot define a precedence
operator.postfix.associativity=Invalid Postfix Operator - Postfix Operators cannot define an associativity
operator.postfix.precedence=Invalid Postfix Operator - Postfix Operators cannot define a precedence
operator.ternary.associativity=Invalid Ternary Operator - Ternary Operators cannot define an associativity
operator.separator=Invalid Operator - '{' or ';' expected

operator.property.invalid=Invalid Operator Property - Unexpected %s
operator.property.comma=Invalid Operator Property List - ',' expected
operator.property.precedence=Invalid Operator Precedence - Integer expected
operator.property.associativity=Invalid Operator Associativity - 'left', 'none' or 'right' expected

# Annotations

annotation.name=Invalid Annotation - Name expected
annotation.parenthesis=Invalid Annotation - ')' expected

# ---------------------------------------- Classes ----------------------------------------

class.identifier=Invalid Class Declaration - Identifier expected
class.parameters.close_paren=Invalid Class Parameter List - ')' expected
class.extends.close_paren=Invalid Super Class Argument List - ')' expected
class.interface.implements=Interfaces cannot implement other interfaces; use 'extends' instead
class.body.separator=Invalid Class Declaration - '{' or ';' expected
class.body.open_brace=Invalid Class Body - '{' expected
class.body.close_brace=Invalid Class Body - '}' expected
class.body.declaration.end=Invalid Member Declaration - ';' or '}' expected
class.body.declaration.invalid=Invalid Member Declaration - ';', '=', '(', '<' or '{' expected after Identifier
class.anonymous.body.end=Invalid Anonymous Class Body - '}' expected

# ---------------------------------------- Members ----------------------------------------

member.type=Invalid Member Declaration - Type expected
member.declarator=Invalid Member Declaration - Declarator, Modifier or Annotation expected
member.identifier=Invalid Member Declaration - Identifier expected

# Constructors

initializer.call.type=Invalid Initializer Call - 'this' or 'super' expected
initializer.call.open_paren=Invalid Initializer Call - '(' expected
initializer.call.close_paren=Invalid Initializer Call - ')' expected

constructor.call.close_paren=Invalid Constructor Call - ')' expected
constructor.parameters.open_paren=Invalid Constructor Parameter List - '(' expected
constructor.parameters.close_paren=Invalid Constructor Parameter List - ')' expected

# Fields

field.identifier=Invalid Field Declaration - Identifier expected
field.separator=Invalid Field Declaration - ';', '=' or '{' expected
field.enum.invalid=Invalid Enum Constant Declaration - Enum Constants cannot only be declared in enum classes

# Methods

method.identifier=Invalid Method Declaration - Identifier expected
method.parameters.close_paren=Invalid Method Parameter List - ')' expected
method.declaration.separator=Invalid Method Declaration - ';', '=', '(', '[', '{' or 'throws' expected
method.body.separator=Invalid Method Declaration - ';', '=', '{' or 'throws' expected
method.throws.comma=Invalid Exception List - ',' expected
method.type.colon.deprecated=Using ':' for method type ascription is deprecated; replace this token with '->'
method.type.duplicate=Invalid Method Type Ascription - The Method was already declared with a type

method.call.close_paren=Invalid Argument List - ')' expected
method.call.generic.close_angle=Invalid Type Argument List - '>' expected
method.subscript.close_bracket=Invalid Subscript Arguments - ']' expected

# Parameters

parameter.identifier=Invalid Parameter - Identifier expected
parameter.separator=Invalid Parameter List - ',' or ')' expected
parameter.this_type.invalid=Invalid This Type - Explicit This Types are not allowed in this context

arguments.expression=Invalid Argument List - Expression expected after Label
arguments.separator=Invalid Argument List - ',' expected

# Generic Type Arguments

generic.close_angle=Invalid Method Type Parameter List - '>' expected

# Properties

property.separator=Invalid Property Declaration - ':', ';' or '{' expected
property.tag=Invalid Property - Identifier expected
property.tag.unknown=Invalid Property Tag - 'get' or 'set' expected
property.setter.identifier=Invalid Property Setter - Identifier expected
property.setter.close_paren=Invalid Property Setter - ')' expected

# ---------------------------------------- Types ----------------------------------------

type.invalid=Invalid Type - Invalid %s
type.tuple.close_paren=Invalid Tuple Type - ')' expected
type.tuple.lambda_arrow=Invalid Lambda Type - '->' expected
type.array.close_bracket=Invalid Array Type - ']' expected
type.generic.close_angle=Invalid Generic Type - '>' expected
type.list.comma=Invalid Type List - ',' expected
type.array.java=Java-Style Array Types are discouraged; use '[type]' instead of 'type[]'

# Type Parameters

type_parameter.identifier=Invalid Type Parameter - Identifier expected
type_parameter.bound.invalid=Invalid Type Parameter Bound - 'extends' or 'super' expected
type_parameter.list.comma=Invalid Type Parameter List - ',' expected

# ---------------------------------------- Expressions ----------------------------------------

expression.list.comma=Invalid Expression List - ',' expected

expression.infix.before=Invalid Infix Operator - Expression expected before this token
expression.infix.after=Invalid Infix Operator - Expression expected after this token
expression.invalid=Invalid Expression - Unexpected %s
expression.access.invalid=Invalid Access - Unexpected %s
expression.access.dot.invalid=Invalid Dot Access - Identifier or '{' expected

expression.else=Invalid Expression - 'else' not allowed at this location
expression.catch=Invalid Expression - 'catch' not allowed at this location
expression.finally=Invalid Expression - 'finally' not allowed at this location


# This and Super

this.close_angle=Invalid This Expression - '>' expected
super.close_angle=Invalid Super Expression - '>' expected

# Type and Class Operators

classoperator.close_paren=Invalid Class Operator - ')' expected
classoperator.close_angle=Invalid Class Operator - '>' expected
typeoperator.close_paren=Invalid Type Operator - ')' expected
typeoperator.close_angle=Invalid Type Operator - '>' expected

# String Interpolations

stringinterpolation.expression=Invalid String Interpolation - Expression expected
stringinterpolation.part=Invalid String Interpolation - String Part expected
match.case.action=Invalid Match Case - ':', '=>' or '{' expected
match.case.end=Invalid Match Case - ';' expected

# Tuples and Lambdas

tuple.close_paren=Invalid Tuple Expression - ')' expected

lambda.close_paren=Invalid Lambda Expression - ')' expected
lambda.arrow=Invalid Lambda Expression - '=>' expected

# Arrays and Maps

array.open_bracket=Invalid Array Literal - '[' expected
array.separator=Invalid Array Literal - ',' expected
array.map.colon=Invalid Map Literal - ':' expected

# Match Expressions

match.match_keyword=Invalid Match Expression - 'match' expected
match.brace_case=Invalid Match Expression - '{' or 'case' expected
match.case=Invalid Match Expression - 'case' or '}' expected

# ---------------------------------------- Statements ----------------------------------------

# Statement Lists

statement_list.open_brace=Invalid Statement List - '{' expected
statement_list.close_brace=Invalid Statement List - '}' expected
statement_list.semicolon=Invalid Statement List - ';' expected
statement_list.label.name=Invalid Label - Identifier expected
statement_list.label.separator=Invalid Label - ':' expected
statement_list.lambda.arrow=Invalid Statement List - '=>' expected
statement_list.lambda.close_paren=Invalid Statement List - ')' expected

variable.identifier=Invalid Variable Declaration - Identifier expected

# If Statements

if.if_keyword=Invalid If Statement - 'if' expected
if.binding.assignment=Invalid Binding If Statement - '=' expected

# While and Repeat Statements

while.while_keyword=Invalid While Statement - 'while' expected
repeat.repeat_keyword=Invalid Repeat Statement - 'repeat' expected

# For Statements

for.for_keyword=Invalid For Statement - 'for' expected
for.open_paren=Invalid For Statement - '(' expected
for.variable.separator=Invalid For Statement - ';', ':', '<-' or 'in' expected after Variable
for.variable.semicolon=Invalid For Statement - ';' expected after Variable
for.condition.semicolon=Invalid For Statement - ';' expected after Condition
for.close_paren=Invalid For Statement - ')' expected
for.separator=Invalid For Statement - '{' expected

# Synchronized Statements

sync.synchronized=Invalid Synchronized Statement - 'synchronized' expected

# Try Statements

try.catch.close_paren=Invalid Catch Expression - ')' expected"

# ---------------------------------------- Patterns ----------------------------------------

pattern.invalid=Invalid Pattern - Unexpected %s
pattern.enum.identifier=Invalid Enum Pattern - Identifier expected
pattern.tuple.close_paren=Invalid Tuple Pattern - ')' expected
pattern.case_class.close_paren=Invalid Case Class Pattern - ')' expected
pattern.number.negative=Invalid Number Literal Pattern - Number expected after '-'
pattern.list.comma=Invalid Pattern List - ',' expected
