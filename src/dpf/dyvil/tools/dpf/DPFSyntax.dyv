package dyvil.tools.dpf

import dyvil.tools.parsing.Name
import dyvil.tools.dpf.ast._
import dyvil.tools.dpf.ast.builder._
import dyvil.tools.dpf.ast.value._

public class DPFSyntax
{
	@LiteralConvertible.FromColonOperator
	public static class PropertyPair(
		public let name: Name!
		public let value: Value
	)
	{
		static final func apply(Name! name, any value) -> PropertyPair = new PropertyPair(name, Value.wrap(value))
	}

	@LiteralConvertible.FromColonOperator
	public static class BuilderParameter extends PropertyPair
	{
		static final func apply(Name? name, any value) -> BuilderParameter = new BuilderParameter(name, Value.wrap(value))

		static final func apply(Name? name, Value value) -> BuilderParameter = new BuilderParameter(name, value)

        implicit static func apply(any value) -> BuilderParameter = new BuilderParameter(null, Value.wrap(value))

		implicit static func apply(Value value) -> BuilderParameter = new BuilderParameter(null, value)

        public init(Name? name, Value value)
		{
			super.init(name, value)
		}
	}

	static func dpf(Configure<RootNode> configure) -> RootNode = new RootNode().use(configure)

	/**
	 * Node creation:
	 *
	 * "name" { ... }
	 */
	infix func apply(Name name, Configure<Node> configure) -> Node = new Node(name).use(configure)

	/**
	 * Nested Node creation
	 *
	 * "parent" {
	 *     "child" { ... }
	 * }
	 */
	infix func applyStatement(Node base, Node node) -> void = base.add(node)

	/**
	 * Property creation with Colon
	 * "name": value
	 */
	infix func applyStatement(Node base, PropertyPair property) -> void
	{
		base.add(new Property(property.name, property.value))
	}

	infix func apply(Builder builder, Configure<Node> configure) -> Builder
	{
		configure(builder.visitNode())
		return builder
	}

	infix func apply(Name name, BuilderParameter... parameters) -> Builder
	{
		let builder = new Builder(name)

		for (var pair <- parameters)
		{
			builder.add(Parameter(pair.name, pair.value))
		}

		return builder
	}
}
