package dyvil.tools.dpf.converter.string

import dyvil.tools.dpf.visitor._
import dyvil.tools.parsing.Name

public class Printer implements NodeVisitor, ValueVisitor, ListVisitor, MapVisitor, BuilderVisitor, StringInterpolationVisitor
{
	private int indent = 0
	
	private void printIndent()
	{
		for (int i <- 0 ..< this.indent)
		{
			System.out.print('\t')
		}
	}

	private void value(String text)
	{
		System.out.print('\t')
		System.out.println(text)
	}

	private void holder(String text)
	{
		this.printIndent()
		System.out.print(text)
	}

	private void section(String text)
	{
		this.printIndent()
		System.out.println(text)
		this.indent++
	}
	
	public override NodeVisitor visitNode(Name name)
	{
		this.section("Node " + name);
		return this;
	}
	
	public override ValueVisitor visitProperty(Name name)
	{
		this.holder("Property \(name):");
		return this;
	}
	
	public override NodeVisitor visitNodeAccess(Name name)
	{
		this.section("Access " + name);
		return this;
	}
	
	public override void visitInt(int value)
	{
		this.value("Int " + value);
	}
	
	public override void visitLong(long value)
	{
		this.value("Long " + value);
	}
	
	public override void visitFloat(float value)
	{
		this.value("Float " + value);
	}
	
	public override void visitDouble(double value)
	{
		this.value("Double " + value)
	}
	
	public override void visitString(String value)
	{
		this.value("String '" + value + "'")
	}

	public override func visitName(value: Name) -> void = this.value("Name " + value)

	public override StringInterpolationVisitor visitStringInterpolation()
	{
		this.section("String Interpolation")
		return this
	}

	public override ValueVisitor visitValueAccess(Name name)
	{
		this.value("Access " + name)
		return this
	}
	
	public override ListVisitor visitList()
	{
		this.section("List")
		return this
	}
	
	public override MapVisitor visitMap()
	{
		this.section("Map ")
		return this
	}
	
	public override BuilderVisitor visitBuilder(Name name)
	{
		this.section("Builder '\(name)'")
		return this
	}

	public override NodeVisitor visitNode()
	{
		this.section("Builder Node")
		return this
	}

	public override ValueVisitor visitParameter(Name! name)
	{
		this.holder(name == null ? "Parameter:" : "Parameter '\(name)':")
		return this
	}
	
	public override ValueVisitor visitElement()
	{
		this.holder("Element");
		return this;
	}
	
	public override ValueVisitor visitKey()
	{
		this.holder("Key");
		return this;
	}
	
	public override ValueVisitor visitValue()
	{
		this.holder("Value");
		return this;
	}

	public override void visitStringPart(String string)
	{
		this.value("String Part '" + string + "'");
		return;
	}

	public override void visitEnd()
	{
		this.indent--
	}
}
