package dyvil.tools.dpf.converter.string

import dyvil.io.FileUtils
import dyvil.tools.dpf.ast.RootNode
import dyvil.tools.dpf.visitor._
import dyvil.tools.parsing.marker.BaseMarkers
import dyvil.tools.parsing.TokenIterator
import dyvil.tools.parsing.lexer.BaseSymbols
import dyvil.tools.parsing.lexer.DyvilLexer
import dyvil.tools.parsing.lexer.Tokens
import dyvil.tools.parsing.marker.MarkerList
import dyvil.tools.parsing.marker.SyntaxError
import dyvil.tools.parsing.token.IToken

using dyvil.tools.parsing.token.IToken.`type` as ttype

import java.io.File

public class Parser
{
	private TokenIterator tokens
	private MarkerList    markers

	public init(String code)
	{
		this.init(new MarkerList(BaseMarkers.INSTANCE), code)
	}
	
	public init(MarkerList markers, String code)
	{
		this.markers = markers

		final DyvilLexer lexer = new DyvilLexer(markers, BaseSymbols.INSTANCE)
		this.tokens = lexer.tokenize(code)
	}
	
	public static RootNode parse(File file)
	{
		return parse(FileUtils.tryRead(file))
	}
	
	public static RootNode parse(String code)
	{
		RootNode file = new RootNode()
		new Parser(code).parseNodeBody(file)
		return file
	}
	
	public void parseNodeBody(NodeVisitor visitor)
	{
		while (this.tokens.hasNext())
		{
			if (!this.parseNodeElement(visitor))
			{
				break
			}
		}

		visitor.visitEnd()
	}
	
	public boolean parseNodeElement(NodeVisitor visitor)
	{
		IToken token = this.tokens.next()
		match token.ttype
		{
			case Tokens.LETTER_IDENTIFIER
			{
				match token.next.ttype
				{
					case BaseSymbols.COMMA | BaseSymbols.SEMICOLON:
						return true
					case BaseSymbols.OPEN_CURLY_BRACKET
					{
						this.tokens.next()
						this.parseNodeBody(visitor.visitNode(token.nameValue))
						return true
					}
					case BaseSymbols.DOT
					{
						this.tokens.next()
						this.parseNodeElement(visitor.visitNodeAccess(token.nameValue))
						return true
					}
					case BaseSymbols.COLON | BaseSymbols.EQUALS
					{
						this.tokens.next()
						this.parseValue(visitor.visitProperty(token.nameValue))
						return true
					}
					case _ {}
				}
			}
			case BaseSymbols.CLOSE_CURLY_BRACKET: return false
			case _ {}
		}
		
		this.markers.add(new SyntaxError(token, "Invalid Node Element - Invalid " + token))
		return true
	}
	
	public void parseValue(ValueVisitor valueVisitor)
	{
		IToken token = this.tokens.next()
		match token.ttype
		{
			case Tokens.INT
			{
				valueVisitor.visitInt(token.intValue)
				return
			}
			case Tokens.LONG
			{
				valueVisitor.visitLong(token.longValue)
				return
			}
			case Tokens.FLOAT
			{
				valueVisitor.visitFloat(token.floatValue)
				return
			}
			case Tokens.DOUBLE
			{
				valueVisitor.visitDouble(token.doubleValue)
				return
			}
			case Tokens.SINGLE_QUOTED_STRING | Tokens.STRING |  Tokens.VERBATIM_STRING | Tokens.VERBATIM_CHAR
			{
				valueVisitor.visitString(token.stringValue)
				return
			}
			case Tokens.STRING_START
			{
				this.parseStringInterpolation(valueVisitor.visitStringInterpolation())
				return
			}
			case Tokens.IDENTIFIER | Tokens.LETTER_IDENTIFIER | Tokens.SYMBOL_IDENTIFIER | Tokens.SPECIAL_IDENTIFIER
			{
				IToken next = token.next()
				next.ttype match
				{
					case BaseSymbols.DOT
					{
						this.parseAccessSequence(valueVisitor)
						return
					}
					case BaseSymbols.OPEN_PARENTHESIS | BaseSymbols.OPEN_CURLY_BRACKET
					{
						this.parseBuilder(valueVisitor.visitBuilder(token.nameValue))
						return
					}
					case _ {}
				}
				if ("-".equals token.nameValue.unqualified)
				{
					next.ttype match
					{
						case Tokens.INT
						{
							this.tokens.next()
							valueVisitor.visitInt(-next.intValue)
							return
						}
						case Tokens.LONG
						{
							this.tokens.next()
							valueVisitor.visitLong(-next.longValue)
							return
						}
						case Tokens.FLOAT
						{
							this.tokens.next()
							valueVisitor.visitFloat(-next.floatValue)
							return
						}
						case Tokens.DOUBLE
						{
							this.tokens.next()
							valueVisitor.visitDouble(-next.doubleValue)
							return
						}
						case _ {}
					}
				}
				valueVisitor.visitName(token.nameValue)
				return
			}
			case BaseSymbols.OPEN_SQUARE_BRACKET
			{
				this.parseList(valueVisitor.visitList())
				return
			}
			case BaseSymbols.OPEN_CURLY_BRACKET
			{
				this.parseMap(valueVisitor.visitMap())
				return
			}
			case _ {}
		}
		
		this.markers.add(new SyntaxError(token, "Invalid Value - Invalid " + token))
	}
	
	private void parseList(ListVisitor visitor)
	{
		if (this.tokens.lastReturned.ttype == BaseSymbols.CLOSE_SQUARE_BRACKET)
		{
			this.tokens.next()
			visitor.visitEnd()
			return
		}
		
		while (this.tokens.hasNext())
		{
			this.parseValue(visitor.visitElement())
			
			IToken token = this.tokens.next()
			match token.ttype
			{
				case BaseSymbols.COMMA: continue
				case BaseSymbols.CLOSE_SQUARE_BRACKET
				{
					visitor.visitEnd()
					return
				}
				case _ {}
			}
			
			this.markers.add(new SyntaxError(token, "Invalid List - ',' expected"))
		}
	}
	
	private void parseMap(MapVisitor visitor)
	{
		if (this.tokens.lastReturned.next.ttype == BaseSymbols.CLOSE_SQUARE_BRACKET)
		{
			this.tokens.next()
			visitor.visitEnd()
			return
		}
		
		while (this.tokens.hasNext())
		{
			this.parseValue(visitor.visitKey())
			
			IToken token = this.tokens.next()
			if (token.ttype != BaseSymbols.COLON)
			{
				this.markers.add(new SyntaxError(token, "Invalid Map - ':' expected"))
			}
			
			this.parseValue(visitor.visitValue())
			
			token = this.tokens.lastReturned.next
			token.ttype match
			{
				case BaseSymbols.COMMA
				{
					this.tokens.next()
					continue
				}
				case BaseSymbols.CLOSE_CURLY_BRACKET
				{
					this.tokens.next()
					visitor.visitEnd()
					return
				}
				case _ {}
			}
		}
	}
	
	public void parseStringInterpolation(StringInterpolationVisitor visitor)
	{
		IToken token = this.tokens.lastReturned
		visitor.visitStringPart(token.stringValue)
		
		while (this.tokens.hasNext())
		{
			this.parseValue(visitor.visitValue())
			
			token = this.tokens.next()
			token.ttype match
			{
				case Tokens.STRING_PART
				{
					visitor.visitStringPart(token.stringValue)
					continue
				}
				case Tokens.STRING_END
				{
					visitor.visitStringPart(token.stringValue)
					visitor.visitEnd()
					return
				}
				case _ {}
			}
			
			this.markers.add(new SyntaxError(token, "Invalid String Interpolation - String expected"))
		}
	}
	
	private void parseAccessSequence(ValueVisitor visitor)
	{
		IToken token = this.tokens.lastReturned()
		while (token.hasNext() && token.next.ttype == BaseSymbols.DOT)
		{
			token = token.next.next
		}
		
		this.tokens.jump(token.next())
		while (token.prev.ttype == BaseSymbols.DOT)
		{
			visitor = visitor.visitValueAccess(token.nameValue)
			
			token = token.prev.prev
		}
		
		visitor.visitName(token.nameValue)
	}
	
	public void parseBuilder(BuilderVisitor visitor)
	{
		// button = Button(text: 'Hello') { visible = false }
		
		final IToken token = this.tokens.next()
		token.ttype match
		{
			case BaseSymbols.OPEN_PARENTHESIS
			{
				this.parseParameters(visitor)
				if (this.tokens.lastReturned().next().ttype == BaseSymbols.OPEN_CURLY_BRACKET)
				{
					this.tokens.next()
					this.parseBuilderNode(visitor)
				}
				visitor.visitEnd()
				return
			}
			case BaseSymbols.OPEN_CURLY_BRACKET
			{
				this.parseBuilderNode(visitor)
				visitor.visitEnd()
			}
			case _ {}
		}
	}
	
	private void parseBuilderNode(BuilderVisitor visitor)
	{
		this.parseNodeBody(visitor.visitNode())
		
		final IToken token = this.tokens.lastReturned()
		if (token.ttype != BaseSymbols.CLOSE_CURLY_BRACKET)
		{
			this.markers.add(new SyntaxError(token, "Invalid Builder - '}' expected"))
		}
	}
	
	private void parseParameters(BuilderVisitor visitor)
	{
		IToken token = this.tokens.lastReturned().next()
		if (token.ttype == BaseSymbols.CLOSE_PARENTHESIS)
		{
			this.tokens.next()
			return
		}
		
		while (this.tokens.hasNext())
		{
			if (token.next.ttype == BaseSymbols.COLON)
			{
				this.tokens.next()
				this.tokens.next()
				this.parseValue(visitor.visitParameter(token.nameValue))
			}
			else
			{
				this.parseValue(visitor.visitParameter(null))
			}
			
			token = this.tokens.next()
			match token.ttype
			{
				case BaseSymbols.CLOSE_PARENTHESIS: return
				case BaseSymbols.COMMA | BaseSymbols.SEMICOLON: token = token.next()
				case _ {}
			}
		}
	}
}
