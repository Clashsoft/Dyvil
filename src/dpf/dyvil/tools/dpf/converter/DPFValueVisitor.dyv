package dyvil.tools.dpf.converter

import dyvil.tools.dpf.ast.builder.Builder
import dyvil.tools.dpf.ast.value._
import dyvil.tools.dpf.visitor._
import dyvil.tools.parsing.Name

public abstract class DPFValueVisitor implements ValueVisitor
{
	protected abstract void visitValue(Value value)

	// Implementation Methods

	public override void visitInt(int value) = this.visitValue(new IntValue(value))

	public override void visitLong(long value) = this.visitValue(new LongValue(value))

	public override void visitFloat(float value) = this.visitValue(new FloatValue(value))

	public override void visitDouble(double value) = this.visitValue(new DoubleValue(value))

	public override void visitString(String value) = this.visitValue(new StringValue(value))

	public override StringInterpolationVisitor visitStringInterpolation()
	{
		let stringInterpolation = new StringInterpolation()
		this.visitValue(stringInterpolation)
		return stringInterpolation
	}

	public override void visitName(Name name) = this.visitValue(NameAccess(name))

	public override ValueVisitor visitValueAccess(Name name)
	{
		let access = NameAccess(name)
		this.visitValue(access)
		return access
	}

	public override ListVisitor visitList()
	{
		let list = ListValue()
		this.visitValue(list)
		return list
	}

	public override MapVisitor visitMap()
	{
		let map = MapValue()
		this.visitValue(map)
		return map
	}

	public override BuilderVisitor visitBuilder(Name name)
	{
		let builder = Builder(name)
		this.visitValue(builder)
		return builder
	}
}
