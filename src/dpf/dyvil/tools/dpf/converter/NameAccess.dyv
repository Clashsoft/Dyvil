package dyvil.tools.dpf.converter

import dyvil.collection.Map
import dyvil.tools.dpf.ast.Expandable

public class NameAccess(
	private Object? value
	private String name
	) extends DyvilValueVisitor implements Expandable
{
	public static func apply(String name): NameAccess = new NameAccess(null, name)

	public static func apply(Object value, String name): NameAccess = new NameAccess(value, name)

	protected override void visitObject(Object! o) = this.value = o
	
	public override Object expand(Map<String, Object> mappings, boolean mutate) = mappings[this.toString] ?? this

	public override String toString()
	{
		if (this.value == null)
		{
			return this.name
		}
		return this.value + '.' + this.name
	}
}
