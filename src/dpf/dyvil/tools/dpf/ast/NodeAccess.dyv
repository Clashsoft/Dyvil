package dyvil.tools.dpf.ast

import dyvil.collection.Map
import dyvil.tools.dpf.visitor.NodeVisitor
import dyvil.tools.dpf.visitor.ValueVisitor
import dyvil.tools.parsing.Name
import dyvil.tools.parsing.ast.IASTNode
import dyvil.tools.parsing.position.ICodePosition

public class NodeAccess implements NodeVisitor, NodeElement, Expandable
{
	protected Name! name = null
	{
		public override get
	}

	protected NodeElement! element = null
	{
		public get
	}
	
	public init(Name name)
	{
		this.name = name
	}

	public init(Name name, NodeElement element)
	{
		this.name = name
		this.element = element
	}

	override func visitNode(Name name) -> NodeVisitor
	{
		Node node = new Node(name)
		this.element = node
		return node
	}
	
	override func visitProperty(Name name) -> ValueVisitor
	{
		Property property = new Property(name)
		this.element = property
		return property
	}
	
	override func visitNodeAccess(Name name) -> NodeVisitor
	{
		NodeAccess access = new NodeAccess(name)
		this.element = access
		return access
	}
	
	override func accept(NodeVisitor visitor) -> void
	{
		this.element.accept(visitor.visitNodeAccess(this.name))
	}

	override func expand(Map<String, Object> mappings, boolean mutate) -> NodeAccess
	{
		let nodeAccess = mutate ? this : new NodeAccess(this.name)
		nodeAccess.element = Expandable.expand(this.element, mappings, mutate) as NodeElement
		return nodeAccess
	}

	override func toString() -> String = IASTNode.toString(this)
	
	override func toString(String indent, StringBuilder buffer) -> void
	{
		buffer.append(this.name).append('.')
		this.element.toString(indent, buffer)
	}

	override func equals(Object! obj) -> boolean
	{
		if (obj === this) return true
		if (!(obj is NodeAccess)) return false

		let that = obj as NodeAccess
		if (this.name !== that.name) return false
		if (this.element != that.element) return false
		return true
	}

	override func hashCode() -> int = 31 * this.name.hashCode + this.element.hashCode
}
