package dyvil.tools.dpf.ast.builder

import dyvil.collection.Map
import dyvil.tools.dpf.model.Expandable
import dyvil.tools.dpf.ast.value.Value
import dyvil.tools.dpf.converter.DPFValueVisitor
import dyvil.tools.parsing.{ Name, ast.IASTNode, position.ICodePosition }

public case class Parameter
(
	var name:  Name?  { get; set }
	var value: Value! { get; set }
)
extends DPFValueVisitor implements IASTNode, Expandable
{
	// Constructors

	static func apply(name: Name) -> Parameter = new Parameter(name, null)

	static func apply(value: Value) -> Parameter = new Parameter(null, value)

	public init(name: Name?)
	{
		this.name = name
	}

	// Accessors

	protected override func visitValue(value: Value) -> void = this.value = value

	public override func getPosition() -> ICodePosition! = null

	public override func setPosition(position: ICodePosition!) -> void { }

	public override func expand(mappings: Map<String, Object>, mutate: boolean) -> Parameter
	{
		let parameter = mutate ? this : new Parameter(this.name)
		parameter.value = Value.wrap(Expandable.expand(this.value, mappings, mutate))
		return parameter
	}

	public override func toString() -> String = IASTNode.toString(this)

	public override func toString(indent: String, buffer: StringBuilder) -> void
	{
		if (this.name != null)
		{
			buffer.append(this.name).append(": ")
		}
		this.value.toString(indent, buffer)
	}
}
