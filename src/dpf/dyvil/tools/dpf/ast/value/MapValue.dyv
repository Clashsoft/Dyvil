package dyvil.tools.dpf.ast.value

import dyvil.collection.mutable.ArrayMap
import dyvil.tools.dpf.ast.Expandable
import dyvil.tools.dpf.converter.DPFValueVisitor
import dyvil.tools.dpf.visitor.MapVisitor
import dyvil.tools.dpf.visitor.ValueVisitor

import java.util.function.BiFunction

public class MapValue(
	protected let entries: Map<Value, Value> { public get }
	)
	extends DPFValueVisitor implements Value, MapVisitor, Expandable
{
	private Value! tempKey

	static func apply() -> MapValue = new MapValue(new ArrayMap<Value, Value>)

	static func apply(int capacity) -> MapValue = new MapValue(new ArrayMap<Value, Value>(capacity))

	static func apply(Map<_, _> map) -> MapValue
	{
		let mapValue = MapValue(map.size)
		for (Entry<_, _> entry <- map)
		{
			mapValue.entries.put(Value.wrap(entry.getKey()), Value.wrap(entry.getValue()))
		}
		return mapValue
	}

	protected override void visitValue(Value value)
	{
		if (this.tempKey == null)
		{
			this.tempKey = value
		}
		else
		{
			this.entries.put(this.tempKey, value)
			this.tempKey = null
		}
	}

	public override ValueVisitor visitKey() = this

	public override ValueVisitor visitValue() = this

	public override void accept(ValueVisitor visitor)
	{
		let mapVisitor = visitor.visitMap()

		for (entry <- this.entries)
		{
			entry.getKey().accept(mapVisitor.visitKey())
			entry.getValue().accept(mapVisitor.visitValue())
		}
		
		mapVisitor.visitEnd()
	}

	public override MapValue expand(Map<String, Object> mappings, boolean mutate)
	{
		let entryBiFunction: BiFunction<Value, Value, Entry<+Value, +Value>>
			= (k, v) => (
				Value.wrap(Expandable.expand(k, mappings, mutate)),
				Value.wrap(Expandable.expand(v, mappings, mutate))
			)

		if (mutate)
		{
			this.entries.mapEntries(entryBiFunction)
			return this
		}

		return new MapValue(this.entries.entryMapped(entryBiFunction))
	}

	public override void toString(String indent, StringBuilder buffer)
	{
		let len = this.entries.size
		if (len <= 0)
		{
			buffer.append("{}")
			return
		}

		let keys: [Value] = this.entries.toKeyArray(class Value)
		let values: [Value] = this.entries.toValueArray(class Value)
		
		let indent1 = indent + "\t"
		
		buffer.append("{\n").append(indent1)
		keys[0].toString(indent1, buffer)
		buffer.append(" : ")
		values[0].toString(indent1, buffer)

		for (i <- 1 ..< len)
		{
			buffer.append(",\n").append(indent1)
			keys[i].toString(indent1, buffer)
			buffer.append(" : ")
			values[i].toString(indent1, buffer)
		}

		buffer.append('\n').append(indent).append('}')
	}

	public override boolean equals(Object! o)
	{
		if (this === o) return true
		if (!(o is MapValue)) return false

		let that = o as MapValue
		return this.entries == that.entries
	}

	public override int hashCode() = this.entries.hashCode
}
