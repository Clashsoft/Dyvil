package dyvil.tools.dpf.ast

import dyvil.collection.Collection
import dyvil.collection.Map
import dyvil.tuple.Tuple2

public interface Expandable
{
	Object expand(Map<String, Object> mappings, boolean mutate)

	infix func expand(Object! obj, Map<String, Object> mappings, boolean mutate): Object = obj match
	{
		case Expandable    exp => exp.expand(mappings, mutate)
		case Collection<_> col => expand(collection: col, mappings: mappings, mutate: mutate)
		case Map<_, _>     map => expand(map: map, mappings: mappings, mutate: mutate)
		case _ => obj
	}

	infix func expand(Collection<_> collection, Map<String, Object> mappings, boolean mutate): Collection<_>
	{
		if (!mutate || collection.isImmutable())
		{
			return collection.mapped(e => expand(e, mappings, mutate))
		}
		collection.map(e => expand(e, mappings, true))
		return collection
	}

	infix func expand(Map<_, _> map, Map<String, Object> mappings, boolean mutate): Map<_, _>
	{
		if (!mutate || map.isImmutable())
		{
			return map.entryMapped((k, v) => (expand(k, mappings, mutate), expand(v, mappings, mutate)))
		}
		map.mapEntries((k, v) => (expand(k, mappings, true), expand(v, mappings, true)))
		return map
	}
}
