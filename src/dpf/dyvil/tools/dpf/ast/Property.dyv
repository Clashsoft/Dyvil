package dyvil.tools.dpf.ast

import dyvil.collection.Map
import dyvil.tools.dpf.ast.value.Value
import dyvil.tools.dpf.converter.DPFValueVisitor
import dyvil.tools.dpf.visitor.NodeVisitor
import dyvil.tools.parsing.Name
import dyvil.tools.parsing.ast.IASTNode
import dyvil.tools.parsing.position.ICodePosition

public class Property extends DPFValueVisitor implements NodeElement, Expandable
{
	protected Name  name = null
	{
		public get
		public set
	}

	protected Value value = null
	{
		public get
		public set
	}
	
	private ICodePosition position
	
	public init(Name name)
	{
		this.name = name
	}

	public init(Name name, ICodePosition position)
	{
		this.name = name
		this.position = position
	}

	public init(Name name, Value value)
	{
		this.name = name
		this.value = value
	}

	public override func getPosition(): ICodePosition = this.position

	public override func setPosition(ICodePosition position): void = this.position = position;

	protected override func visitValue(Value value): void
	{
		this.value = value
	}
	
	public override func accept(NodeVisitor visitor): void
	{
		this.value.accept(visitor.visitProperty(this.name))
	}

	public override func expand(Map<String, Object> mappings, boolean mutate): Property
	{
		Property property = mutate ? this : new Property(this.name, this.position)
		property.value = Value.wrap(Expandable.expand(this.value, mappings, mutate))
		return property
	}

	public override func toString(): String
	{
		return IASTNode.toString(this)
	}
	
	public override func toString(String indent, StringBuilder buffer): void
	{
		buffer.append(this.name).append(" = ")
		this.value.toString(indent, buffer)
	}

	public override func equals(Object obj): boolean
	{
		if (obj === this) return true
		if (!(obj is Property)) return false

		let that = obj as Property
		return this.name === that.name && this.value == that.value
	}

	public override func hashCode(): int = 31 * this.name.hashCode + this.value.hashCode
}
