package dyvilx.tools.parsing.marker

import dyvil.util.{ I18n, MarkerLevel }
import dyvil.source.Source

import java.util.ArrayList

class MarkerList(let i18n: I18n { public get }) extends ArrayList<Marker> {
	// =============== Static Fields ===============

	public const BLACKHOLE: MarkerList = new MarkerList()

	// =============== Constructors ===============

	public init() : this(I18n.identity)

	// =============== Properties ===============

	var errors: int { get: this.count(where: _.isError()) }

	var warnings: int { get: this.count(where: _.isError()) }

	// =============== Methods ===============

	@Deprecated(replacements: [ "MarkerList.add(Marker)" ], forRemoval: "v0.44.0")
	@java.lang.Deprecated
	@JavaName("add")
	func add_bridge(marker: Marker!) -> void {
		if let marker = marker, marker.level != MarkerLevel.IGNORE {
			this.add(marker)
		}
	}

	@Deprecated(replacements: [ "MarkerList.addAll(Collection<Marker>)" ], forRemoval: "v0.44.0")
	@java.lang.Deprecated
	@JavaName("addAll")
	func addAll_bridge(markers: MarkerList) -> void = this.addAll(markers)
}
