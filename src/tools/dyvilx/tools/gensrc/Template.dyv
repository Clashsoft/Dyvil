package dyvilx.tools.gensrc

import java.io.{ File, IOException, Writer, FileWriter }
using dyvilx.tools.gensrc.Builtins._

// name = pack/age/TemplateName
abstract class Template(let name: String)
{
	var outputDir: File = new File('.')
	{
		public get
		public set
	}

	let specs: List<String> = new mutable.ArrayList<String>()
	{
		public get
	}

	func getPathPrefix() -> String
	{
		let index = this.name.lastIndexOf('/')
		return index < 0 ? "" : this.name.substring(0, index + 1)
	}

	func mainImpl(args: [String]) -> void
	{
		// parses output dir and specs from arguments
		for (arg <- args)
		{
			if (arg.startsWith('output_dir='))
			{
				this.outputDir = new File(arg.substring(11))
				continue
			}

			this.specs.add(arg)
		}

		this.generate()
	}

	func generate() -> int
	{
		var count = 0

		for (spec <- this.specs)
		{
			try
			{
				if (this.generate(this.outputDir, spec)) count++
			}
			catch (ex: IOException)
			{
				print("Failed to generate specialization '\(spec)' for template '\(this.name)'")
				ex.printStackTrace(System.out)
			}
		}

		print("Generated \(count) specializations for template '\(this.name)'")
		return count
	}

	func generate(outputDir: File, specFile: String) -> boolean throws IOException
	{
		if (!specFile.contains(this.name)) return false

		let spec = spec(specFile)
		if (!Boolean.parseBoolean(spec['@enabled'])) return false

		let outputFile = new File(outputDir, this.getPathPrefix() ++ spec['@fileName'])
		let writer = new FileWriter(outputFile)

		try this.generate(spec, writer)
		finally writer.close()

		return true
	}

	abstract func generate(spec: Specialization, writer: Writer) -> void throws IOException
}
