package dyvil.test.lang

using dyvil.test.JUnit

class NestedMethodTest {
	@Test func apply() -> void {
		var i = 0

		func testI(text: String, expected: int) {
			i =?= expected
		}

		func setI(newValue: int) -> void = i = newValue

		func setI2(newValue: int) -> void = setI(newValue)

		testI("Before Assignment", 0)
		i = 1
		testI("After Assignment", 1)
		setI(2)
		testI("After Set", 2)
		setI2(3)
		testI("After Set 2", 3)

		// for nameCollision (has to be in a different method)
		func a() -> String = "apply"
	}

	@Test func nameCollision() {
		// #458 Nested methods can have name collisions

		func a() -> String = "nameCollision"

		a() =?= "nameCollision"
	}
}
