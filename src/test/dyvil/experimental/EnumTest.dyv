package dyvil.experimental

public class EnumTest
{
	public enum Option<T>
	{
		case None
		case Some(let value: T)
	}

	// becomes

	public final class Option<T> extends Enum<Option<T>>
	{
		/* <enum> */ const None = Option(name: "None", id: 0)

		case class Some<T>(let value: T) extends Option(name: "Some", id: 1)

		// --- Boilerplate ---

		const $VALUES: ImmutableSet<Option<_>> = EnumSet(class<Option>) // only non-parametric values are the "enum constants"

		static func values() -> ImmutableSet<Option<_>> = $VALUES

		@BytecodeName("valueOf")
		static func from(name: String) -> Option<_> = Enum.valueOf(class<Option>, name)

		@BytecodeName("fromID")
		static func from(id: int) -> Option<_> = id match {
			case 0 => None
		}

		// --- Constructor ---

		public init(name: String, id: int)
		{
			super.init(name, id)
		}
	}

	public enum MyEnum(var value: int)
	{
		case Foo = 0
		case Bar = 10
		case Baz = 100
	}

	// becomes

	public enum MyEnum
	{
		case Foo = 1
		case Bar = 10
		case Baz = 100

		var value: int

		private init(value: int)
		{
			this.value = value
		}
	}

	// becomes

	public class MyEnum extends ...
	{
		const Foo = new MyEnum("Foo", 0, value: 1)
		const Bar = new MyEnum("Bar", 1, value: 10)
		const Baz = new MyEnum("Baz", 2, value: 100)

		// ... Boilerplate

		var value: int

		private init(name: String, id: int, value: int)
		{
			super.init(name, id)
			this.value = value
		}
	}
}
