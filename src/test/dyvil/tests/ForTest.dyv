package dyvil.tests

import java.util.Iterator
using dyvil.Test
using dyvil.Collections

public class ForTest
{
	static func apply() -> Test = test "For Statements" {
		iterative()
		array()
		iterable()
		iterator()
		string()
		nested()
	}

	static func iterative() -> Test = test "Iterative" {
		let list = List<int>()

		for (var i = 0; i < 3; i += 1)
		{
			list += i
		}

		list =?= List(0, 1, 2)
	}

	static func array() -> Test = test "Array" {
		let array = [ 1, 2, 3 ]
		let list = List<int>()

		for (i <- array)
		{
			list += i
		}

		list =?= List(1, 2, 3)
	}

	static func iterable() -> Test = test "Iterable" {
		let iterable: Iterable<int> = List(1, 2, 3)
		let list = List<int>()

		for (i <- iterable)
		{
			list += i
		}

		list =?= iterable
	}

	static func iterator() -> Test = test "Iterator" {
		let iterable = List(1, 2, 3)
		let list = List<int>()

		for (i <- iterable.iterator)
		{
			list += i
		}

		list =?= iterable
	}

	static func string() -> Test = test "String" {
		let testString = "abc"
		var string = ""

		for (c <- testString)
		{
			string += c
		}

		string =?= testString
	}

	static func nested() -> Test = test "Nested" {
		let results = List<(int, int)>()

		for (i <- 0 .. 1)
		{
			for (j <- 0 .. 1)
			{
				results += (i, j)
			}
		}

		results =?= List((0, 0), (0, 1), (1, 0), (1, 1))
	}
}
