package dyvil.tests

using dyvil.Collections
using dyvil.Test

public class ConstructorTest
{
	public case class A(
		public let i: int
		public let j: int
	)
	{
		public static var classInitialized: boolean

		static init
		{
			classInitialized = true
		}

		static func initClass() -> void { /* noop, forces static initializer */ }
	}

	case class B(
		public let i: int { override get }
	) extends A(i, 0)
	{
		public var initialized: boolean

		init
		{
			this.initialized = true
		}
	}

	case class C(
		public let j: int { override get }
	) extends A(0, j)

	case object O extends A(1, 1)

	class InitOrder
	{
		public var order = MutableList<String>()

		let i: int = { this.order += "init s" ; 0 }

		init
		{
			this.order += "init block"
		}

		public init()
		{
			this.init(1)
			this.order += "init() body"
		}

		public init(value: int)
		{
			this.order += "init(int) body"
		}
	}

	static func apply() -> Test = test "Constructors" {
		test "A" {
			A.initClass
			let a = A(1, 2)

			test "classInitialized" {
				A.classInitialized =?= true
			}

			test "i" { a.i =?= 1 }
			test "j" { a.j =?= 2 }
		}

		test "B" {
			let b = B(1)
			let ba: A = b // B -> A

			test "initialized" {
				b.initialized =?= true
			}

			test "i" { ba.i =?= 1 }
			test "j" { ba.j =?= 0 }
		}

		test "C" {
			let c = C(2)
			let ca: A = c // C -> A

			c =?= C(2)

			test "i" { ca.i =?= 0 }
			test "j" { ca.j =?= 2 }
		}

		test "O" {
			let o = O
			let oa: A = o // O -> A

			o =?= O

			test "i" { oa.i =?= 1 }
			test "j" { oa.j =?= 1 }
		}

		test "Initialization Order" {
			let initOrder = new InitOrder
			initOrder.order =?= List("init s", "init block", "init(int) body", "init() body")
		}
	}
}
