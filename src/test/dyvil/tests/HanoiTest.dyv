package dyvil.tests

using dyvil.Test

public class HanoiTest
{
	private List<String> moves = List<String>

	public static func apply(): Test = test "Hanoi"
	{
		for (i <- 1 .. 10)
		{
			let test = new HanoiTest(i)
			test "#\(i)" { requiredMoves(i) =?= test.moves.size }
		}
	}

	public static func requiredMoves(int n): int = (1 << n) - 1

	@LiteralConvertible.FromString
	class Tower(public let id: String) extends dyvil.collection.mutable.LinkedList<int>
	{
		public static func apply(String id): Tower = new Tower(id)
	}

	public init() {Â }

	public init(int n)
	{
		this.run(n)
	}

	public func run(int n): void
	{
		this.moves.clear()

		let source: Tower = 'source'
		for (i <- 1 .. n) source.push(i) // fill the tower

		this.move(n, source, 'helper', 'target')
	}

	public func move(Tower from, Tower to): void
	{
		let item = from.pop()
		if (item != null)
		{
			this.moves.add "Move \(item) from \(from.id) to \(to.id)"
			to.push(item!!)
		}
	}

	public func move(int n, Tower from, Tower helper, Tower to): void
	{
		if n > 0
		{
			this.move(n - 1, from, to, helper) // from -> helper
			this.move(from, to)			       // from -> to
			this.move(n - 1, helper, from, to) // helper -> to
		}
	}
}
