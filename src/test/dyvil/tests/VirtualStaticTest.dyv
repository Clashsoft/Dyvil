package dyvil.tests

using dyvil.Test

class VirtualStaticTest
{
	// Static Virtual Method Test

	interface Interface
	{
		static func foo() -> String
		static func bar(s: String) -> String
	}

	static class Base implements Interface
	{
		static override func foo() -> String = "Base"
		static override func bar(s: String) -> String = s ++ "_Base"
	}

	static class Derived extends Base
	{
		static override func foo() -> String = "Derived"
		static override func bar(s: String) -> String = s ++ "_Derived"
	}

	static func getFoo<@Reified(Reified.Type.ANY_CLASS) T: Interface>() -> String = T.foo
	static func getBar<@Reified(Reified.Type.OBJECT_CLASS) T: Interface>(s: String) -> String = T.bar(s)

	interface IntConstructible
	{
		static func apply(i: int) -> IntConstructible
	}

	static case class CustomInt(public let value: int) implements IntConstructible
	static case class MyInt    (public let value: int) implements IntConstructible

	static func create<@Reified(Reified.Type.TYPE) T: IntConstructible>(i: int) -> T = T(i) as T

	static func apply() -> Test = test "Virtual Static Methods" {
		expect(class AbstractMethodError, from: => { getFoo<Interface>(); () })

		getFoo<Base>() =?= "Base"
		getFoo<Derived>() =?= "Derived"
		getBar<Base>("") =?= "_Base"
		getBar<Derived>("") =?= "_Derived"

		expect(class AbstractMethodError, from: => create<IntConstructible>(10))

		let customInt = create<CustomInt>(10)
		let myInt = create<MyInt>(20)

		customInt.value =?= 10
		myInt.value =?= 20
	}
}
