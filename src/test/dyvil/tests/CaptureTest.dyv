package dyvil.tests

using dyvil.Test

public class CaptureTest
{
	static func apply() -> Test = test "Capture" {
		lambdaCapture()
		anonClassCapture()
	}

	static func ref(i: int) -> int* = &i

	private static func lambdaCapture() -> Test = test "Lambda" {
		let abc = -1
		let fun = (i: int) => (j: int) => (k: int) => (i, j, k, abc)
		let res = fun 1 2 3

		res =?= (1, 2, 3, -1)

		// Method Parameter capture by reference
		ref(10).get =?= 10
		ref(10) =!= ref(10)

		// Lambda Parameter capture by reference
		let refl = (i: int) => &i
		refl(10).get =?= 10

		lambdaThisCapture()
	}

	class ThisCapture
	{
		func anonymous() -> Object = new Object {
			override func toString() -> String = this<ThisCapture>.toString
		}

		func lambda() -> () -> ThisCapture = => this

		override func toString() -> String = System.identityHashCode(this).toHexString
	}

	private static func lambdaThisCapture() -> Test = test "This Capture" {
		let instance = new ThisCapture
		let lambda = instance.lambda

		lambda() =?= instance
	}

	private static func anonClassCapture() -> Test = test "Anonymous Classes" {
		var abc = 123
		var obj = new Object {
			public override String toString() = abc.toString
		}

		obj.toString =?= abc.toString

		anonClassThisCapture()
	}

	private static func anonClassThisCapture() -> Test = test "This Capture" {
		var instance = new ThisCapture
		var obj = instance.anonymous

		instance.toString =?= obj.toString
	}
}
