package dyvil.tests

using dyvil.Test
using dyvil.Strings

public class ExtensionTest
{
	static func apply() -> Test = test "Extension Methods" {
		sourceFallback()
		sourceOverride()
		nonSource()
	}

	// --------------- Extension of Source Classes ---------------

	static class A

	static class B extends A

	static class C extends B
	{
		public func custom() -> String = "custom"
	}

	static class D extends C

	extension A
	{
		func custom() -> String = "fallback"
	}

	static func sourceFallback() -> Test = test "Source Fallback" {
		let a = new A
		let b = new B

		a.custom =?= "fallback"
		b.custom =?= "fallback"
	}

	static func sourceOverride() -> Test = test "Source Override" {
		let c = new C
		let d = new D

		let cA: A = c
		let cB: B = c

		c.custom =?= "custom"
		cA.custom =?= "custom"
		cB.custom =?= "custom"
		d.custom =?= "custom"
	}

	// --------------- Extension of non-Source Class ---------------

	extension String
	{
		static func empty() -> String = ""

		func size() -> int = this.length
	}

	static func nonSource() -> Test = test "Non-Source" {
		String.empty =?= ""

		String(fromShared: [ 'a', 'b', 'c' ]) =?= "abc"

		"abc".size =?= 3

		let lambda1 = () => String.empty
		let lambda2 = (s: String) => s.size

		lambda1() =?= ""
		lambda2("asdf") =?= 4
	}

	// --------------- Speed Test ---------------

	static func testSpeed() -> void
	{
		let values = [ new A, new B, new C, new D ]
		let dump: [String] = new [String](4)
		let random = Random()
		let count = 1_000_000
		var totalTime = 0L

		for (i <- 0 ..< count)
		{
			let index = random.nextInt(values.size)
			let current = values[index]

			let now = System.nanoTime
			dump[index] = current.custom
			totalTime += System.nanoTime - now
		}

		print dump
		print "Dynamic Dispatch Speed: \(totalTime / count) ns / invocation"
	}
}
