package dyvil.tests

using dyvil.Test
using dyvil.Strings

public class ExtensionTest
{
	static class A
	static class B extends A
	static class C extends B
	{
		public func custom() -> String = "custom"
	}

	static class D extends C

	extension func custom(a: A) -> String = "fallback"

	static func empty(this: String) -> String = ""

	static func apply() -> Test = test "Extension Methods" {
		let a = new A
		let b = new B
		let c = new C
		let d = new D

		let cA: A = c
		let cB: B = c

		test "Fallback" {
			a.custom =?= "fallback"
			b.custom =?= "fallback"
		}

		test "Override" {
			c.custom =?= "custom"
			cA.custom =?= "custom"
			cB.custom =?= "custom"
			d.custom =?= "custom"
		}

		a.name = "foo"

		test "Name Method" {
			a.name =?= "foo"
		}

		test "Static Extension" {
			String.empty() =?= ""
			String(fromShared: [ 'a', 'b', 'c' ]) =?= "abc"
		}
	}

	static func testSpeed() -> void
	{
		let values = [ new A, new B, new C, new D ]
		let dump: [String] = new [String](4)
		let random = Random()
		let count = 1_000_000
		var totalTime = 0L

		for (i <- 0 ..< count)
		{
			let index = random.nextInt(values.size)
			let current = values[index]

			let now = System.nanoTime
			dump[index] = current.custom
			totalTime += System.nanoTime - now
		}

		print dump
		print "Dynamic Dispatch Speed: \(totalTime / count) ns / invocation"
	}

	private static var nameMap: Map<any, String> = dyvil.collection.mutable.IdentityHashMap<any, String>()

	postfix func name(value: any) -> String! = nameMap[value]

	infix func name_=(value: any, newName: String) -> void = nameMap[value] = newName
}
