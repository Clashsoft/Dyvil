package dyvil.tests

using dyvil.Test

infix operator <<< { 120 }

public class TypeTest
{
	public static case class MyList<T>(T... elements)
	{
		public func sum(MyList<double> this): double
		{
			var result = 0D
			for (d <- this.elements)
			{
				result += d as double
			}

			return result
		}
	}

	public infix func <<< <T, C: Collection<T>>(C collection, T element) = collection.added(element)

	public static func voidTest<T>(T value) = "\(value)" // will error if CovariantTypeVarType.isSameType(Types.VOID) returns true

	public static func apply(): Test = test "Types" {
		let list = MyList(1D, 2D, 3D)
		let result = list.sum

		// var error1 = MyList(1, 2, 3).sum
		// var error2 = MyList("a", "b", "c").sum

		test "Receiver Type" { result =?= 6D }

		List(1, 2, 3) <<< 1
	}
}
