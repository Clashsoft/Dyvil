package dyvil.tests

using dyvil.Test

infix operator <<< { 120 }

public class TypeTest
{
	public static case class MyList<T>(T... elements)
	{
		@BytecodeName("sum_doubles")
		public func sum(MyList<double> this): double
		{
			var result = 0D
			for (d <- this.elements) result += d
			return result
		}

		@BytecodeName("sum_ints")
		public func sum(MyList<int> this): int
		{
			var result = 0
			for (i <- this.elements) result += i
			return result
		}
	}

	public infix func <<< <T, C: Collection<T>>(C collection, T element) = collection.added(element)

	public static func voidTest<T>(T value) = "\(value)" // will error if CovariantTypeVarType.isSameType(Types.VOID) returns true

	public static func apply(): Test = test "Types" {
		test "Receiver Type" {
			let doubles = MyList(1D, 2D, 3D)

			doubles.sum =?= 6D
		}

		test "Receiver Type Overload" {
			let ints = MyList(-1, -2, -3)

			ints.sum =?= -6

			/*
			{
				MyList("a", "b", "c").sum
			}
			// */
		}

		List(1, 2, 3) <<< 1
	}
}
