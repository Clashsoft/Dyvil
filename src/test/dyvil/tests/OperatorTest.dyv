package dyvil.tests

using dyvil.Test

prefix operator +++
postfix operator +++

public class OperatorTest
{
	static func apply() -> Test = test "Operators" {
		unary()
		binary()
		ternary()
		circumfix()
	}

	@BytecodeName('preinc')
	prefix func ++(i: int) -> int = i

	@BytecodeName('postinc')
	postfix func ++(i: int) -> int = i

	static func unary() -> Test = test "Unary" {
		infix func apply(i: int, j: int) -> (int, int) = (i, j)

		var i = 1                       // Canonical Representation:
		let j = [ i -i, i++ i, i++ -i ] // i.apply(-i), (i++).apply(i), (i++).apply(-i)
		let k = [ i - i, i-i ]          // i - i
		let l = [ i - -i, i - - i ]     // i - (-i)
		let m = [ i++ , i++, i ++ ]     // i++
		let n = i++ + i                 // (i++) + i
		let o = i++ + ++ i              // (i++) + (++i)
		let p = i++ + + ++ i            // (i++) + (+ (++i))

		// don't care about values, resolution pass is sufficient

		require true
	}

	static func binary() -> Test = test "Binary" {
		let i = 1 + 2 * 3 + 4
		let k = 1 : 2 : 3

		test "Precedence" {
			i =?= 11
		}
		test "Associativity" {
			k =?= (1, (2, 3))
		}
	}

	static func ternary() -> Test = test "Ternary" {
		let i = true ? 1 : 2
		let j = true ? 1 : true ? 2 : 3
		let k = true ? true ? 1 : 2 : 3
		let l = true ? 1+1 : true ? true ? 2+2 : 3+3 : 4+4

		// don't care about values, type check pass is sufficient
	}

	static func circumfix() -> Test = test "Circumfix" {
		let d = -1.0
		let i = -2
		let c = dyvil.math.Complex(1.0, 1.0)

		let absd = |d|
		let absi = |i|
		let absc = |c|

		absd =?= 1.0
		absi =?= 2
		absc =?= Math.sqrt(2)

		let s = "a"
		let s1 = +++s+++
		let s2 = +++(s+++)
		let s3 = (+++s)+++

		s1 =?= "+++((a)+++)" // postfix is applied first
		s2 =?= "+++((a)+++)"
		s3 =?= "(+++(a))+++"
	}

	@BytecodeName("plusPre")
	prefix func +++(s: String) -> String = "+++(\(s))"

	@BytecodeName("plusPost")
	postfix func +++(s: String) -> String = "(\(s))+++"

	static func +++_+++(s: String) -> String = "+++(\(s))+++"
}
