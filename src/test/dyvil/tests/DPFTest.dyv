package dyvil.tests

import java.io._

using dyvil.Test

import dyvil.collection.mutable.TreeMap

import dyvil.tools.parsing.Name
import dyvil.tools.dpf.ast._
import dyvil.tools.dpf.ast.value.Value
import dyvil.tools.dpf.model._
import dyvil.tools.dpf.converter.{ binary._, string._, flatmap._ }

using dyvil.tools.dpf.DPFSyntax._
import dyvil.tools.dpf.DPFConvertible

public class DPFTest
{
	public case class Button(var text: String, var x: int, var y: int) implements DPFConvertible
	{
		private var visible: boolean = false
		{
			public get
			public set
		}

		override func toPropertyValue() -> Value
		{
			return "Button"(this.text, "x": this.x, "y": this.y) {
				"visible": this.visible
			}
		}

		public func apply(configure: Configure<Button>) -> Button
		{
			configure this
			return this
		}
	}

	public const TEST_NODE: RootNode = (dpf {
		"node1" {
			"bool": false
			"int": 10
			"string_1": "abc"
			"string_2": "string: \("node1.string") int: \("node1.int")"
			"list": [ 1, "a", true, [ 1, 2, "" ], [ 1: "a", 2: "b" ] ]
			"map": [ 1: "a", 2: "B", [ 1, 2 ]: [ 3, 4 ], [ 1: 'a' ]: [ 2: 'b' ] ]

			// Typesafe Builder, with automatic Conversion
			"builder_1": Button(text: "Click Me", x: 10, y: 20) {
				visible = true
			}

			// DSL Builder
			"builder_2": "TextField"("Hello World", "x": 100, "y": 200) {
				"visible": false
			}
		}

		"node2" {
			"sub_1": 42
			"sub_2" {
				"sub_3": 13
			}
		}
	})

	public const TEST_STRING: String = TEST_NODE.toString

	static func apply() -> Test = test "DPF" {
		test "DPF Parser" {
			Parser.parse(TEST_STRING) =?= TEST_NODE
		}

		testExpand()
		testBinary()
	}

	private static func testExpand() -> Test = test "Expand" {
		// Parse as a Map
		let baseMap = new TreeMap<String, Object>
		TEST_NODE.accept(new FlatMapConverter(baseMap))

		// Expand the Node structure
		let expandedNode: RootNode = TEST_NODE.expand(baseMap, false)

		// Convert the Node structure to a Map
		let nodeMap = new TreeMap<String, Object>
		expandedNode.accept(new FlatMapConverter(nodeMap))

		let expandedMap = Expandable.expand(baseMap, baseMap, false) as Map<String, Object>

		nodeMap =?= expandedMap
	}

	private static func testBinary() -> Test = test "Binary" {
		let newNode = new RootNode

		try
		{
			let byteArrayOutputStream = new ByteArrayOutputStream()
			let dataOutputStream = new DataOutputStream(byteArrayOutputStream)

			TEST_NODE.accept(new BinaryWriter(dataOutputStream))

			let bytes = byteArrayOutputStream.toByteArray
			let byteArrayInputStream = new ByteArrayInputStream(bytes)
			let dataInputStream = new DataInputStream(byteArrayInputStream)

			let binaryReader = new BinaryReader(dataInputStream)

			binaryReader.readNodes(newNode)
		}
		catch (ex: Throwable)
		{
			ex.printStackTrace
		}

		newNode =?= TEST_NODE
	}
}
