package dyvil.tests

using dyvil.Test
using dyvil.reflect.Opcodes._

infix operator +- { precedence 100, associativity left }

public class IntrinsicTest
{
	private static var value: int

	static func apply() -> Test = test "Intrinsics" {
		test "Simple" {
			let i1 = 1 +- 2
			let i2 = 2 +- -4
			let i3 = -1 +- 3
			let i4 = -7 +- -5

			i1 =?= -1
			i2 =?= 6
			i3 =?= -4
			i4 =?= -2
		}

		test "Method Calls" {
			setValue 1
			setValue 7

			value =?= 7
		}

		test "Order" {
			let order = MutableList<int>
			let res1 = orderTest(first: { order.add 1; 1 }, second: { order.add 2; 2 })
			let res2 = orderTest({ order.add 2; 2 }, { order.add 1; 1 })

			res1 =?= (1, 2)
			res2 =?= (2, 1)
			order =?= List(1, 2, 2, 1)
		}
	}
	
	@Intrinsic([ LOAD_0, LOAD_1, INEG, IADD ])
	infix func +-(int i, int j) -> int = throw new RuntimeException("Not Intrinsic!")
	
	@Intrinsic([ LOAD_0, PUTSTATIC, 0, 1, 2 ]
	  strings: [ "dyvil/tests/IntrinsicTest", "value", "I" ])
	private static func setValue(int value) -> void = throw new RuntimeException("Not Intrinsic!")

	static func orderTest(int first, int second) -> (int, int) = (first, second)
}
