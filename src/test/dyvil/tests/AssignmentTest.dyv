package dyvil.tests

using dyvil.Test

class AssignmentTest
{
	static func apply() -> Test = test "Assignment" {
		local()
		staticField()
		instanceField()
		compound()
	}

	static func local() -> Test = test "Local" {
		test "Int" {
			var i = 0
	        i += 2
	        let result = i += 1

	        result =?= 3
		}

		test "Long" {
			var l = 0
			l += 3
			let result = l += 1

			result =?= 4
		}
	}

	private static var counter: int = 0

	static func staticField() -> Test = test "Static Fields" {
		counter = 0
		counter += 4
		let result = counter += 1

		counter =?= 5
	}

	static class Counter
	{
		var value: int = 0
		var applyArray: [int] = [ 0, 0, 0 ]
		var subscriptArray: [int] = [ 0, 0, 0 ]

		func apply(i: int) -> int = this.applyArray[i]
		func apply_=(i: int, value: int) -> void = this.applyArray[i] = value

		func subscript(i: int) -> int = this.subscriptArray[i]
		func subscript_=(i: int, value: int) = this.subscriptArray[i] = value
	}

	static func instanceField() -> Test = test "Instance Fields" {
		test "Statements" {
			let counter = new Counter
			counter.value += 2

			counter.value =?= 2
		}

		test "Expressions" {
			let counter = new Counter
			let result = counter.value += 5

			counter.value =?= 5
			result        =?= 5
		}
	}

	static func compound() -> Test = test "Compound Assignment" {
		let counter = new Counter
		var modCount = 0

		counter(modCount += 1) += (modCount += 1) // apply/apply_=
		// counter.applyArray[0] = 1
		counter[modCount += 1] += (modCount += 1) // subscript/subscript_=
		// counter.subscriptArray[2] = 3

		test "Mod Count"       { modCount =?= 4 }
		test "Apply Array"     { counter.applyArray     =?= [ 1, 0, 0 ]}
		test "Subscript Array" { counter.subscriptArray =?= [ 0, 0, 3 ]}
	}
}
