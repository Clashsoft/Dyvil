package dyvil.tests

using dyvil.Test

public class BridgeTest
{
	public interface Container<T>
	{
		func get() -> T

		func set(T value) -> void
	}

	public case class IntContainer(int value) implements Container<int>
	{
		override func get() -> int = this.value

		override func set(int value) -> void = this.value = value
	}

	public case class LongContainer(long value) implements Container<long>
	{
		override func get() -> long = this.value

		override func set(long value) -> void = this.value = value
	}

	static func apply() -> Test = test "Bridge Methods" {
		let ic = IntContainer(1)

		test "IntContainer" { ic.get =?= 1 }

		let ci: Container<int> = ic
		ic.set(3)

		test "Container<int>" { ci.get =?= 3 }

		let lc = LongContainer(2L)

		test "LongContainer" { lc.get =?= 2L }

		let cl: Container<long> = lc
		lc.set(4L)

		test "Container<long>" { cl.get =?= 4L }
	}
}
