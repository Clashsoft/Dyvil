package dyvil.collection

using dyvil.test.JUnit

import java.util.List
import java.util.{ ArrayList, LinkedList }
import java.util.{ Collections, Arrays }

class ListsTest {
	const emptyList: List<Int> = Collections.emptyList<Int>()
	const list1: List<Int> = Collections.singletonList(1)
	const list123: List<Int> = Arrays.asList(1, 2, 3)
	const list111: List<Int> = Arrays.asList(1, 1, 1)

	// =============== Static Methods ===============

	@Test func applyList() -> void {
		List<Int>() =?= emptyList
		List(1) =?= list1
		List(1, 2, 3) =?= list123
		List(list123) =!= list123
		List(withContentsOf: list123) =?= list123
		List<Int>() { add(1); add(2); add(3) } =?= list123
		List(with: 3, copiesOf: 1) =?= list111
		List(with: 3, itemsGeneratedBy: i => i + 1) =?= list123
		List(with: 3, itemsGeneratedBy: i => 1) =?= list111
	}

	@Test func applyArrayList() -> void {
		infix func =?=(lhs: any!, rhs: any!) -> void {
			lhs.shouldBe<ArrayList>()
			lhs.shouldEqual(rhs)
		}

		ArrayList<Int>() =?= emptyList
		ArrayList(1) =?= list1
		ArrayList(1, 2, 3) =?= list123
		ArrayList(list123) =!= list123
		ArrayList(withContentsOf: emptyList) =?= emptyList
		ArrayList(withContentsOf: list1) =?= list1
		ArrayList(withContentsOf: list123) =?= list123
		ArrayList<Int>(capacity: 5) =?= emptyList
	}

	@Test func applyLinkedList() -> void {
		infix func =?=(lhs: any!, rhs: any!) -> void {
			lhs.shouldBe<LinkedList>()
			lhs.shouldEqual(rhs)
		}

		LinkedList<Int>() =?= emptyList
		LinkedList(1) =?= list1
		LinkedList(1, 2, 3) =?= list123
		LinkedList(list123) =!= list123
		LinkedList(withContentsOf: emptyList) =?= emptyList
		LinkedList(withContentsOf: list1) =?= list1
		LinkedList(withContentsOf: list123) =?= list123
	}

	// =============== Methods ===============

	@Test func indexOfSubList() -> void {
		let list = List(1, 1, 1, 2, 3)
		list.indexOf(subList: list111) =?= 0
		list.indexOf(subList: list123) =?= 2
		list.indexOf(subList: list1) =?= 0
		list.indexOf(subList: emptyList) =?= 0

		list123.indexOf(subList: list) =?= -1
	}

	@Test func lastIndexOfSubList() -> void {
		let list = List(1, 2, 3, 1, 1, 1, 2, 3)
		list.lastIndexOf(subList: list111) =?= 3
		list.lastIndexOf(subList: list123) =?= 5
		list.lastIndexOf(subList: list1) =?= 5
		list.lastIndexOf(subList: emptyList) =?= 8

		list123.lastIndexOf(subList: list) =?= -1
	}

	@Test func binarySearch() -> void {
		list123.binarySearch(2, Int.compare(_, _)) =?= 1
		List(1, 1, 2, 2, 3, 3).binarySearch(2, Int.compare(_, _)) =?= 2
	}

	@Test func subscript() -> void {
		list123[0] =?= 1
		list123[1] =?= 2
		list123[2] =?= 3
	}

	@Test func subscript_=() -> void {
		let list = Arrays.asList(1, 2, 3)
		list[2] = 4
		list =?= List(1, 2, 4)
	}

	@Test func subscript_&() -> void {
		let list = Arrays.asList(1, 2, 3)
		let ref = &list[1]
		*ref = 4
		list =?= List(1, 4, 3)
		list[1] = 0
		*ref =?= 0
	}

	@Test func replaceAll() -> void {
		let list = Arrays.asList(1, 2, 1, 3, 1)
		list.replaceAll(1, 0)
		list =?= List(0, 2, 0, 3, 0)
		list.replaceAll(1, 2)
		list =?= List(0, 2, 0, 3, 0)
	}

	@Test func swap() -> void {
		let list = Arrays.asList(1, 2, 3)
		list.swap(0, 2)
		list =?= List(3, 2, 1)
		list.swap(2, 1)
		list =?= List(3, 1, 2)
	}

	@Test func reverse() -> void {
		let list = Arrays.asList(1, 2, 3)
		list.reverse()
		list =?= List(3, 2, 1)
	}

	@Test func rotate() -> void {
		let list = Arrays.asList(1, 2, 3)
		list.rotate(1)
		list =?= List(3, 1, 2)
		list.rotate(2)
		list =?= List(1, 2, 3)
		list.rotate(-1)
		list =?= List(2, 3, 1)
	}

	@Test func shuffle() -> void {
		let list = Arrays.asList(1, 2, 3, 4, 5)
		list.shuffle(new java.util.Random(0))
		list =?= List(5, 3, 2, 4, 1)
	}

	@Test func sort() -> void {
		let list = Arrays.asList(5, 2, 4, 1, 3)
		list.sort()
		list =?= List(1, 2, 3, 4, 5)
	}
}
