package dyvil.test

public class OperatorTest
{
	public static final void main([String] args)
	{
		unaryTest()
		binaryTest()
		ternaryTest()
	}

	public static void unaryTest()
	{
		infix (int, int) apply(int i, int j) = (i, j)
		postfix func ++(int i): int = i

		int i = 1							 // Canonical Representation:
		(int, int) j = i -i					 // i.apply(-i)
		[int] k = [ i - i, i-i, i- i ]		 // i - i
		[int] l = [ i- -i, i - -i, i - - i ] // i - (-i)
		[int] m = [ i++ , i++, i ++ ]		 // i++
		int n = i++ + i						 // (i++) + i
		int o = i++ + ++ i					 // (i++) + (++i)
		int p = i++ + + ++ i				 // (i++) + (+ (++i))

		// don't care about values, resolution pass is sufficient
	}

	public static void binaryTest()
	{
		let i = 1 + 2 * 3 + 4
		let k = 1 : 2 : 3

		Main.test("Operator Precedence Test", 11, i)
		Main.test("Operator Associativity Test", (1, (2, 3)), k)
	}

	public static void ternaryTest()
	{
		let i = true ? 1 : 2
		let j = true ? 1 : true ? 2 : 3
		let k = true ? true ? 1 : 2 : 3
		let l = true ? 1+1 : true ? true ? 2+2 : 3+3 : 4+4

		// don't care about values, type check pass is sufficient
	}
}
