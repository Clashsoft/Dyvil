package dyvil.test

public class OperatorTest
{
	public static final void main([String] args)
	{
		unaryTest()
		binaryTest()
		ternaryTest()
	}

	private static void unaryTest()
	{
		infix (int, int) apply(int i, int j) = (i, j)
		postfix func ++(int i): int = i

		var i = 1							// Canonical Representation:
		var j = i -i						// i.apply(-i)
		var k = [ i - i, i-i, i- i ]		// i - i
		var l = [ i- -i, i - -i, i - - i ]	// i - (-i)
		var m = [ i++ , i++, i ++ ]			// i++
		var n = i++ + i						// (i++) + i
		var o = i++ + ++ i					// (i++) + (++i)
		var p = i++ + + ++ i				// (i++) + (+ (++i))

		// don't care about values, resolution pass is sufficient

		Main.test("Unary Operator Test", (1, -1), j)
	}

	private static void binaryTest()
	{
		var i = 1 + 2 * 3 + 4
		var k = 1 : 2 : 3

		Main.test("Operator Precedence Test", 11, i)
		Main.test("Operator Associativity Test", (1, (2, 3)), k)
	}

	private static void ternaryTest()
	{
		var i = true ? 1 : 2
		var j = true ? 1 : true ? 2 : 3
		var k = true ? true ? 1 : 2 : 3
		var l = true ? 1+1 : true ? true ? 2+2 : 3+3 : 4+4

		// don't care about values, type check pass is sufficient
	}
}
