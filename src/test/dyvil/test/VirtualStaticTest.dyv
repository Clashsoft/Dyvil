package dyvil.test

public class VirtualStaticTest
{
	// Static Virtual Method Test

	class Base
	{
		public static String foo() = "Base"
		public static String bar(String s) = s + "_Base"
	}

	class Derived extends Base
	{
		public static String foo() = "Derived"
		public static String bar(String s) = s + "_Derived"
	}

	public static String getFoo<@Reified(Reified.Type.ANY_CLASS) T extends Base>() = T.foo
	public static String getBar<@Reified(Reified.Type.OBJECT_CLASS) T extends Base>(String s) = T.bar(s)

	interface IntConstructible
	{
		static T apply<T>(int i) = null
	}
	case class CustomInt(public final int value) implements IntConstructible
	case class MyInt    (public final int value) implements IntConstructible

	public static T create<@Reified(Reified.Type.TYPE) T extends IntConstructible>(int i) = T<T>(i)

	public static void main([String] args)
	{
		Main.test("Static Virtual Method Test 1", "Base", getFoo<Base>)
		Main.test("Static Virtual Method Test 2", "Derived", getFoo<Derived>)
		Main.test("Static Virtual Method Test 3", "_Base", getBar<Base>(""))
		Main.test("Static Virtual Method Test 4", "_Derived", getBar<Derived>(""))

		let customInt = create<CustomInt>(10)
		let myInt = create<MyInt>(20)
		Main.test("Static Virtual Method Test 5", 10, customInt.value)
		Main.test("Static Virtual Method Test 6", 20, myInt.value)
	}
}
