package dyvil.test.lang

using dyvil.test.JUnit
using dyvil.reflect.Opcodes._

infix operator +- { precedence 100, associativity left }

class IntrinsicTest {
	@Intrinsic([ LOAD_0, LOAD_1, INEG, IADD ])
	infix func +-(i: int, j: int) -> int = throw new RuntimeException("Not Intrinsic!")

	@Test
	func simple() -> void {
		let i1 = 1 +- 2
		let i2 = 2 +- -4
		let i3 = -1 +- 3
		let i4 = -7 +- -5

		i1 =?= -1
		i2 =?= 6
		i3 =?= -4
		i4 =?= -2
	}

	// --------------- Method Calls ---------------

	private static var value: int

	@Intrinsic([ LOAD_0, PUTSTATIC, 0, 1, 2 ]
	  strings: [ "dyvil/test/lang/IntrinsicTest", "value", "I" ])
	private static func setValue(value: int) -> void = throw new RuntimeException("Not Intrinsic!")

	@Test
	func methodCalls() -> void {
		setValue 1
		setValue 7

		value =?= 7
	}

	// --------------- Order ---------------

	static func orderTest(first: int, second: int) -> (int, int) = (first, second)

	@Test
	func order() -> void {
		let order = MutableList<int>()
		let res1 = orderTest(first: { order.add 1; 1 }, second: { order.add 2; 2 })
		let res2 = orderTest({ order.add 2; 2 }, { order.add 1; 1 })

		res1 =?= (1, 2)
		res2 =?= (2, 1)
		order =?= List(1, 2, 2, 1)
	}
}
