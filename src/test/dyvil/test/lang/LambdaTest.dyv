package dyvil.test.lang

using dyvil.Collections
using dyvil.Functions
using dyvil.Test

public class LambdaTest
{
	@FunctionalInterface
	public interface MyFunction<P, R>
	{
		func apply(par: P) -> R

		func andThen<A>(other: MyFunction<R, A>) -> MyFunction<P, A> = x => other(this(x))
	}

	@FunctionalInterface
	public interface IntFunction extends MyFunction<int, int>
	{
		override func apply(par: int) -> int
	}

	static func repeatClosure(times: int, function: -> void) -> void = for (i <- 0 ..< times) function()

	private static var staticSum: int = 0

	static func apply() -> Test = test "Lambdas" {
		basic()
		chaining()
		compoundAssignment()
		customSAMType()
		closures()
		partialFunctions()
		curried()
		typeInference()
	}

	static func basic() -> Test = test "Basic" {
		let nullary1 = () => 1
		let nullary2 = -> long => 2
		let nullary3 = { => 1 }
		let nullary4 = { -> float => 2 }
		// Make sure these compile without errors

		let expected = [ 1 : "A" ]
		let actual = expected.flatMapped<int, String>((i, s) => [ (i, s) ])

		actual =?= expected
	}

	static func chaining() -> Test = test "Chaining" {
		let fun1 = (i: int) -> int => i + 1
		let fun2 = (i: int) -> int => i * 2
		let fun12 = fun1.andThen fun2
		let result = fun12(7)

		result =?= 16
	}

	static func compoundAssignment() -> Test = test "Compound Assignment" {
		var localSum = 0
		let list = List(1, 2, 3)

		staticSum = 0
		list.forEach(i => localSum += i)
		list.forEach(i => staticSum += i)

		test "Local" { localSum =?= 6 }
		test "Static" { staticSum =?= 6 }
	}

	static func customSAMType() -> Test = test "Custom SAM Type" {
		let intF: IntFunction = i => i * i
		let result = intF(7)

		result =?= 49
	}

	static func closures() -> Test = test "Closures" {
		let result = List<String>()

		// capturing
		let function1: -> void = function { result += "a" }

		// non-capturing
		let function2: -> String = function { "b" }

		// capturing another closure
		repeatClosure(3) { result += function2() }

		// named
		with("c") { it => result += it }

		function1()

		result =?= List("b", "b", "b", "c", "a")

		test "#408 + #415" {
			// #408 "Trailing closure syntax does not work with explicit closure parameter names"
			// #415 "Implicit Receivers are not captured correctly"

			// This code differs from the example code in that the closures don't print, but add tests.
			// The use of a captured variable as an implicit receiver failed the verifier before issue #415 was fixed

			func test(s: String, f: String -> void) -> void = f(s)

			test("abc") { $0 =?= "abc" } // ok (trailing closure, no explicit parameter names)

			test("abc", { name => name =?= "abc" }) // ok (explicit parameter names, no trailing closure)

			test("abc") { name => name =?= "abc" } // was "error - test(String) cannot be resolved"
		}
	}

	static func partialFunctions() -> Test = test "Partial Functions" {
		let compareInts: (int, int) -> int = _.compareTo _
		let testFun: any -> Test = _ =?= -1

		testFun(compareInts(1, 2))

		with("A", _ =?= "A")
	}

	static func curried() -> Test = test "Curried" {
		let add2: int -> int -> int               = i => j =>           i + j
		let add3: int -> int -> int -> int        = i => j => k =>      i + j + k
		let add4: int -> int -> int -> int -> int = i => j => k => l => i + j + k + l

		(add2 1 10) =?= 11
		(add3 1 10 100) =?= 111
		(add4 1 10 100 1000) =?= 1111
	}

	static func typeInference() -> Test = test "Type Inference" {
		let function1 = { i: int -> int => i }
		let function2 = { i: int, j: int => (i, j) }
		let functionCurried = (i: int) => (j: int) => (i, j)

		function1.staticType.toString =?= type(int -> int).toString
		function2.staticType.toString =?= type((int, int) -> (int, int)).toString
		functionCurried.staticType.toString =?= type(int -> int -> (int, int)).toString
	}
}
