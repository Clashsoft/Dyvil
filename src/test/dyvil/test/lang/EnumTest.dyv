package dyvil.test.lang

using dyvil.Test

class EnumTest
{
	static func apply() -> Test = test "Enum" {
		load(class Empty)
		load(class WithParams)
		load(class WithCtor)
		load(class Color)

		test "constructors" {
			Color.RED.rgb =?= 0xFF0000
			Color.GREEN.rgb =?= 0x00FF00
			Color.BLUE.rgb =?= 0x0000FF
		}

		test "from(ordinal)" {
			require(Color.from(0) match {
				case .RED => true
				case _ => false
			})
		}

		test "from(name)" {
			require(Color.from("GREEN") match {
				case .GREEN => true
				case _ => false
			})
		}
	}

	static func load(c: Class<_>) -> void {}

	// Test Constructor / Initializer Generation and Transformation

	static enum Empty

	static enum WithParams(let s: String, let i: int)

	static enum WithCtor
	{
		private init() : super()

		private init(i: int) : this()

		private init(s: String, i: int) : this(i)
	}

	static enum Color(let rgb: int)
	{
		case RED = (255, 0, 0)
		case GREEN = 0x00FF00
		case BLUE = (0, 0, 255)

		init(r: int, g: int, b: int) : this((r & 0xFF) << 16 | (g & 0xFF) << 8 | (b & 0xFF))
	}
}
