package dyvil.test.lang

using dyvil.Test
using dyvil.Strings

public class ExtensionTest
{
	static func apply() -> Test = test "Extension Methods" {
		sourceFallback()
		sourceOverride()
		externalStrings()
		sourceStrings()
		generic()
	}

	// --------------- Extension of Source Classes ---------------

	static class A

	static class B extends A

	static class C extends B
	{
		public func custom() -> String = "custom"
	}

	static class D extends C

	extension A
	{
		func custom() -> String = "fallback"
	}

	static func sourceFallback() -> Test = test "Source Fallback" {
		let a = new A
		let b = new B

		a.custom =?= "fallback"
		b.custom =?= "fallback"
	}

	static func sourceOverride() -> Test = test "Source Override" {
		let c = new C
		let d = new D

		let cA: A = c
		let cB: B = c

		c.custom =?= "custom"
		cA.custom =?= "custom"
		cB.custom =?= "custom"
		d.custom =?= "custom"
	}

	// --------------- External Extension of External Class ---------------

	static func externalStrings() -> Test = test "External Strings Extension" {
		"aaaba".count('a') =?= 4

		"A" * 4 =?= "AAAA"

		String(fromShared: [ 'a', 'b', 'c' ]) =?= "abc"

		let lambda1 = () => String(fromShared: [])
		let lambda2 = (s: String, c: char) => s.contains(c)

		lambda1() =?= ""
		lambda2("asdf", 'd') =?= true
	}

	// --------------- Source Extension of External Class ---------------

	extension String {
		static func myEmpty() -> String = ""

		func mySize() -> int = this.length
	}

	static func sourceStrings() -> Test = test "Source Strings Extension" {
		String.myEmpty =?= ""

		"abc".mySize =?= 3

		let lambda1 = () => String.myEmpty
		let lambda2 = (s: String) => s.mySize

		lambda1() =?= ""
		lambda2("asdf") =?= 4
	}

	// --------------- Generic Extensions ---------------

	extension<type T> List<T> {
		static func myEmpty<type T>() -> List<T> = List<T>()

		func first() -> T = this.get(0)

		func last() -> T = this.get(this.size - 1)

		func myAdd(element: T) -> void = this.add(element)
	}

	static func generic() -> Test = test "Generic Extensions" {
		let list = MutableList(1, 2, 3)

		list.first =?= 1
		list.last =?= 3

		list.myAdd(4)

		list.last =?= 4

		List.myEmpty<String>() =?= List<String>()
	}

	// --------------- Speed Test ---------------

	static func testSpeed() -> void
	{
		let values = [ new A, new B, new C, new D ]
		let dump: [String] = new [String](4)
		let random = Random()
		let count = 1_000_000
		var totalTime = 0L

		for (i <- 0 ..< count)
		{
			let index = random.nextInt(values.size)
			let current = values[index]

			let now = System.nanoTime
			dump[index] = current.custom
			totalTime += System.nanoTime - now
		}

		print dump
		print "Dynamic Dispatch Speed: \(totalTime / count) ns / invocation"
	}
}
