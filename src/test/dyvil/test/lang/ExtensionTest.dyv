package dyvil.test.lang

using dyvil.test.JUnit
using dyvil.Strings

class ExtensionTest {
	// --------------- Extension of Source Classes ---------------

	static class A

	static class B extends A

	static class C extends B {
		func foo() -> String = "C.foo"

		func bar() -> String = "C.bar"
	}

	static class D extends C

	extension A {
		func foo() -> String = "extension A.foo"

		final func bar() -> String = "extension A.bar"
	}

	@Test func sourceExtensionOfSourceClass() -> void {
		let a = new A
		let b = new B
		let bA: A = b
		let c = new C
		let cA: A = c
		let cB: B = c
		let d = new D
		let dA: A = d
		let dB: B = d
		let dC: C = d

		a.foo =?= "extension A.foo"
		bA.foo =?= "extension A.foo"
		b.foo =?= "extension A.foo"
		cA.foo =?= "C.foo"
		cB.foo =?= "C.foo"
		c.foo =?= "C.foo"
		dA.foo =?= "C.foo"
		dB.foo =?= "C.foo"
		dC.foo =?= "C.foo"
		d.foo =?= "C.foo"

		a.bar =?= "extension A.bar"
		bA.bar =?= "extension A.bar"
		b.bar =?= "extension A.bar"
		cA.bar =?= "extension A.bar"
		cB.bar =?= "extension A.bar"
		c.bar =?= "C.bar"
		dA.bar =?= "extension A.bar"
		dB.bar =?= "extension A.bar"
		dC.bar =?= "C.bar"
		d.bar =?= "C.bar"
	}

	// --------------- External Extension of External Class ---------------

	@Test func externalExtensionOfExternalClass() -> void {
		"aaaba".count('a') =?= 4

		"A" * 4 =?= "AAAA"

		String(sharing: [ 'a', 'b', 'c' ]) =?= "abc"

		let lambda1 = () => String(sharing: [])
		let lambda2 = (s: String, c: char) => s.contains(c)

		lambda1() =?= ""
		lambda2("asdf", 'd') =?= true
	}

	// --------------- Source Extension of External Class ---------------

	extension String {
		static func myEmpty() -> String = ""

		func mySize() -> int = this.length
	}

	@Test func sourceExtensionOfExternalClass() -> void {
		String.myEmpty =?= ""

		"abc".mySize =?= 3

		let lambda1 = () => String.myEmpty
		let lambda2 = (s: String) => s.mySize

		lambda1() =?= ""
		lambda2("asdf") =?= 4
	}

	// --------------- Generic Extensions ---------------

	extension<type T> List<T> {
		static func myEmpty<type T>() -> List<T> = List<T>()

		func first() -> T = this.get(0)

		func last() -> T = this.get(this.size - 1)

		func myAdd(element: T) -> void = this.add(element)
	}

	@Test func genericExtensionOfExternalClass() -> void {
		let list = MutableList(1, 2, 3)

		list.first =?= 1
		list.last =?= 3

		list.myAdd(4)

		list.last =?= 4

		List.myEmpty<String>() =?= List<String>()
	}
}
