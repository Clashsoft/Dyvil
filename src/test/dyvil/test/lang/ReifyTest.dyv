package dyvil.test.lang

using dyvil.Test

public class ReifyTest
{
	// Reify Type
	static func typeOf<@Reified(.TYPE) T>() -> Type<T> = type T

	// Reify Type, with Argument
	static func typeOf<@Reified(.TYPE) T>(value: T) -> Type<T> = type T

	// Reify Class
	static func classOf<@Reified(.TYPE) T>() -> Class<T> = class T

	// Reify Class, with Argument
	static func classOf<@Reified(.TYPE) T>(value: T) -> Class<T> = class T

	// Reify Class from Erasure
	static func classOfErasure<@Reified(.ANY_CLASS) T>() -> Class<T> = class T

	// Reify Class from Erasure, with Argument
	static func classOfErasure<@Reified(.ANY_CLASS) T>(value: T) -> Class<T> = class T

	static func apply() -> Test = test "Reify" {
		typeTest()
		classTest()
		classErasureTest()
		overrideTest()
		captureTest()
	}

	static func typeTest() -> Test = test "Type" {
		let listType = type<List<String>>

		let type1 = ReifyTest.typeOf<List<String>>
		let type2 = ReifyTest.typeOf(List("a", "b", "c") as List<String>)

		type1.toString =?= listType.toString
		type2.toString =?= listType.toString
	}

	static func classTest() -> Test = test "Class" {
		let stringClass = class String

		let class1 = ReifyTest.classOf<String>
		let class2 = ReifyTest.classOf "abc"

		class1 =?= stringClass
		class2 =?= stringClass
	}

	static func classErasureTest() -> Test = test "Erasure" {
		let stringClass = class String

		let class1 = ReifyTest.classOfErasure<String>
		let class2 = ReifyTest.classOfErasure "abc"

		class1 =?= stringClass
		class2 =?= stringClass
	}

	static class Base
	{
		func foo<@Reified(.TYPE)         T>() -> Object = type<T>
		func bar<@Reified(.ANY_CLASS)    T>() -> Object = class<T>
		func baz<@Reified(.OBJECT_CLASS) T>() -> Object = class<T>
	}

	static class Derived1 extends Base
	{
		override func foo<@Reified(.ANY_CLASS) T>() -> Object = class<T>
		override func bar<@Reified(.TYPE)      T>() -> Object = type<T>
		override func baz<@Reified(.TYPE)      T>() -> Object = type<T>
	}

	static class Derived2 extends Base
	{
		override func foo<@Reified(.OBJECT_CLASS) T>() -> Object = class<T>
		override func bar<@Reified(.OBJECT_CLASS) T>() -> Object = class<T>
		override func baz<@Reified(.ANY_CLASS)    T>() -> Object = class<T>
	}

	static func overrideTest() -> Test = test "Override" {
		let b1: Base = new Derived1
		let b2: Base = new Derived2

		b1.foo<String>          =?= class<String>
		b1.bar<String>.toString =?= type<String>.toString
		b1.baz<String>.toString =?= type<String>.toString

		b2.foo<String> =?= class<String>
		b2.bar<String> =?= class<String>
		b2.baz<String> =?= class<String>
	}

	// Capture

	interface Generic<T>
	{
		func get() -> T
	}

	static func capture<@Reified(.OBJECT_CLASS) type T>() = new Generic<T>() {
		override func get() -> T = class(T).newInstance()
	}

	static func captureTest() -> Test = test "Capture" {
		let gen = capture<String>()
		let str = gen.get()
		str =?= ""
	}
}
