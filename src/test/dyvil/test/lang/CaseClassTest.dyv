package dyvil.test.lang

using dyvil.Test

import java.io._

class CaseClassTest
{
	// Tree / Leaf / Node

	@SwitchOptimized
	static interface Tree<+T>

	@SwitchOptimized
	static case class Leaf<T>(value: T) implements Tree<T>

	@SwitchOptimized
	static object EmptyLeaf implements Tree<none>

	@SwitchOptimized
	static case class Node<T>(value: T, left: Tree<T>, right: Tree<T>) implements Tree<T>

	// ------

	static case class Person(
		let id: long
		let name: String
		let age: int
		let height: double
	)

	static case class Student(
		override let id: long
		override let name: String
		override let age: int
		override let height: double
		let faculty: String
		let studentID: long
	) extends Person(id, name, age, height)

	static case class Arrays(
		let ints: [int]
		let longs: [long]
		let floats: [float]
		let doubles: [double]
		let strings: [String]
		let objects: [Object]!
	)

	static func apply() -> Test = test "Case Classes" {
		let id     = 1234567890L
		let name   = "Peter Peterson"
		let age    = 20
		let height = 1.92
		let person = Person(id, name, age, height)
		let other  = Person(id, name, age, height)
		let string = "Person(\(id), \(name), \(age), \(height))"

		let array1 = Arrays([0], [0L], [0F], [0D], [""], null)
		let array2 = Arrays([0], [0L], [0F], [0D], [""], null)
		let array3 = Arrays([0], [0L], [0F], [0D], ["a"], null)

		test "Equality" {
			person =?= other

			array1 =?= array2
			array1 =!= array3
			array2 =!= array3
		}

		test "Hash Codes" {
			person.hashCode =?= other.hashCode

			array1.hashCode =?= array2.hashCode
			array1.hashCode =!= array3.hashCode
			array2.hashCode =!= array3.hashCode
		}

		test "Strings" {
			person.toString =?= other.toString
			person.toString =?= string

			array1.toString =?= array2.toString
			array1.toString =!= array3.toString
			array2.toString =!= array3.toString
		}

		test "Serialization" {
			// ---- Serialize ----

			let bos = new ByteArrayOutputStream
			let oos = new ObjectOutputStream(bos)

			oos.writeObject(person)
			oos.close()

			let bytes = bos.toByteArray

			// ---- Deserialize ----

			let ois = new ObjectInputStream(new ByteArrayInputStream(bytes))
			let deserialized = ois.readObject

			deserialized =?= person
		}
	}
}
