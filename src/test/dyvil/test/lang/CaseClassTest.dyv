package dyvil.test.lang

using dyvil.test.JUnit

import java.io._

class CaseClassTest {
	// Tree / Leaf / Node

	@SwitchOptimized
	static interface Tree<+T>

	@SwitchOptimized
	static case class Leaf<T>(value: T) implements Tree<T>

	@SwitchOptimized
	static object EmptyLeaf implements Tree<none>

	@SwitchOptimized
	static case class Node<T>(value: T, left: Tree<T>, right: Tree<T>) implements Tree<T>

	// ------

	static case class Person(
		let id: long
		let name: String
		let age: int
		let height: double
	)

	static case class Student(
		override let id: long
		override let name: String
		override let age: int
		override let height: double
		let faculty: String
		let studentID: long
	) extends Person(id, name, age, height)

	static case class Arrays(
		let ints: [int]
		let longs: [long]
		let floats: [float]
		let doubles: [double]
		let strings: [String]
		let objects: [Object]!
	)

	static let id     = 1234567890L
	static let name   = "Peter Peterson"
	static let age    = 20
	static let height = 1.92
	static let person = Person(id, name, age, height)
	static let other  = Person(id, name, age, height)
	static let string = "Person(\(id), \(name), \(age), \(height))"

	static let array1 = Arrays([0], [0L], [0F], [0D], [""], null)
	static let array2 = Arrays([0], [0L], [0F], [0D], [""], null)
	static let array3 = Arrays([0], [0L], [0F], [0D], ["a"], null)

	@Test
	func equality() -> void {
		person =?= other

		array1 =?= array2
		array1 =!= array3
		array2 =!= array3
	}

	@Test
	func hashCodes() -> void {
		person.hashCode =?= other.hashCode

		array1.hashCode =?= array2.hashCode
		array1.hashCode =!= array3.hashCode
		array2.hashCode =!= array3.hashCode
	}

	@Test
	func strings() -> void {
		person.toString =?= other.toString
		person.toString =?= string

		array1.toString =?= array2.toString
		array1.toString =!= array3.toString
		array2.toString =!= array3.toString
	}

	@Test
	func serialization() -> void {
		// ---- Serialize ----

		let bos = new ByteArrayOutputStream
		let oos = new ObjectOutputStream(bos)

		oos.writeObject(person)
		oos.close()

		let bytes = bos.toByteArray

		// ---- Deserialize ----

		let ois = new ObjectInputStream(new ByteArrayInputStream(bytes))
		let deserialized = ois.readObject

		deserialized =?= person
	}
}
