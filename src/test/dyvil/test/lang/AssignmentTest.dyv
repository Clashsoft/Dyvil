package dyvil.test.lang

using dyvil.test.JUnit

class AssignmentTest
{
	@Test
	func localInt() -> void {
		var i = 0
		i += 2
		let result = i += 1
		result =?= 3
    }

    @Test
    func localLong() -> void {
        var l = 0
		l += 3
		let result = l += 1

		result =?= 4
	}

	private static var counter: int = 0

	@Test
	func staticField() -> void {
		counter = 0
		counter += 4
		let result = counter += 1

		counter =?= 5
	}

	static class Counter {
		var value: int = 0
		var applyArray: [int] = new [int](4)
		var subscriptArray: [int] = new [int](4)

		func apply(i: int) -> int = this.applyArray[i]
		func apply_=(i: int, value: int) -> void = this.applyArray[i] = value

		func subscript(i: int) -> int = this.subscriptArray[i]
		func subscript_=(i: int, value: int) = this.subscriptArray[i] = value
	}

	@Test
	func instanceFieldStatement() -> void {
		let counter = new Counter
		counter.value += 2

		counter.value =?= 2
	}

	@Test
	func instanceFieldExpression() -> void {
		let counter = new Counter
		let result = counter.value += 5

		counter.value =?= 5
		result =?= 5
	}

	@Test
	func compound() -> void {
		let counter = new Counter
		var modCount = 0

		counter(modCount += 1) += (modCount += 1) // apply/apply_=
		counter[modCount += 1] += (modCount += 1) // subscript/subscript_=

		modCount =?= 4
		counter.applyArray =?= [ 0, 2, 0, 0 ]
		counter.subscriptArray =?= [ 0, 0, 0, 4 ]
	}
}
