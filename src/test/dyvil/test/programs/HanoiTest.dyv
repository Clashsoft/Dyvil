package dyvil.test.programs

using dyvil.test.JUnit

class HanoiTest {
	@Test
	func hanoi() -> void {
		for i <- 1 .. 10 {
			requiredMoves(i) =?= run(i).size
		}
	}

	static func requiredMoves(n: int) -> int = (1 << n) - 1

	@LiteralConvertible.FromString
	static class Tower(public let id: String) extends mutable.LinkedList<int> {
		static func apply(id: String) -> Tower = new Tower(id)
	}

	static func run(n: int) -> List<String> {
		let moves = List<String>()

		let source: Tower = 'source'
		for i <- 1 .. n {
			source.push(i) // fill the tower
		}

		move(moves, n, source, 'helper', 'target')

		return moves
	}

	static func move(moves: List<String>, from: Tower, to: Tower) -> void {
		if let item = from.pop() {
			moves.add "Move \(item) from \(from.id) to \(to.id)"
			to.push(item)
		}
	}

	static func move(moves: List<String>, n: int, from: Tower, helper: Tower, to: Tower) -> void {
		if n > 0 {
			move(moves, n - 1, from, to, helper) // from   -> helper
			move(moves, from, to)                // from   -> to
			move(moves, n - 1, helper, from, to) // helper -> to
		}
	}
}
