package dyvil.test

import dyvil.tests.LambdaTest

public class ReferenceTest
{
	public static void inc(int^ i) = *i = *i + 1

	public static int staticField = 0

	public static int staticProperty
	{
		get: staticField
		set: staticField = newValue
	}

	public static class Holder
	{
		public int instanceField = 0

		public int instanceProperty
		{
			get: this.instanceField
			set: this.instanceField = newValue
		}
	}

	@LiteralConvertible.FromInt
	public static case class MyInt(public final int value)
	{
		static implicit func apply(int i) = new MyInt(i)

		infix func +(MyInt i, MyInt j) = MyInt(i.value + j.value)

		infix func +(MyInt i, int j) -> MyInt = MyInt(i.value + j)

		infix func +(int i, MyInt j) -> MyInt = MyInt(i + j.value)

		postfix func addInplace(MyInt^ i, int j) -> void = *i = *i + j
	}

	public static void main([String] args)
	{
		testFieldReference()
		testPropertyReference()
		testVariableReference()
		testReceiverReference()
	}

	public static void testFieldReference()
	{
		inc staticField
		Main.test("Static Field Reference", 1, staticField)

		Holder holder = new Holder
		inc holder.instanceField
		Main.test("Instance Field Reference", 1, holder.instanceField)
	}

	public static void testPropertyReference()
	{
		inc(&staticProperty)
		Main.test("Static Property Reference", 2, staticField)

		Holder holder = new Holder
		inc(&holder.instanceProperty)
		Main.test("Instance Property Reference", 1, holder.instanceField)
	}

	public static void testVariableReference()
	{
		int variable = 0
		inc variable
		Main.test("Variable Reference", 1, variable)

		int capturedVariable = 0
		LambdaTest.repeatClosure(3) {
			inc capturedVariable
		}

		Main.test("Captured Variable Reference", 3, capturedVariable)
	}

	public static void testReceiverReference()
	{
		MyInt i = MyInt(0)
		i.addInplace 1
		Main.test("Receiver Field Reference", i.value, 1)
	}
}
