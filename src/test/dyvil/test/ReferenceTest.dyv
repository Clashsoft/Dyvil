package dyvil.test

public class ReferenceTest
{
	static void inc(var int i) { i++ }

	static int staticField = 0

	static class Holder
	{
		public int instanceField = 0
	}

	static case class ImmutableHolder(public final int value)
	{
		public ImmutableHolder operator +(int value) = ImmutableHolder(this.value + value)

		public postfix void operator +=(var ImmutableHolder holder, int value) = holder = holder + value
	}

	public static void main([String] args)
	{
		testFieldReference()
		testVariableReference()
		testReceiverReference()
	}

	private static void testFieldReference()
	{
		inc staticField
		Main.test("Static Field Reference", 1, staticField)

		Holder holder = new Holder
		inc holder.instanceField
		Main.test("Instance Field Reference", 1, holder.instanceField)
	}

	private static void testVariableReference()
	{
		int variable = 0
		inc variable
		Main.test("Variable Reference", 1, variable)

		int capturedVariable = 0
		repeat(3) { inc capturedVariable }
		Main.test("Captured Variable Reference", 3, capturedVariable)
	}

	private static void testReceiverReference()
	{
		ImmutableHolder holder = ImmutableHolder(0)
		holder += 1
		Main.test("Receiver Field Reference", holder.value, 1)
	}
}
