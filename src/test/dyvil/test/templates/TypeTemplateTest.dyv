package dyvil.test.templates

public class TypeTemplateTest
{
	// Specialized for all Ts
	public static func f<template type T>(T value): T = value

	// Specialized Implementation for T = int
	public static func f<template T = int>(int value): int = value + 1

	// Specialized inline for T's that are sub-types of int, String or float
	public static func g<static template<int, String, float> type T>(T value): T = value

	// Specialized inline for T's that are sub-types of int, String or float
	// (Specialized method for other types is compiled at the call-site)
	public static func h<template<int, String, float> type T>(T value): T = value

	public static void main([String] args)
	{
		String s = f<String>("abc") // "abc"
		int i = f<int>(1) // 2
		int j = g<int>(1)
		int k = h<int>(1)
	}
}
