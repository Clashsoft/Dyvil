package dyvil.test

public class LambdaTest
{	
	functional interface Function[P, R]
	{
		public R apply(P par1)
		
		public Function[P, A] andThen[A](Function[R, A] other) = x => other(this(x))
	}
	
	functional interface IntFunction extends Function[int, int] {
		public override int apply(int value)
	}
	
	private static int staticSum = 0
	
	public static void main([String] args)
	{
		println "-- Basic Lambda Test --"
		basicTest()
		println "-- Function Chain Test --"
		chainTest()
		println "-- Compound Assignment Test --"
		compoundAssignmentTest()
		println "-- Custom SAM Interface Test --"
		customSAMTest()
	}
	
	private static void basicTest() {
		auto map = [ 1 : "a", 2 : "b" ].flatMapped((i, s) => [ (i, s.toUpperCase), (i * 10, s) ])
		println map
	}
	
	private static void chainTest() {
		auto fun1 = (int i) => i + 1
		auto fun2 = (int i) => i * 2
		auto fun12 = fun1 andThen fun2
		println(fun12(7))
	}
	
	private static void compoundAssignmentTest() {
		int localSum = 0
		auto list = List(1, 2, 3)
		list.forEach(i => localSum += i)
		list.forEach(i => staticSum += i)
		println localSum
		println staticSum
	}
	
	private static void customSAMTest() {
		IntFunction intF = i => i * i
		println(intF(7))
				
		auto fun1 = intF
		println(fun1(10))
	}
}