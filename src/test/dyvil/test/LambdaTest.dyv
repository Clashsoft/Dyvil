package dyvil.test

public class LambdaTest
{
	object Test
	{
		public => Test captureThis() = => this
	}
	
	functional interface Function[P, R]
	{
		public R apply(P par1)
		
		public Function[P, A] andThen[A](Function[R, A] other) = x => other(this(x))
	}
	
	functional interface IntFunction extends Function[int, int] {
		public override int apply(int value)
	}
	
	public static void main([String] args)
	{
		auto map1 = [ 1 -> "a", 2 -> "b" ] as Map;
		auto map2 = map1.flatMapped((i, s) => [ (i, s.toUpperCase), (i * 10, s) ])
		println map2
		
		auto test = Test
		auto getter = test.captureThis
		println test
		println getter
		
		Function[int, int] fun1 = (int i) => i + 1
		Function[int, int] fun2 = (int i) => i * 2
		auto fun12 = fun1 andThen fun2
		auto res = fun12(7)
		println res
		
		IntFunction intF = i => i * i
		println(intF(7))
		
		fun1 = intF
		println(fun1(10))
	}
}