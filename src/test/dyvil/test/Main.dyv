package dyvil.test

import dyvil.tests._
using dyvil.Test

public class Main
{
	private static var errors = List<String>

	public static void main([String] args)
	{
		print "Running Dyvil Tests..."

		runTests(args)
		verify()
	}
		
	private static void runTests([String] args)
	{
		let test = test "Main" {
			AnnotationTest()
			ArrayTest()
			AssignmentTest()
			BridgeTest()
			BuilderTest()
			CaptureTest()
			CaseClassTest()
			ConstructorTest()
			DPFTest()
			ExtensionTest()
			FibonacciTest()
			ForTest()
			HanoiTest()
			ImplicitTest()
			InheritanceTest()
			IntrinsicTest()
			LambdaTest()
			MatchTest()
			MathTest()
			NestedMethodTest()
			ObjectTest()
			OperatorTest()
			OptionalTest()
			OverloadTest()
			PrimitiveTest()
			PropertyTest()
			RangeTest()
			ReferenceTest()
			ReifyTest()
			SortTest()
			SuperTest()
			SymbolTest()
			TypeTest()
			VarargsTest()
			VirtualStaticTest()
		}
		test.addErrors(errors)
	}

	private static void verify()
	{
		if (errors.isEmpty)
		{
			return
		}

		errors.forEach(print _)
		throw new AssertionError()
	}

	public static void error(String message)
	{
		errors.add message
	}

	public static void test(String testName, any! expected, any! actual)
	{
		test(testName, expected, actual, expected == actual)
	}

	public static void testString(String testName, any expected, any actual)
	{
		test(testName, expected, actual, expected.toString == actual.toString)
	}

	public static void test(String testName, any expected, any actual, boolean condition)
	{
		if (!condition)
		{
			errors.add "\(testName) FAILED:\n\texpected: \(expected)\n\tactual:   \(actual)"
		}
	}

	public static void test(String testName, boolean condition)
	{
		if (!condition)
		{
			errors.add "\(testName) FAILED"
		}
	}
}
