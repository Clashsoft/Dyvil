package dyvil.test

include dyvil.Collections
import dyvil.collection.range.Rangeable

public class RangeTest
{
	@dyvil.lang.literal.IntConvertible
	public case class RangeableInt(final int value) implements Rangeable<RangeableInt>
	{
		public override RangeableInt next() = apply(this.value + 1)

		public override RangeableInt previous() = apply(this.value - 1)

		public override int distanceTo(RangeableInt other) = Math.abs(this.value - other.value)

		public override int compareTo(RangeableInt other) = this.value.compareTo other.value
	}

	public static void main([String] args)
	{
		testInts()
		testRangeable()
	}
	
	public static void testInts()
	{
		var range1 = 1 .. 4
		var range2 = 1 ..< 4

		var rangeInclusive = List<int>
		for (var i <- range1)
		{
			rangeInclusive += i
		}
		Main.test("Int Range (inclusive)", List(1, 2, 3, 4), rangeInclusive)

		var rangeExclusive = List<int>
		for (var i <- range2)
		{
			rangeExclusive += i
		}
		Main.test("Int Range (exclusive)", List(1, 2, 3), rangeExclusive)

		var forInclusive = List<int>
		for (var i <- 1 .. 4)
		{
			forInclusive += i
		}
		Main.test("Int Range For (inclusive)", List(1, 2, 3, 4), forInclusive)

		var forExclusive = List<int>
		for (var i <- 1 ..< 4)
		{
			forExclusive += i
		}
		Main.test("Int Range For (exclusive)", List(1, 2, 3), forExclusive)
	}
	
	public static void testRangeable()
	{
		final RangeableInt one = 1
		final RangeableInt four = 4

		var range1 = one .. four
		var range2 = one ..< four
		
		var rangeInclusive = List<RangeableInt>
		for (var i <- range1)
		{
			rangeInclusive += i
		}
		Main.test("Rangeable Range (inclusive)", List<RangeableInt>(1, 2, 3, 4), rangeInclusive)

		var rangeExclusive = List<RangeableInt>
		for (var i <- range2)
		{
			rangeExclusive += i
		}
		Main.test("Rangeable Range (exclusive)", List<RangeableInt>(1, 2, 3), rangeExclusive)

		var forInclusive = List<RangeableInt>
		for (var i <- one .. four)
		{
			forInclusive += i
		}
		Main.test("Rangeable Range For (inclusive)", List<RangeableInt>(1, 2, 3, 4), forInclusive)

		var forExclusive = List<RangeableInt>
		for (var i <- one ..< four)
		{
			forExclusive += i
		}
		Main.test("Rangeable Range For (exclusive)", List<RangeableInt>(1, 2, 3), forExclusive)
	}
}
