package dyvil.test

public interface Test
{
	// Test Containers

	public interface TestContainerBase
	{
		func addTest(Test test) -> void

		func applyStatement(Test test) -> void = this.addTest(test)
	}

	public case class TestContainer(
		public let name: String
	) implements Test, TestContainerBase
	{
		protected let subTests: List<Test> = MutableList<Test>

		override func addTest(Test test) -> void = this.subTests.add(test)

		override func passes() -> boolean = this.subTests.allMatch(t => t.passes)

		override func addErrors(List<String> errors) -> void
		{
			let subErrors = MutableList<String>
			for (subTest <- this.subTests)
			{
				subTest.addErrors(subErrors)
			}

			if (subErrors.isEmpty) return

			errors.add("Test Collection '\(this.name)' failed:")
			for (subError <- subErrors)
			{
				errors.add('\t' + subError)
			}
		}
	}

	static func test(String name, Configure<TestContainerBase> configure) -> TestContainer
	{
		let container = new TestContainer(name)
		configure container
		return container
	}

	// Boolean Requirement Tests

	public static case class RequireTest(
		public let predicate: -> boolean
	) implements Test
	{
		override func passes() -> boolean = this.predicate.apply

		override func addErrors(List<String> errors) -> void
		{
			if (this.passes) return
			errors.add("Generic Requirement failed")
		}
	}

	static func require(-> boolean predicate) -> RequireTest = RequireTest(predicate)

	// Equality Tests

	public static case class EqualityTest(
		public let actual: Object!
		public let expected: Object!
		public let inverted: boolean = false
	) implements Test
	{
		override func passes() -> boolean = [this.actual].deepEquals([this.expected]) != this.inverted

		override func addErrors(List<String> errors) -> void
		{
			if (this.passes) return

			if (this.inverted)
			{
				errors.add("Inequality Requirement failed")
				errors.add("\tfor value: \(this.expected)")
				return;
			}

			errors.add("Equality Requirement failed")
			errors.add("\texpected: \(this.expected)")
			errors.add("\tactual:   \(this.actual)")
		}
	}

	infix func =?=(Object! lhs, Object! rhs) -> EqualityTest = EqualityTest(lhs, rhs, false)

	infix func =!=(Object! lhs, Object! rhs) -> EqualityTest = EqualityTest(lhs, rhs, true)

	// Expect Throwable Tests

	public static case class ExpectTest(
		public let block: -> void
		public let errors: Class<+Throwable>...
	) implements Test
	{
		override func passes() -> boolean
		{
			try
			{
				this.block.apply()
			}
			catch (Throwable t)
			{
				for (e <- this.errors) if (e.isInstance(t)) return true
				throw t
			}
			return false
		}

		override func addErrors(List<String> errors) -> void
		{
			if (this.passes) return

			errors.add("Throwable Test Failed: ")
			errors.add("\texpected: \(this.errors)")
		}
	}

	static func expect(Class<+Throwable>... errors, -> void from) -> ExpectTest = ExpectTest(from, errors...)

	// Test Methods

	func passes() -> boolean

	func addErrors(List<String> errors) -> void
}
