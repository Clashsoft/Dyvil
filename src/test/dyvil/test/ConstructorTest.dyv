package dyvil.test

using dyvil.Collections

public class ConstructorTest
{
	case class A(public let i: int
				 public let j: int)
	{
		static var classInitialized: boolean

		static init
		{
			classInitialized = true
		}

		static func initClass(): void { /* noop, forces static initializer */ }
	}

	case class B(public let i: int { override get }) extends A(i, 0)
	{
		public var initialized: boolean

		init
		{
			this.initialized = true
		}
	}

	case class C(public let j: int { override get }) extends A(0, j)

	case object O extends A(1, 1)

	class InitOrder
	{
		public var order: List<String> = MutableList<String>

		let i: int = { this.order += "init s" ; 0 }

		init
		{
			this.order += "init block"
		}

		public init()
		{
			this.init(1)
			this.order += "init() body"
		}

		public init(int value)
		{
			this.order += "init(int) body"
		}
	}

	public init()
	{
	}

	public static func main([String] args): void
	{
		A.initClass

		Main.test("A.classInitialized", true, A.classInitialized)

		let a = A(1, 2)
		let b = B(1)
		let c = C(2)
		let o = O

		let ba: A = b // B -> A
		let ca: A = c // C -> A
		let oa: A = o // O -> A

		Main.test("A", a, A(1, 2))
		Main.test("A.i", a.i, 1)
		Main.test("A.j", a.j, 2)

		Main.test("B", b, B(1))
		Main.test("B.initialized", true, b.initialized)
		Main.test("B.i", ba.i, 1)
		Main.test("B.j", ba.j, 0)

		Main.test("C", c, C(2))
		Main.test("C.i", ca.i, 0)
		Main.test("C.j", ca.j, 2)

		Main.test("O", o, O)
		Main.test("O.i", oa.i, 1)
		Main.test("O.j", oa.j, 1)

		var initOrder = new InitOrder
		Main.test("Initialization Order", List("init s", "init block", "init(int) body", "init() body"), initOrder.order)
	}
}
