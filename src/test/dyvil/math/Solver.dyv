package dyvil.math

public class Solver
{
	public interface Context
	{
		func resolve(String name): Expr
	}

	public interface Expr
	{
		func solve(Context c): Expr
	}

	public case class Var(let name: String) implements Expr
	{
		public override func solve(Context c): Expr = c.resolve(this.name)
	}

	public case class Const(let value: double) implements Expr
	{
		public override func solve(Context c): Expr = this
	}

	public case class Add(let lhs: Expr, let rhs: Expr) implements Expr
	{
		public override func solve(Context c): Expr
		{
			let l = this.lhs.solve(c)
			let r = this.rhs.solve(c)

			(l, r) match {
				case (Const(0), _) => r
				case (_, Const(0)) => l

				case (Const(var x), Const(var y)) => return Const(x + y)
				case _ => return Add(l, r)
			}
		}
	}

	public case class Multiply(let lhs: Expr, let rhs: Expr) implements Expr
	{
		public override func solve(Context c): Expr
		{
			let l = this.lhs.solve(c)
			let r = this.rhs.solve(c)

			(l, r) match {
				case (Const(0), _) | (_, Const(0)) => Const(0)
				case (Const(1), _) => r
				case (_, Const(1)) => l

				case (Const(var x), Const(var y)) => return Const(x * y)
				case _ => return Multiply(l, r)
			}
		}
	}

	// ---

	public static implicit func d2Const(double d): Const = Const(d)

	public static implicit func map2Context(Map<String, Expr> map): Context = s => map.get(s)

	public infix func +(Expr lhs, Expr rhs): Expr = Add(lhs, rhs)

	public infix func *(Expr lhs, Expr rhs): Expr = Multiply(lhs, rhs)
}
