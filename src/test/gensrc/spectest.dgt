#inject(COUNT: int, SUBSTITUTION: String, ENABLED: boolean, NESTED: boolean)

// GEN_NOTICE
// Timestamp: TIME_STAMP

// tests for substitutions

line without substitution

line with COUNT #(SUBSTITUTION)s
line ending with SUBSTITUTION
SUBSTITUTION at the beginning

// tests for the escaped ##

## at start of the line
line ending with a ##
line with ## in the middle

// tests for the preprocessor directives

#let(_ENABLED){#name(ENABLED)}
#let(_NESTED = "NESTED")

#if (ENABLED) {
	_ENABLED set to true #if (NESTED) {and _NESTED set to true} #else {but _NESTED set to false}
}
#else {
	_ENABLED set to ENABLED #if (NESTED) {but _NESTED set to true} #else {and _NESTED set to false}
}

#for (spec <- [ spec "./spectest-Test.dgs", spec "./spectest-Base.dgs" ]) {
	#let(COUNT: int = Integer.parseInt(spec['COUNT']))
	#let(SPEC_NAME = spec['SPEC_NAME'])

	- the value of #name(COUNT) in SPEC_NAME is COUNT
}

Counting:#for (INDEX <- 0 .. 10) { INDEX}


More Counting:
#for (INDEX <- 1 .. 5) {
	INDEX
}

------ spectest-Base.dgs ------
#include("./spectest-Base.dgs")
-------------------------------
