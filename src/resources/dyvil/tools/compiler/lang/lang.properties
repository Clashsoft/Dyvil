resolve.any='%s' could not be resolved to a type, method or field
resolve.package='%s' could not be resolved to a package or class
resolve.header='%s' could not be resolved to a header file
resolve.type='%s' could not be resolved to a type
resolve.method='%s' could not be resolved to a method
resolve.field='%s' could not be resolved to a field
resolve.method_field='%s' could not be resolved to a method or field
resolve.constructor=The constructor for '%s' could not be resolved
resolve.label='%s' could not be resolved to a label

package.missing=Missing Package Declaration
package.invalid=Invalid Package Declaration in package '%s'
package.default=Invalid Package Declaration in default package

import.wildcard=Invalid Wildcard import
import.package.invalid=Invalid Static Import: Cannot import members from a package
import.using.invalid=Invalid Static Import: The import has to refer to a member

type.class.generic=Generic Types cannot be used at this location
type.class.lambda=Lambda Types cannot be used at this location
type.class.typevar=Type Variable Types cannot be used at this location
type.super.array=Array Types cannot be used as super types
type.super.typevar=Type Variable Types cannot be used as super types
type.invalid.wildcard=Wildcard Types cannot be used at this location
type.access.invisible=The type '%s' cannot be accessed because it is not visible
type.access.sealed=The sealed class '%s' cannot be accessed because it is private to it's library
type.access.deprecated=The class '%s' is deprecated
type.access.invalid=The instance of the type '%s' cannot be accessed because it is not an object type

annotation.type=The type '%s' is not an annotation type
annotation.target=The annotation type '%s' is not applicable for the target
annotation.method='%2$s' could not be resolved to an annotation interface method for '%1$s'
annotation.constant=The value for '%s' has to be a constant expression
annotation.type=The value for '%s' is incompatible with the required type

class.extend.type=The %1$s '%2$s' cannot be extended, only classes are allowed
class.extend.final=The final class '%s' cannot be extended
class.extend.deprecated=The extended class '%s' is deprecated
class.implement.type=The %1$s '%2$s' cannot be implemented, only interfaces are allowed
class.implement.deprecated=The interface '%s' is deprecated
class.object.constructor=The object class '%s' cannot have a constructor

classparameter.type=The default value of the class parameter '%s' is incompatible with the parameter type
classparameter.type.infer=The type of the class parameter '%s' cannot be inferred
classparameter.type.nodefault=The type of the non-default class parameter '%s' cannot be inferred
classparameter.type.void=Class Parameters cannot have the type void
classparameter.access.instance=The class parameter '%s' cannot be accessed from a static context
classparameter.access.unqualified=The class parameter '%s' should be qualified with 'this'
classparameter.assign.final=The final class parameter '%s' cannot be assigned
classparameter.assign.type=The type of the assigned value is incompatible with the type of the class parameter '%s'

# Members

constructor.invalid=Invalid Constructor
constructor.interface=The interface '%s' cannot be instantiated
constructor.abstract=The abstract class '%s' cannot be instantiated
constructor.type=The constructor must not return a result
constructor.static=Constructors cannot be declared static
constructor.unimplemented=The constructor is not implemented, but does not have an abstract modifier
constructor.super=Implicit no-arg super Constructor new() for super type '%s' cannot be inferred
constructor.access.invisible=The constructor for '%s' cannot be accessed because it is not visible
constructor.access.sealed=The sealed constructor for '%s' cannot be accessed because it is private to it's library
constructor.access.deprecated=The constructor for '%s' is deprecated
constructor.access.array=Invalid Array Constructor Argument List
constructor.access.array.length=Mismatching number of array length parameters and type dimensions
constructor.access.array.type=The array length parameter has to be of type int

method.type=The expression type of the method '%s' is incompatible with the return type
method.type.infer=The type of the method '%s' cannot be inferred
method.type.abstract=The type of the abstract method '%s' cannot be inferred
method.exception.type=The thrown exception must be a subtype of java.lang.Throwable
method.override=The method '%s' must override or implement a supertype method
method.overrides=The method '%s' overrides a method, but does not have an 'override' modifier
method.override.final=The method '%s' cannot override a final method
method.override.type=The return type of the method '%s' is incompatible with the overridden method type
method.static=The method '%s' is declared static, but does not have an implementation
method.unimplemented=The method '%s' is not implemented, but does not have an abstract modifier
method.duplicate=Duplicate method '%1$s' with erased signature '%2$s'
method.typevar.infer=The type argument for the type variable '%2$s' of the method '%1$s' was inferred to 'any'
method.access.invisible=The method '%s' cannot be accessed because it is not visible
method.access.sealed=The sealed method '%s' cannot be accessed because it is private to it's library
method.access.static=The static method '%s' should be accessed in a static way
method.access.instance=The instance method '%s' cannot be accessed from a static context
method.access.unqualified=The instance method '%s' should be qualified with 'this'
method.access.deprecated=The method '%s' is deprecated
method.access.infix_type=The infix method argument for '%s' is incompatible with the required type
method.access.prefix_type=The prefix method argument for '%s' is incompatible with the required type
method.access.argument_type=The method argument for '%s' is incompatible with the required type
method.access.exception=Unhandled Exception type '%s'

method.compound.type=The return type of method '%1$s' is incompatible with the type of the assigned field '%2$s'
method.compound.update=The 'update' method for the assignment call value could not be resolved

parameter.type=The default value of the parameter '%s' is incompatible with the parameter type
parameter.type.void=Parameters cannot have the type void
parameter.assign.final=The final parameter '%s' cannot be assigned
parameter.assign.type=The type of the assigned value is incompatible with the type of the parameter '%s'

generic.upperbound=Only one generic upper bound of '%s' can be a class
generic.not_generic='%s' is not a generic type
generic.count=Invalid number of generic type arguments
generic.type=The generic type argument is incompatible with the type variable '%s'

# Properties

property.empty=The property '%s' does not have a getter nor a setter
property.type.infer=The type of the property '%s' cannot be inferred
property.type.infer.writeonly=The type of the write-only property '%s' cannot be inferred because it does not have a getter
property.type.void=The writable property '%s' cannot have the type void
property.getter.type=The getter value of the property '%s' is incompatible with the property type
property.getter.abstract=The property '%s' does not provide an implementation for the overridden abstract getter
property.setter.type=The setter value of the property '%s' has to be of type void
property.setter.abstract=The property '%s' does not provide an implementation for the overridden abstract setter
property.override=The property '%s' must override or implement a supertype property
property.overrides=The property '%s' overrides a supertype property, but does not have an 'override' modifier
property.override.final=The property '%s' cannot override a final property
property.override.type=The type of the property '%s' is incompatible with the overridden property type
property.access.invisible=The property '%s' cannot be accessed because it is not visible
property.access.sealed=The sealed property '%s' cannot be accessed because it is private to it's library
property.access.deprecated=The property '%s' is deprecated
property.access.instance=The instance property '%s' cannot be accessed from a static context
property.access.static=The static property '%s' should be accessed in a static way
property.access.unqualified=The instance property '%s' should be qualified with 'this'
property.assign.type=The type of the assigned value is incompatible with the type of the property '%s'
property.assign.readonly=The read-only property '%s' cannot be assigned

# Fields

field.type=The initial value of the field '%s' is incompatible with the field type
field.type.infer=The type of the field '%s' cannot be inferred
field.type.infer.novalue=The type of the uninitialized field '%s' cannot be inferred
field.type.void=Fields cannot have the type void
field.access.invisible=The field '%s' cannot be accessed because it is not visible
field.access.sealed=The sealed field '%s' cannot be accessed because it is private to it's library
field.access.deprecated=The field '%s' is deprecated
field.access.instance=The instance field '%s' cannot be accessed from a static context
field.access.static=The static field '%s' should be accessed in a static way
field.access.unqualified=The instance field '%s' should be qualified with 'this'
field.assign.type=The type of the assigned value is incompatible with the type of the field '%s'
field.assign.final=The final field '%s' cannot be assigned

# Variables

variable.type=The initial value of the variable '%s' is incompatible with the variable type
variable.type.infer=The type of the variable '%s' cannot be inferred
variable.type.void=Variables cannot have the type void
variable.assign.type=The type of the assigned value is incompatible with the type of the variable '%s'
variable.assign.final=The final variable '%s' cannot be assigned

capture.variable=The parameter '%s' cannot be assigned as it cannot be converted to a Reference variable

# Expressions

this.assign=Cannot assign a value to 'this'
this.access.static='this' cannot be accessed in a static context
this.instance=No enclosing instance for '%s' available

super.assign=Cannot assign a value to 'super'
super.access.static='super' cannot be accessed in a static context
super.access.type='super' cannot be accessed: The enclosing type does not have a super type
super.type.invalid=The requested super type is not a super type of the enclosing type
super.type.indirect=The requested super type is not a direct super type of the enclosing type

cast.primitive=Invalid cast: Cannot cast from a primitive to a reference type
cast.reference=Invalid cast: Cannot cast from a reference to a primitive type
cast.unnecessary=Unnecessary cast: The value is already of the casted type
cast.void=Invalid cast: Cannot cast to void
cast.incompatible=Invalid cast: The expression of type %1$s cannot be casted to %2$s because %1$s is neither a super-type nor a sub-type of %2$s
instanceof.value.primitive=Instance checks cannot be performed on primitive expressions
instanceof.type.primitive=Instance checks cannot be performed with primitive types
instanceof.type.equal=Unnecessary instance check: The expression is already of type %1$s
instanceof.type.subtype=Unnecessary instance check: The expression of type %1$s can only be of type %2$s because %1$s is a sub-type of %2$s
instanceof.type.incompatible=Invalid instance check: The expression of type %1$s can never be of type %2$s because %1$s is neither a super-type nor a sub-type of %2$s

case.invalid=Invalid Case Statement - Invalid Expression
match.invalid=Invalid Match Expression - Value expected
pattern.type=The type of the pattern is incompatible with the matched value type
pattern.dead=Unreachable Pattern
pattern.class.count=The Case Class Pattern for '%s' has an invalid number of patterns
pattern.class.type=The pattern for the parameter '%1$s' is incompatible with the parameter type
pattern.tuple.type=The tuple pattern type is incompatible with the required tuple type
pattern.typecheck.primitive=Cannot use Type Check patterns for primitive types
pattern.typecheck.invalid=Invalid Type Check pattern - Type expected

if.condition.type=The condition of an if Statement has to evaluate to a boolean value
if.condition.invalid=Invalid if Condition
while.condition.type=The condition of a while Statement has to evaluate to a boolean value
while.condition.invalid=Invalid while Condition
do.condition.type=The condition of a do-while Statement has to evaluate to a boolean value
do.condition.invalid=Invalid do-while Condition
for.invalid=Invalid for-each Statement
for.iterable.type=The type of the Iterable is incompatible with the variable type
for.condition.type=The condition of a for Statement has to evaluate to a boolean value
for.array.type=The type of the iterated array is incompatible with the variable type
for.string.type=The type of the variable has to be 'char' when iterating over a String
for.range.type=The type of the iterated range is incompatible with the variable type
for.variable.infer=The type of the loop variable '%s' cannot be inferred

break.invalid=Invalid break Statement: break cannot be applied in the current context
break.invalid.type=Invalid break Statement: The statement labeled '%s' is not a loop
continue.invalid=Invalid continue Statement: continue cannot be applied in the current context
continue.invalid.type=Invalid continue Statement: The statement labeled '%s' is not a loop
goto.invalid=Invalid goto Statement: goto cannot be applied in the current context
goto.warning=goto should not be used

value.reference=The value cannot be converted to a reference object
value.constant=The expression could not be converted to a compile-time constant
literal.method=The literal conversion from %1$s to %2$s cannot be performed as %2$s does not have a static apply%3$s method
literal.type=The type of the literal conversion is incompatible with the required type
array.element.type=The array element type is incompatible with the array type
array.empty=Could not infer the type of an empty array
tuple.type=The tuple type is incompatible with the required tuple type
tuple.method=The literal conversion from (%1$s) to %2$s cannot be performed as %2$s does not have a static apply(%1$s) method
lambda.parameter.type=The type of the Lambda Parameter '%s' cannot be inferred
lambda.method=The Lambda Expression could not be linked to a functional method
lambda.type=The return value of the Lambda Expression is incompatible with the linked method's return type
try.catch.type=The type of the catch block must be a subtype of java.lang.Throwable
throw.type=The value of the throw statement must be a subtype of java.lang.Throwable
statement.type=The type of a statement in a statement list has to be usable as a statement
block.type=The returning type of the block is incompatible with the required type
nil.type=The nil literal cannot be applied at this location
nil.method=The nil literal conversion to %1$s cannot be performed as %1$s does not have a static apply() method
wildcard.type=The wildcard literal cannot be applied at this location
formatstring.void=The format string expression has to return a value
swap.type=References of different types cannot be swapped
classoperator.invalid=Invalid Class Operator - Type expected
typeoperator.invalid=Invalid Type Operator - Type expected
nullcheck.primitive=Cannot perform a Null Pointer Check on a primitive value

# DWT Markers

dwt.component.type='%1$s' ($2$s) could not be resolved to a component type
dwt.property.unknown='%1$s' could not be resolved to a property of component type %2$s

# Marker Levels

marker.type.access.deprecated=warning
marker.classparameter.access.unqualified=warning
marker.classparameter.access.static=warning
marker.classparameter.access.deprecated=warning
marker.method.typevar.infer=warning
marker.method.access.unqualified=warning
marker.method.access.static=warning
marker.method.access.deprecated=warning
marker.property.access.unqualified=warning
marker.property.access.static=warning
marker.property.access.deprecated=warning
marker.field.access.unqualified=warning
marker.field.access.static=warning
marker.field.access.deprecated=warning
marker.constructor.access.deprecated=warning

marker.class.extend.deprecated=warning
marker.class.implement.deprecated=warning
marker.method.overrides=warning
marker.cast.unnecessary=warning
marker.instanceof.unnecessary=warning

marker.goto.warning=ignore

marker.dwt.property.unknown=warning
