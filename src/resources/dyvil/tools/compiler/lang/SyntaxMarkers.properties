parser.unexpected=Unexpected Token: %s
parser.error=Failed to parse Token '%1$s': %2$s

# Headers

header.declaration.duplicate=Duplicate Header Declaration
header.element=Invalid Header Declaration - 'class' expected
header.element.invalid=Invalid Header Element - Invalid %s

# Type Aliases

typealias.type=Invalid Type Alias - 'type' expected
typealias.identifier=Invalid Type Alias - Identifier expected
typealias.equals=Invalid Type Alias - '=' expected
typealias.generic.close_bracket=Invalid Type Alias - ']' expected"

# Package Declarations

package.package=Invalid Package Declaration - 'package' expected
package.identifier=Invalid Package Declaration - Identifier expected
package.dot=Invalid Package Declaration - '.' or ';' expected

# Import Declarations

import.identifier=Invalid Import Declaration - Identifier expected
import.dot=Invalid Import Declaration - '.' or ';' expected
import.alias.identifier=Invalid Import Alias - Identifier expected
import.multi.comma=Invalid Import List - ',' expected
import.multi.close_brace=Invalid Multi-Import - '}' expected

# Include Declaratinos

include.include=Invalid Include Declaration - 'include' expected
include.identifier=Invalid Include Declaration - Identifier expected
include.dot=Invalid Include Declaration - '.' or ';' expected

# Operators

operator.type.invalid=Invalid Operator - 'infix', 'prefix' or 'postfix' expected
operator.identifier=Invalid Operator - Identifier expected
operator.operator=Invalid Operator - 'operator' expected

operator.prefix.semicolon=Invalid Prefix Operator - ';' expected
operator.prefix.associativity=Invalid Prefix Operator - Prefix Operators cannot have an associativity
operator.postfix.semicolon=Invalid Postfix Operator - ';' expected"
operator.postfix.associativity=Invalid Postfix Operator - Postfix Operators cannot have an associativity
operator.infix.open_brace=Invalid Infix Operator - '{' expected

operator.property.invalid=Invalid Operator Property - Unexpected %s
operator.property.comma=Invalid Operator Property List - ',' expected
operator.property.precedence=Invalid Operator Precedence - Integer expected
operator.property.associativity=Invalid Operator Associativity - 'left', 'none' or 'right' expected

# Annotations

annotation.name=Invalid Annotation - Name expected
annotation.parenthesis=Invalid Annotation - ')' expected

# ---------------------------------------- Classes ----------------------------------------

class.identifier=Invalid Class Declaration - Identifier expected
class.generic.close_bracket=Invalid Type Parameter List - ']' expected
class.parameters.close_paren=Invalid Class Parameter List - ')' expected
class.extends.close_paren=Invalid Super Class Argument List - ')' expected
class.interface.implements=Interfaces cannot implement other interfaces; use 'extends' instead
class.body.separator=Invalid Class Declaration - '{' or ';' expected
class.body.open_brace=Invalid Class Body - '{' expected
class.body.close_brace=Invalid Class Body - '}' expected
class.body.declaration.end=Invalid Member Declaration - ';' or '}' expected
class.body.declaration.invalid=Invalid Member Declaration - ';', '=', '(', '[' or '{' expected
class.anonymous.body.end=Invalid Anonymous Class Body - '}' expected

# ---------------------------------------- Members ----------------------------------------

member.type=Invalid Member Declaration - Type expected
member.identifier=Invalid Member Declaration - Identifier expected
member.symbol.operator=Member Declarations with Symbol Identifiers should have the 'operator' keyword before the identifier
member.identifier.operator=Member Declarations with non-Symbol Identifiers should not have the 'operator' keyword \
  before the identifier

# Constructors

constructor.call.close_paren=Invalid Constructor Argument List - ')' expected

constructor.parameters.open_paren=Invalid Constructor Parameter List - '(' expected
constructor.parameters.close_paren=Invalid Constructor Parameter List - ')' expected

# Fields

field.identifier=Invalid Field Declaration - Identifier expected
field.separator=Invalid Field Declaration - ';', '=' or '{' expected
field.type.duplicate=Invalid Field Type Ascription - The Field was already declared with a type

# Methods

method.identifier=Invalid Method Declaration - Identifier expected
method.generic.close_bracket=Invalid Method Type Parameter List - ']' expected
method.parameters.close_paren=Invalid Method Parameter List - ')' expected
method.declaration.separator=Invalid Method Declaration - ';', '=', '(', '[', '{' or 'throws' expected
method.body.separator=Invalid Method Declaration - ';', '=', '{' or 'throws' expected
method.throws.comma=Invalid Exception List - ',' expected
method.type.duplicate=Invalid Method Type Ascription - The Method was already declared with a type

method.call.close_paren=Invalid Argument List - ')' expected
method.call.generic.close_bracket=Invalid Type Argument List - ']' expected
method.subscript.close_bracket=Invalid Subscript Arguments - ']' expected

# Parameters

parameter.type=Invalid Parameter - Untyped Parameters are not allowed in this context
parameter.type.duplicate=Invalid Parameter Type Ascription - The Parameter was already declared with a type
parameter.identifier=Invalid Parameter - Identifier expected
parameter.comma=Invalid Parameter List - ',' or ')' expected
parameter.receivertype.invalid=Invalid Receiver Type - Receiver Types are not allowed in this context

# Properties

property.separator=Invalid Property Declaration - ':', ';' or '{' expected
property.tag=Invalid Property - Identifier expected
property.tag.unknown=Invalid Property Tag - 'get' or 'set' expected
property.setter.identifier=Invalid Property Setter - Identifier expected
property.setter.close_paren=Invalid Property Setter - ')' expected

# ---------------------------------------- Types ----------------------------------------

type.invalid=Invalid Type - Invalid %s
type.tuple.close_paren=Invalid Tuple Type - ')' expected
type.tuple.lambda_arrow=Invalid Lambda Type - '=>' expected
type.array.close_bracket=Invalid Array Type - ']' expected
type.generic.close_bracket=Invalid Generic Type - ']' expected
type.list.comma=Invalid Type List - ',' expected

# Type Parameters

typeparameter.identifier=Invalid Type Variable - Identifier expected
typeparameter.bound.invalid=Invalid Type Parameter Bound - '<:' or '>:' expected
typeparameter.list.comma=Invalid Type Parameter List - ',' expected

# ---------------------------------------- Expressions ----------------------------------------

expression.list.comma=Invalid Expression List - ',' expected
expression.named_list.comma=Invalid Named Expression List - ',' expected
expression.dot.invalid=Invalid Dot Access - Unexpected %s
expression.invalid=Invalid Expression - Unexpected %s
expression.operator.invalid=Invalid Infix Operator '%s' - Operator without associativity is not allowed at this location
expression.else=Invalid Expression - 'else' not allowed at this location
expression.catch=Invalid Expression - 'catch' not allowed at this location
expression.finally=Invalid Expression - 'finally' not allowed at this location

assignment.invalid=Invalid Assignment - Remove this assignment

# This and Super

this.close_bracket=Invalid This Expression - ']' expected
super.close_bracket=Invalid Super Expression - ']' expected

# String Interpolations

stringinterpolation.expression=Invalid String Interpolation - Expression expected
stringinterpolation.part=Invalid String Interpolation - String Part expected
match.case.action=Invalid Match Case - ':', '=>' or '{' expected
match.case.end=Invalid Match Case - ';' expected

# Tuples and Lambdas

tuple.close_paren=Invalid Tuple Expression - ')' expected

lambda.close_paren=Invalid Lambda Expression - ')' expected

# Arrays and Maps

array.open_bracket=Invalid Array Literal - '[' expected
array.separator=Invalid Array Literal - ',' expected
array.map.colon=Invalid Map Literal - ':' expected

# Match Expressions

match.invalid=Invalid Match Expression - '{' or 'case' expected
match.case=Invalid Match Expression - 'case' or '}' expected expected

# ---------------------------------------- Statements ----------------------------------------

# Statement Lists

statementlist.close_brace=Invalid Statement List - '{' expected
statementlist.semicolon=Invalid Statement List - ';' expected

variable.identifier=Invalid Variable Declaration - Identifier expected
variable.type.duplicate=Invalid Variable Type Ascription - The Variable was already declared with a type

# If Statements

if.if=Invalid If Statement - 'if' expected
if.separator=Invalid If Statement - ':' or '{' expected
if.close_paren=Invalid If Statement - ')' expected

# While Statements

while.while=Invalid While Statement - 'while' expected
while.separator=Invalid While Statement - ':' or '{' expected
while.close_paren=Invalid While Statement - ')' expected

do.deprecated=Do-While Statements are deprecated; use 'repeat' instead
repeat.repeat=Invalid Repeat Statement - 'repeat' expected

# For Statements

for.for=Invalid For Statement - 'for' expected
for.open_paren=Invalid For Statement - '(' expected
for.variable.identifier=Invalid For Statement - Identifier expected
for.variable.separator=Invalid For Statement - ';', ':', '<-' or 'in' expected after Variable
for.variable.semicolon=Invalid For Statement - ';' expected after Variable
for.condition.semicolon=Invalid For Statement - ';' expected after Condition
for.close_paren=Invalid For Statement - ')' expected
for.separator=Invalid For Statement - ':' or '{' expected

# Synchronized Statements

sync.synchronized=Invalid Synchronized Statement - 'synchronized' expected
sync.separator=Invalid Synchronized Statement - ':' or '{' expected
sync.close_paren=Invalid Synchronized Statement - ')' expected

# Try Statements

try.catch.separator=Invalid Catch Expression - ':' or '{' expected"
try.catch.close_paren=Invalid Catch Expression - ')' expected"

# ---------------------------------------- Patterns ----------------------------------------

pattern.invalid=Invalid Pattern - Unexpected %s
pattern.binding.identifier=Invalid Binding Pattern - Identifier expected
pattern.tuple.close_paren=Invalid Tuple Pattern - ')' expected
pattern.case_class.close_paren=Invalid Case Class Pattern - ')' expected
pattern.number.negative=Invalid Number Literal Pattern - Number expected after '-'
pattern.list.comma=Invalid Pattern List - ',' expected
