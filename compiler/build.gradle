import org.apache.tools.ant.filters.ReplaceTokens

// --------------- Plugins ---------------

plugins {
	id 'application'
	id 'antlr'
}

// --------------- Info ---------------

version = getTagVersion('compiler/')
description = 'The Dyvil Compiler'
publishInfo.labels = [ 'dyvil', 'compiler', 'jvm', 'bytecode' ]

mainClassName = 'dyvilx.tools.compiler.Main'

// --------------- Dependencies ---------------

dependencies {
	compile project(':library')
	compileOnly rootProject.libraryDependency

	// https://mvnrepository.com/artifact/commons-cli/commons-cli
	compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

	// https://mvnrepository.com/artifact/org.antlr/antlr4
	antlr group: 'org.antlr', name: 'antlr4', version: '4.7.2'

	// https://mvnrepository.com/artifact/org.antlr/antlr4-runtime
	implementation group: 'org.antlr', name: 'antlr4-runtime', version: '4.7.2'
}

// --------------- Source Copying ---------------

tasks.register('copyJava', Copy) {
	it.from sourceSets.main.java
	it.into "$buildDir/src/main/java/"

	it.include '**/DyvilCompiler.java'
	it.includeEmptyDirs = false

	it.filter(ReplaceTokens, beginToken: '$$', endToken: '$$', tokens: [
			version        : rootProject.version,
			libraryVersion : project(':library').version,
			compilerVersion: project.version
	])
}

tasks.named('compileJava', JavaCompile) {
	it.dependsOn 'copyJava'
	it.source fileTree("$buildDir/src/main/java").builtBy('copyJava')
	it.exclude {
		final String path = it.file.path
		path.contains('compiler/src/main/java') && path.endsWith('DyvilCompiler.java')
	}
}

// --------------- ANTLR ---------------

def generatedANTLRDir = "$buildDir/generated/sources/antlr/main/"

sourceSets.main.java.srcDir(generatedANTLRDir)

// https://stackoverflow.com/questions/40995727/gradle-cant-find-antlr-token-file
generateGrammarSource {
	def packageName = 'dyvilx.tools.compiler.parser'
	arguments += [ '-package', packageName ]
	outputDirectory = file("$generatedANTLRDir/${ packageName.replace('.', '/') }/")
}

// https://github.com/gradle/gradle/issues/820
configurations.compile {
	extendsFrom = extendsFrom.findAll { it != configurations.antlr }
}
